#!/bin/bash

# VMStation Certificate Fix Validation Test
# Validates the fixes for masternode certificate/config issues

set -e

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

echo "=== VMStation Certificate Fix Validation ==="
echo "Timestamp: $(date)"
echo ""

# Test 1: Verify kubeadm init improvements
info "Test 1: Verifying kubeadm init certificate configuration..."

SETUP_CLUSTER_FILE="ansible/plays/kubernetes/setup_cluster.yaml"
if [ ! -f "$SETUP_CLUSTER_FILE" ]; then
    error "Setup cluster file not found: $SETUP_CLUSTER_FILE"
    exit 1
fi

# Check for certificate-related improvements
if grep -q "apiserver-cert-extra-sans" "$SETUP_CLUSTER_FILE"; then
    success "✓ API server certificate SANs configuration found"
else
    error "✗ Missing API server certificate SANs configuration"
    exit 1
fi

if grep -q "upload-certs" "$SETUP_CLUSTER_FILE"; then
    success "✓ Certificate upload configuration found"
else
    error "✗ Missing certificate upload configuration"
    exit 1
fi

# Test 2: Verify certificate validation is added
info "Test 2: Verifying certificate validation logic..."

if grep -q "Validate certificates generated by kubeadm init" "$SETUP_CLUSTER_FILE"; then
    success "✓ Certificate validation after kubeadm init found"
else
    error "✗ Missing certificate validation after kubeadm init"
    exit 1
fi

if grep -q "Enhanced join command and certificate validation" "$SETUP_CLUSTER_FILE"; then
    success "✓ Enhanced join command validation found"
else
    error "✗ Missing enhanced join command validation"
    exit 1
fi

# Test 3: Verify pre-join validation
info "Test 3: Verifying pre-join certificate and connectivity validation..."

if grep -q "Pre-join certificate and connectivity validation" "$SETUP_CLUSTER_FILE"; then
    success "✓ Pre-join validation logic found"
else
    error "✗ Missing pre-join validation logic"
    exit 1
fi

if grep -q "Test API server certificate accessibility" "$SETUP_CLUSTER_FILE"; then
    success "✓ API server certificate accessibility test found"
else
    error "✗ Missing API server certificate accessibility test"
    exit 1
fi

# Test 4: Validate certificate-specific commands
info "Test 4: Verifying certificate validation commands..."

if grep -q "openssl x509.*apiserver.crt" "$SETUP_CLUSTER_FILE"; then
    success "✓ API server certificate validation commands found"
else
    error "✗ Missing API server certificate validation commands"
    exit 1
fi

if grep -q "ca.crt.*checkend" "$SETUP_CLUSTER_FILE"; then
    success "✓ CA certificate validity check found"
else
    error "✗ Missing CA certificate validity check"
    exit 1
fi

# Test 5: Verify Ansible syntax
info "Test 5: Verifying Ansible syntax after certificate fixes..."

if ansible-playbook -i ansible/inventory.txt "$SETUP_CLUSTER_FILE" --syntax-check >/dev/null 2>&1; then
    success "✓ Ansible syntax validation passed"
else
    error "✗ Ansible syntax validation failed"
    ansible-playbook -i ansible/inventory.txt "$SETUP_CLUSTER_FILE" --syntax-check || true
    exit 1
fi

# Test 6: Check for certificate-related improvements in kubeadm init
info "Test 6: Verifying kubeadm init command improvements..."

INIT_COMMAND=$(grep -A5 "kubeadm init" "$SETUP_CLUSTER_FILE" | grep -E "(apiserver-cert-extra-sans|upload-certs)" | wc -l)
if [ "$INIT_COMMAND" -ge 2 ]; then
    success "✓ kubeadm init command contains certificate improvements"
else
    error "✗ kubeadm init command missing certificate improvements"
    warn "Expected both --apiserver-cert-extra-sans and --upload-certs flags"
    exit 1
fi

# Test 7: Verify certificate hash validation
info "Test 7: Verifying CA certificate hash validation..."

if grep -q "sha256.*CA_HASH" "$SETUP_CLUSTER_FILE"; then
    success "✓ CA certificate hash validation found"
else
    error "✗ Missing CA certificate hash validation"
    exit 1
fi

# Test 8: Check connectivity validation logic
info "Test 8: Verifying API server connectivity validation..."

if grep -q "ping.*API_SERVER" "$SETUP_CLUSTER_FILE"; then
    success "✓ API server ping test found"
else
    error "✗ Missing API server ping test"
    exit 1
fi

if grep -q "curl.*healthz" "$SETUP_CLUSTER_FILE"; then
    success "✓ API server healthz endpoint test found"
else
    error "✗ Missing API server healthz endpoint test"
    exit 1
fi

# Test 9: Verify error handling
info "Test 9: Verifying certificate error handling..."

FAILED_WHEN_COUNT=$(grep -c "failed_when:.*rc != 0" "$SETUP_CLUSTER_FILE" || echo "0")
if [ "$FAILED_WHEN_COUNT" -ge 1 ]; then
    success "✓ Certificate validation error handling found"
else
    warn "⚠ Limited certificate validation error handling"
fi

# Test 10: Check backward compatibility
info "Test 10: Verifying backward compatibility..."

if grep -q "when: inventory_hostname in groups\['monitoring_nodes'\]" "$SETUP_CLUSTER_FILE"; then
    success "✓ Control plane node targeting preserved"
else
    warn "⚠ Control plane node targeting may be missing"
fi

echo ""
echo "=== Certificate Fix Validation Summary ==="
success "✓ All certificate fix tests passed!"
echo ""
echo "Key improvements implemented:"
echo "  - Enhanced kubeadm init with proper certificate SANs"
echo "  - Certificate upload configuration for worker joins"
echo "  - Post-init certificate validation"
echo "  - Enhanced join command validation with CA hash verification"
echo "  - Pre-join connectivity and certificate accessibility tests"
echo "  - Comprehensive error handling for certificate issues"
echo ""
echo "Expected outcomes:"
echo "  - API server certificates will include proper SANs for worker validation"
echo "  - Certificates will be uploaded and accessible for worker joins"
echo "  - Invalid certificates will be detected before join attempts"
echo "  - Worker nodes will have better visibility into certificate issues"
echo "  - TLS bootstrap failures should be significantly reduced"