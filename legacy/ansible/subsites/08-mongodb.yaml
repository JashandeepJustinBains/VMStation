---
# Subsite 08: MongoDB
# This playbook deploys MongoDB to the cluster
# following VMStation non-destructive principles and idempotent operations.
- hosts: compute_nodes
  gather_facts: false
  connection: local
  vars_files:
    - ../group_vars/secrets.yml
  vars:
    # === Node Scheduling Configuration ===
    apps_node: homelab
    
    # === NodePort Configuration ===
    mongodb_nodeport: 32002
    
    # === Storage Configuration ===
    storage_hostpath: /mnt/storage

  tasks:
    # === Preflight Checks ===
    - name: Check kubectl availability
      ansible.builtin.command:
        cmd: kubectl version --client
      register: kubectl_check
      failed_when: false
      changed_when: false
      check_mode: false

    - name: Fail with remediation if kubectl not available
      ansible.builtin.fail:
        msg: |
          kubectl is required for Kubernetes operations. Install it with:
          
          For Ubuntu/Debian:
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          For RHEL/CentOS/Fedora:
          sudo dnf install -y kubectl
          
          Or download from: https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/
      when: kubectl_check.rc != 0

    - name: Check Kubernetes cluster connectivity
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: cluster_check
      failed_when: false
      changed_when: false

    - name: Fail if cluster not accessible
      ansible.builtin.fail:
        msg: |
          Cannot connect to Kubernetes cluster. Please verify:
          1. Cluster is running
          2. kubectl is properly configured
          3. Current context points to correct cluster
          
          Check with: kubectl cluster-info
      when: cluster_check.failed | default(false)

    # === Existing Resources Detection ===
    - name: Check for existing mongodb deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: mongodb
        name: mongodb
      register: mongodb_deployment_check
      failed_when: false
      changed_when: false

    - name: Check for existing mongodb service
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: mongodb
        name: mongodb
      register: mongodb_service_check
      failed_when: false
      changed_when: false

    # === Check Mode Behavior ===
    - name: Show what would be created in check mode
      ansible.builtin.debug:
        msg: |
          === CHECK MODE: MongoDB Deployment ===
          
          MongoDB:
          - Namespace: mongodb {{ '(exists)' if (mongodb_deployment_check.resources | default([])) | length > 0 else '(will create)' }}
          - Deployment: mongodb {{ '(exists)' if (mongodb_deployment_check.resources | default([])) | length > 0 else '(will create)' }}
          - Service: NodePort on {{ mongodb_nodeport }} {{ '(exists)' if (mongodb_service_check.resources | default([])) | length > 0 else '(will create)' }}
          - Storage: {{ storage_hostpath }}/mongodb (hostPath, DirectoryOrCreate)
          - Scheduled on: {{ apps_node }}
          
          Run without --check to apply these changes.
      when: ansible_check_mode

    # === Namespace Creation ===
    - name: Create mongodb namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: mongodb
            labels:
              name: mongodb
      register: mongodb_namespace_result
      retries: 5
      delay: 3
      until: mongodb_namespace_result is not failed or 
             ("Too Many Requests" not in (mongodb_namespace_result.msg | default("")) and
              "too many requests" not in (mongodb_namespace_result.msg | default("")) and
              "rate limit" not in (mongodb_namespace_result.msg | default("")))
      failed_when: false
      changed_when: mongodb_namespace_result.changed | default(false)
      when: not ansible_check_mode

    # === MongoDB ===
    - name: Create mongodb deployment
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mongodb
            namespace: mongodb
            labels:
              app: mongodb
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: mongodb
            template:
              metadata:
                labels:
                  app: mongodb
              spec:
                nodeName: "{{ apps_node }}"
                containers:
                  - name: mongodb
                    image: mongo:5
                    ports:
                      - containerPort: 27017
                        protocol: TCP
                    env:
                      - name: MONGO_INITDB_ROOT_USERNAME
                        value: "admin"
                      - name: MONGO_INITDB_ROOT_PASSWORD
                        value: "changeme"  # Note: Use proper secret management in production
                    securityContext:
                      runAsUser: 999
                      runAsNonRoot: true
                      allowPrivilegeEscalation: false
                    resources:
                      limits:
                        cpu: 1000m
                        memory: 1Gi
                      requests:
                        cpu: 100m
                        memory: 256Mi
                    volumeMounts:
                      - name: mongo-data
                        mountPath: /data/db
                volumes:
                  - name: mongo-data
                    hostPath:
                      path: "{{ storage_hostpath }}/mongodb"
                      type: DirectoryOrCreate
      register: mongodb_deployment_result
      failed_when: false
      changed_when: mongodb_deployment_result.changed | default(false)
      when:
        - not ansible_check_mode
        - (mongodb_deployment_check.resources | default([])) | length == 0

    - name: Create mongodb service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: mongodb
            namespace: mongodb
            labels:
              app: mongodb
          spec:
            type: NodePort
            selector:
              app: mongodb
            ports:
              - protocol: TCP
                port: 27017
                targetPort: 27017
                nodePort: "{{ mongodb_nodeport }}"
      register: mongodb_service_result
      failed_when: false
      changed_when: mongodb_service_result.changed | default(false)
      when:
        - not ansible_check_mode
        - (mongodb_service_check.resources | default([])) | length == 0

    # === Summary ===
    - name: Summarize MongoDB deployment
      ansible.builtin.debug:
        msg: |
          === MongoDB Deployment Summary ===
          
          MongoDB:
          - Deployment: {{ 'EXISTS' if (mongodb_deployment_check.resources | default([])) | length > 0 else ('CREATED' if (mongodb_deployment_result.changed | default(false)) else 'NO CHANGE') }}
          - Service: {{ 'EXISTS' if (mongodb_service_check.resources | default([])) | length > 0 else ('CREATED' if (mongodb_service_result.changed | default(false)) else 'NO CHANGE') }}
          - Storage: {{ storage_hostpath }}/mongodb
          - Access: {{ apps_node }}:{{ mongodb_nodeport }}
          
          === Validation Commands ===
          
          Verify Deployment:
          kubectl get pods -n mongodb
          kubectl get svc -n mongodb
          
          Connect to MongoDB:
          kubectl exec -it -n mongodb $(kubectl get pods -n mongodb -l app=mongodb -o jsonpath='{.items[0].metadata.name}') -- mongo --username admin --password changeme --authenticationDatabase admin
          
          Or use external connection:
          mongo mongodb://admin:changeme@{{ apps_node }}:{{ mongodb_nodeport }}/admin
          
          === Security Notes ===
          
          WARNING: This deployment uses default credentials for demonstration.
          For production deployments:
          1. Use Kubernetes Secrets for database credentials
          2. Configure proper authentication mechanisms
          3. Set up database users with appropriate permissions
          4. Consider using persistent volumes for data storage
          5. Implement proper backup and recovery procedures
          
          === Next Steps ===
          
          Update credentials:
          1. Create proper MongoDB credentials in ansible/group_vars/secrets.yml
          2. Update deployment to use secret references
          3. Configure MongoDB users and databases as needed
      when: not ansible_check_mode