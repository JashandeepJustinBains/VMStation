---
# VMStation Monitoring Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    vmstation.io/component: monitoring
---
# Prometheus Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
---
# Prometheus ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
# Prometheus ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring
---
# Prometheus ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'vmstation-homelab'
        environment: 'homelab'
      
    # Alerting configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets: []
    
    # Load alerting rules
    rule_files:
    - /etc/prometheus/rules/*.yml
    
    scrape_configs:
    # Kubernetes API server metrics
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
        
    # Kubernetes node kubelet metrics
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
        
    # Container metrics via cAdvisor
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      metrics_path: /metrics/cadvisor
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
    
    # Node Exporter - All nodes
    - job_name: 'node-exporter'
      static_configs:
      - targets:
        - '192.168.4.63:9100'  # masternode (Debian control-plane)
        labels:
          node: 'masternode'
          role: 'control-plane'
          os: 'debian'
      - targets:
        - '192.168.4.61:9100'  # storagenodet3500 (Debian worker)
        labels:
          node: 'storagenodet3500'
          role: 'storage'
          os: 'debian'
      - targets:
        - '192.168.4.62:9100'  # homelab (RHEL 10 worker)
        labels:
          node: 'homelab'
          role: 'compute'
          os: 'rhel10'
    
    # IPMI Exporter - Enterprise server (homelab RHEL 10 node)
    - job_name: 'ipmi-exporter'
      static_configs:
      - targets:
        - '192.168.4.62:9290'  # IPMI exporter on homelab node
        labels:
          node: 'homelab'
          role: 'compute'
          os: 'rhel10'
          hardware: 'enterprise-server'
      metrics_path: /metrics
      scrape_interval: 30s
      scrape_timeout: 20s
    
    # Kube State Metrics - Kubernetes object state
    - job_name: 'kube-state-metrics'
      kubernetes_sd_configs:
      - role: service
        namespaces:
          names:
          - monitoring
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: kube-state-metrics
      - source_labels: [__meta_kubernetes_service_port_name]
        action: keep
        regex: http-metrics
    
    # Prometheus self-monitoring
    - job_name: 'prometheus'
      static_configs:
      - targets:
        - 'localhost:9090'
    
    # Service endpoints
    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
    
    # RKE2 Federation - Federate metrics from RHEL 10 homelab RKE2 cluster
    - job_name: 'rke2-federation'
      honor_labels: true
      metrics_path: /federate
      params:
        'match[]':
        - '{job=~".+"}'
      static_configs:
      - targets:
        - '192.168.4.62:30090'
        labels:
          cluster: 'rke2-homelab'
          federated: 'true'
---
# Prometheus Alerting Rules
apiVersion: v1
kind: ConfigMap
---
  prometheus.yml: |
    global:
      scrape_interval: 15s
      scrape_timeout: 10s
      evaluation_interval: 15s
      external_labels:
        cluster: 'vmstation-homelab'
        environment: 'homelab'
      
    # Alerting configuration
    alerting:
      alertmanagers:
      - static_configs:
        - targets: []
    
    # Load alerting rules
    rule_files:
    - /etc/prometheus/rules/*.yml
    
    scrape_configs:
    # Kubernetes API server metrics
    - job_name: 'kubernetes-apiservers'
      kubernetes_sd_configs:
      - role: endpoints
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https
        
    # Kubernetes node kubelet metrics
    - job_name: 'kubernetes-nodes'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics
        
    # Container metrics via cAdvisor
    - job_name: 'kubernetes-cadvisor'
      kubernetes_sd_configs:
      - role: node
      scheme: https
      metrics_path: /metrics/cadvisor
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor
    
    # Node Exporter - All nodes
    - job_name: 'node-exporter'
      static_configs:
      - targets:
        - '192.168.4.63:9100'  # masternode (Debian control-plane)
        labels:
          node: 'masternode'
          role: 'control-plane'
          os: 'debian'
      - targets:
        - '192.168.4.61:9100'  # storagenodet3500 (Debian worker)
        labels:
          node: 'storagenodet3500'
          role: 'storage'
          os: 'debian'
      - targets:
        - '192.168.4.62:9100'  # homelab (RHEL 10 worker)
        labels:
          node: 'homelab'
          role: 'compute'
          os: 'rhel10'
    
    # IPMI Exporter - Enterprise server (homelab RHEL 10 node)
    - job_name: 'ipmi-exporter'
      static_configs:
      - targets:
        - '192.168.4.62:9290'  # IPMI exporter on homelab node
        labels:
          node: 'homelab'
          role: 'compute'
          os: 'rhel10'
          hardware: 'enterprise-server'
      metrics_path: /metrics
      scrape_interval: 30s
      scrape_timeout: 20s
    
    # Kube State Metrics - Kubernetes object state
    - job_name: 'kube-state-metrics'
      kubernetes_sd_configs:
      - role: service
        namespaces:
          names:
          - monitoring
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_name]
        action: keep
        regex: kube-state-metrics
      - source_labels: [__meta_kubernetes_service_port_name]
        action: keep
        regex: http-metrics
    
    # Prometheus self-monitoring
    - job_name: 'prometheus'
      static_configs:
      - targets:
        - 'localhost:9090'
    
    # Service endpoints
    - job_name: 'kubernetes-service-endpoints'
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        target_label: __address__
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name
    
    # RKE2 Federation - Federate metrics from RHEL 10 homelab RKE2 cluster
    - job_name: 'rke2-federation'
      honor_labels: true
      metrics_path: /federate
      params:
        'match[]':
        - '{job=~".+"}'
      static_configs:
      - targets:
        - '192.168.4.62:30090'
        labels:
          cluster: 'rke2-homelab'
          federated: 'true'
---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/name: prometheus
    vmstation.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        app.kubernetes.io/name: prometheus
    spec:
      serviceAccountName: prometheus
      nodeSelector:
        node-role.kubernetes.io/control-plane: ""
      tolerations:
      - key: node-role.kubernetes.io/control-plane
        operator: Exists
        effect: NoSchedule
      containers:
      - name: prometheus
        image: prom/prometheus:v2.45.0
        ports:
        - containerPort: 9090
          name: web
        args:
        - '--config.file=/etc/prometheus/prometheus.yml'
        - '--storage.tsdb.path=/prometheus'
        - '--web.console.libraries=/etc/prometheus/console_libraries'
        - '--web.console.templates=/etc/prometheus/consoles'
        - '--storage.tsdb.retention.time=30d'
        - '--web.enable-lifecycle'
        # Enable remote write receiver for federation
        - '--web.enable-remote-write-receiver'
        # Expose all metrics endpoints without authentication
        - '--web.route-prefix=/'
        # Enable CORS for external access
        - '--web.cors.origin=.*'
        # Enable admin API for enterprise operations
        - '--web.enable-admin-api'
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        - name: prometheus-storage
          mountPath: /prometheus
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-storage
        emptyDir: {}
---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  type: NodePort
  ports:
  - port: 9090
    targetPort: 9090
    nodePort: 30090
    name: web
  selector:
    app: prometheus