---
# Subsite wip_05: Extra Apps (work-in-progress)
# This playbook is marked WIP. It prefers Helm where reasonable (kubernetes-dashboard, mongodb via Bitnami)
# and uses hostPath-backed Deployments for apps that must run on a specific host (/mnt/storage).
- hosts: localhost
  gather_facts: false
  connection: local
  vars:
    # WIP - default credential placeholders (edit in your ansible-vault later)
    drone_db_user: "drone_user"
    drone_db_password: "drone_pass"
    mongodb_root_password: "mongo_root_pass"

    # Node scheduling and ports
    dashboard_node: "masternode"
    apps_node: "homelab"
    dashboard_nodeport: 32000
    drone_nodeport: 32001
    mongodb_nodeport: 32002
    storage_hostpath: "/mnt/storage"

  tasks:
    - name: Check kubectl availability
      ansible.builtin.command:
        cmd: kubectl version --client
      register: kubectl_check
      failed_when: false
      changed_when: false

    - name: Fail if kubectl not available
      ansible.builtin.fail:
        msg: "kubectl required. Install/configure kubeconfig before running this playbook."
      when: kubectl_check.rc != 0

    - name: Check if Helm is available
      ansible.builtin.command:
        cmd: helm version --short
      register: helm_check
      failed_when: false
      changed_when: false

    - name: Create namespaces if missing (dashboard/drone/mongodb)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: "{{ item }}"
      loop:
        - kubernetes-dashboard
        - drone
        - mongodb
      check_mode: no

    ##################################################################
    # Kubernetes Dashboard (prefer Helm)
    - name: Check for kubernetes-dashboard Deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: kubernetes-dashboard
        name: kubernetes-dashboard
      register: dashboard_dep
      failed_when: false
      changed_when: false

    - name: Check for kubernetes-dashboard Service
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: kubernetes-dashboard
        name: kubernetes-dashboard
      register: dashboard_svc
      failed_when: false
      changed_when: false

    - name: Ensure helm repos for dashboard available (WIP)
      ansible.builtin.command:
        cmd: |
          helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/ || true
          helm repo update
      when: helm_check.rc == 0
      changed_when: false
      failed_when: false

    - name: Install kubernetes-dashboard via Helm if missing
      ansible.builtin.command:
        cmd: >-
          helm -n kubernetes-dashboard upgrade --install kubernetes-dashboard kubernetes-dashboard/kubernetes-dashboard
          --create-namespace
          --set service.type=NodePort
          --set service.nodePort={{ dashboard_nodeport }}
          --set nodeSelector."kubernetes.io/hostname"={{ dashboard_node }}
      when:
        - (dashboard_dep.resources | length == 0) and (helm_check.rc == 0)
      register: helm_dashboard_install
      failed_when: false
      changed_when: helm_dashboard_install.rc == 0

    - name: Create kubernetes-dashboard Deployment manually if Helm not used
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: kubernetes-dashboard
            namespace: kubernetes-dashboard
            labels:
              app: kubernetes-dashboard
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: kubernetes-dashboard
            template:
              metadata:
                labels:
                  app: kubernetes-dashboard
              spec:
                nodeName: "{{ dashboard_node }}"
                containers:
                  - name: kubernetes-dashboard
                    image: kubernetesui/dashboard:v2.8.0
                    ports:
                      - containerPort: 8443
                    args:
                      - --auto-generate-certificates
                    securityContext:
                      runAsUser: 1000
                      runAsNonRoot: true
      when: (dashboard_dep.resources | length == 0) and (helm_check.rc != 0)
      register: create_dashboard_dep
      failed_when: false

    - name: Ensure kubernetes-dashboard Service (NodePort) if missing
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: kubernetes-dashboard
            namespace: kubernetes-dashboard
          spec:
            type: NodePort
            selector:
              app: kubernetes-dashboard
            ports:
              - protocol: TCP
                port: 443
                targetPort: 8443
                nodePort: "{{ dashboard_nodeport }}"
      when: dashboard_svc.resources | length == 0
      register: create_dashboard_svc
      failed_when: false

    ##################################################################
    # Drone (must run on apps_node and use hostPath /mnt/storage/drone)
    - name: Check for drone Deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: drone
        name: drone
      register: drone_dep
      failed_when: false
      changed_when: false

    - name: Check for drone Service
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: drone
        name: drone
      register: drone_svc
      failed_when: false
      changed_when: false

    - name: Create drone Deployment (hostPath-backed) if missing
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: drone
            namespace: drone
            labels:
              app: drone
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: drone
            template:
              metadata:
                labels:
                  app: drone
              spec:
                nodeName: "{{ apps_node }}"
                containers:
                  - name: drone
                    image: drone/drone:2
                    ports:
                      - containerPort: 80
                    env:
                      - name: DRONE_DATABASE_DRIVER
                        value: "sqlite3"
                      - name: DRONE_DATABASE_DATASOURCE
                        value: "/data/drone.sqlite"
                    volumeMounts:
                      - name: drone-data
                        mountPath: /data
                volumes:
                  - name: drone-data
                    hostPath:
                      path: "{{ storage_hostpath }}/drone"
                      type: DirectoryOrCreate
      when: drone_dep.resources | length == 0
      register: create_drone_dep
      failed_when: false

    - name: Create drone Service (NodePort) if missing
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: drone
            namespace: drone
          spec:
            type: NodePort
            selector:
              app: drone
            ports:
              - protocol: TCP
                port: 80
                targetPort: 80
                nodePort: "{{ drone_nodeport }}"
      when: drone_svc.resources | length == 0
      register: create_drone_svc
      failed_when: false

    ##################################################################
    # MongoDB (prefer Helm + hostPath-backed PV/PVC)
    - name: Check for mongodb Deployment
      kubernetes.core.k8s_info:
        api_version: apps/v1
        kind: Deployment
        namespace: mongodb
        name: mongodb
      register: mongodb_dep
      failed_when: false
      changed_when: false

    - name: Check for mongodb Service
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        namespace: mongodb
        name: mongodb
      register: mongodb_svc
      failed_when: false
      changed_when: false

    - name: Create hostPath PV for mongodb (WIP)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolume
          metadata:
            name: pv-mongodb-wip
          spec:
            capacity:
              storage: 10Gi
            accessModes:
              - ReadWriteOnce
            hostPath:
              path: "{{ storage_hostpath }}/mongodb"
              type: DirectoryOrCreate
            persistentVolumeReclaimPolicy: Retain
      when: mongodb_dep.resources | length == 0
      failed_when: false

    - name: Create PVC for mongodb bound to hostPath PV (WIP)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: pvc-mongodb-wip
            namespace: mongodb
          spec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
            volumeName: pv-mongodb-wip
      when: mongodb_dep.resources | length == 0
      failed_when: false

    - name: Ensure Helm repo for Bitnami is present (for MongoDB)
      ansible.builtin.command:
        cmd: |
          helm repo add bitnami https://charts.bitnami.com/bitnami || true
          helm repo update
      when: helm_check.rc == 0
      failed_when: false
      changed_when: false

    - name: Install MongoDB via Helm using existing PVC if available (WIP)
      ansible.builtin.command:
        cmd: >-
          helm -n mongodb upgrade --install mongodb bitnami/mongodb
          --create-namespace
          --set architecture=standalone
          --set auth.rootPassword={{ mongodb_root_password }}
          --set primary.persistence.existingClaim=pvc-mongodb-wip
          --set service.type=NodePort
          --set service.nodePort={{ mongodb_nodeport }}
          --set nodeSelector."kubernetes.io/hostname"={{ apps_node }}
      when:
        - (mongodb_dep.resources | length == 0) and (helm_check.rc == 0)
      register: helm_mongodb_install
      failed_when: false
      changed_when: helm_mongodb_install.rc == 0

    - name: Create fallback mongodb Deployment (hostPath) if Helm not used or failed
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: mongodb
            namespace: mongodb
            labels:
              app: mongodb
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: mongodb
            template:
              metadata:
                labels:
                  app: mongodb
              spec:
                nodeName: "{{ apps_node }}"
                containers:
                  - name: mongodb
                    image: mongo:5
                    ports:
                      - containerPort: 27017
                    env:
                      - name: MONGO_INITDB_ROOT_USERNAME
                        value: root
                      - name: MONGO_INITDB_ROOT_PASSWORD
                        value: "{{ mongodb_root_password }}"
                    volumeMounts:
                      - name: mongo-data
                        mountPath: /data/db
                volumes:
                  - name: mongo-data
                    hostPath:
                      path: "{{ storage_hostpath }}/mongodb"
                      type: DirectoryOrCreate
      when: (mongodb_dep.resources | length == 0) and (helm_check.rc != 0 or helm_mongodb_install is failed)
      register: create_mongodb_dep
      failed_when: false

    - name: Create mongodb Service (NodePort) if missing
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: mongodb
            namespace: mongodb
          spec:
            type: NodePort
            selector:
              app: mongodb
            ports:
              - protocol: TCP
                port: 27017
                targetPort: 27017
                nodePort: "{{ mongodb_nodeport }}"
      when: mongodb_svc.resources | length == 0
      register: create_mongodb_svc
      failed_when: false

    - name: Summary of actions (WIP)
      ansible.builtin.debug:
        msg: |
          wip_05-extra_apps summary:
            kubernetes-dashboard present: {{ dashboard_dep.resources | length > 0 }}
            drone present: {{ drone_dep.resources | length > 0 }}
            mongodb present: {{ mongodb_dep.resources | length > 0 }}

          Notes:
            - This playbook is work-in-progress. It prefers Helm where reasonable but
              falls back to hostPath-backed Deployments for apps that must live on
              specific hosts (/mnt/storage).
            - Default credentials are placeholders in vars at the top; move them to your
              ansible-vault and override as needed.
