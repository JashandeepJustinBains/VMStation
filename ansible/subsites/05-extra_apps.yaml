---
# Subsite 05: Extra Apps Orchestrator - Kubernetes Dashboard, Drone CI, MongoDB
# This playbook orchestrates the deployment of additional applications to the Kubernetes cluster
# by importing individual, modular app playbooks for better maintainability and flexibility.
#
# Individual app playbooks can be run independently:
# - ansible-playbook -i inventory.txt ansible/subsites/06-kubernetes-dashboard.yaml
# - ansible-playbook -i inventory.txt ansible/subsites/07-drone-ci.yaml  
# - ansible-playbook -i inventory.txt ansible/subsites/08-mongodb.yaml
#
# Or run this orchestrator to deploy all apps together:
# - ansible-playbook -i inventory.txt ansible/subsites/05-extra_apps.yaml

# === Kubernetes Dashboard Deployment ===
- import_playbook: 06-kubernetes-dashboard.yaml

# === API Rate Limiting Prevention ===
- name: "Prevent API Rate Limiting Between Apps"
  hosts: monitoring_nods
  gather_facts: false
  connection: local
  tasks:
    - name: Add delay between app deployments
      ansible.builtin.pause:
        seconds: 3
        prompt: "Pausing to prevent Kubernetes API rate limiting between app deployments..."

# === Drone CI Deployment ===  
- import_playbook: 07-drone-ci.yaml

# === API Rate Limiting Prevention ===
- name: "Prevent API Rate Limiting Between Apps"
  hosts: compute_nodes
  gather_facts: false
  connection: local
  tasks:
    - name: Add delay between app deployments
      ansible.builtin.pause:
        seconds: 3
        prompt: "Pausing to prevent Kubernetes API rate limiting between app deployments..."

# === MongoDB Deployment ===
- import_playbook: 08-mongodb.yaml

# === Summary and Validation ===
- name: "Extra Apps Orchestrator Summary"
  hosts: compute_nodes
  gather_facts: false
  connection: local
  vars:
    # === Node Scheduling Configuration ===
    dashboard_node: masternode
    apps_node: homelab
    
    # === NodePort Configuration ===
    dashboard_nodeport: 32000
    drone_nodeport: 32001
    mongodb_nodeport: 32002
    
    # === Storage Configuration ===
    storage_hostpath: /mnt/storage

  tasks:
    - name: Summarize modular deployment results
      ansible.builtin.debug:
        msg: |
          === Extra Apps Modular Deployment Summary ===
          
          This orchestrator ran the following individual app playbooks:
          1. 06-kubernetes-dashboard.yaml - Kubernetes Dashboard
          2. 07-drone-ci.yaml - Drone CI
          3. 08-mongodb.yaml - MongoDB
          
          App Access URLs:
          - Kubernetes Dashboard: https://{{ dashboard_node }}:{{ dashboard_nodeport }}
          - Drone CI: http://{{ apps_node }}:{{ drone_nodeport }}
          - MongoDB: {{ apps_node }}:{{ mongodb_nodeport }}
          
          === Individual App Management ===
          
          To deploy individual apps:
          ansible-playbook -i inventory.txt ansible/subsites/06-kubernetes-dashboard.yaml
          ansible-playbook -i inventory.txt ansible/subsites/07-drone-ci.yaml
          ansible-playbook -i inventory.txt ansible/subsites/08-mongodb.yaml
          
          To check individual app status:
          ansible-playbook -i inventory.txt ansible/subsites/06-kubernetes-dashboard.yaml --check
          ansible-playbook -i inventory.txt ansible/subsites/07-drone-ci.yaml --check
          ansible-playbook -i inventory.txt ansible/subsites/08-mongodb.yaml --check
          
          To deploy all apps together (current orchestrator):
          ansible-playbook -i inventory.txt ansible/subsites/05-extra_apps.yaml
          
          === Validation Commands ===
          
          Verify All Deployments:
          kubectl get pods -n kubernetes-dashboard
          kubectl get pods -n drone  
          kubectl get pods -n mongodb
          
          Verify All Services:
          kubectl get svc -n kubernetes-dashboard
          kubectl get svc -n drone
          kubectl get svc -n mongodb
          
          Run Validation Script:
          ./scripts/validate_app_deployment.sh
          
          === Benefits of Modular Architecture ===
          
          1. Individual app deployment - Deploy only what you need
          2. Better troubleshooting - Debug individual apps in isolation  
          3. Easier maintenance - Update individual apps without affecting others
          4. Flexible deployment - Skip apps using environment variables (e.g., SKIP_DRONE=true)
          5. Easier expansion - Add new apps by creating new numbered playbooks
          
          === Adding New Apps ===
          
          To add a new app (e.g., Redis):
          1. Create ansible/subsites/09-redis.yaml based on existing app structure
          2. Add "- import_playbook: 09-redis.yaml" to this orchestrator
          3. Update this summary section with the new app details
          4. Test the new app independently before adding to orchestrator
          
          === Security Notes ===
          
          Individual apps use default credentials for demonstration.
          For production deployments:
          1. Use Kubernetes Secrets for database credentials
          2. Configure proper RBAC for dashboard access
          3. Set up proper authentication for Drone CI
          4. Use TLS certificates for secure communication
          
          See ansible/group_vars/secrets.yml.example for vault-encrypted credentials.