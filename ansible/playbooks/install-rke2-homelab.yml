---
# ansible/playbooks/install-rke2-homelab.yml
# Install RKE2 single-node cluster on RHEL 10 homelab node

- name: Install RKE2 Kubernetes on homelab node
  hosts: homelab
  become: true
  gather_facts: true
  
  tasks:
    - name: Display target host information
      debug:
        msg: |
          Installing RKE2 on:
            Host: {{ inventory_hostname }}
            IP: {{ ansible_host }}
            OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
            User: {{ ansible_user }}
    
    - name: Import RKE2 role
      import_role:
        name: rke2

- name: Deploy monitoring components to RKE2 cluster
  hosts: homelab
  become: true
  gather_facts: false
  
  vars:
    kubeconfig: "/etc/rancher/rke2/rke2.yaml"
    kubectl: "/var/lib/rancher/rke2/bin/kubectl"
  
  tasks:
    - name: Wait for RKE2 cluster to be fully ready
      pause:
        seconds: 30
    
    - name: Deploy monitoring namespace
      shell: |
        export KUBECONFIG={{ kubeconfig }}
        {{ kubectl }} apply -f -
      args:
        stdin: "{{ lookup('file', '../roles/rke2/files/monitoring-namespace.yaml') }}"
      register: monitoring_ns_result
      changed_when: "'created' in monitoring_ns_result.stdout or 'configured' in monitoring_ns_result.stdout"
    
    - name: Display monitoring namespace result
      debug:
        var: monitoring_ns_result.stdout_lines
    
    - name: Deploy node-exporter
      shell: |
        export KUBECONFIG={{ kubeconfig }}
        {{ kubectl }} apply -f -
      args:
        stdin: "{{ lookup('file', '../roles/rke2/files/node-exporter.yaml') }}"
      register: node_exporter_result
      changed_when: "'created' in node_exporter_result.stdout or 'configured' in node_exporter_result.stdout"
    
    - name: Display node-exporter result
      debug:
        var: node_exporter_result.stdout_lines
    
    - name: Deploy Prometheus for federation
      shell: |
        export KUBECONFIG={{ kubeconfig }}
        {{ kubectl }} apply -f -
      args:
        stdin: "{{ lookup('file', '../roles/rke2/files/prometheus-federation.yaml') }}"
      register: prometheus_result
      changed_when: "'created' in prometheus_result.stdout or 'configured' in prometheus_result.stdout"
    
    - name: Display Prometheus result
      debug:
        var: prometheus_result.stdout_lines
    
    - name: Wait for monitoring pods to be ready
      shell: |
        export KUBECONFIG={{ kubeconfig }}
        {{ kubectl }} wait --for=condition=ready pod -l app=node-exporter -n monitoring-rke2 --timeout=120s
      register: node_exporter_wait
      retries: 3
      delay: 10
      until: node_exporter_wait.rc == 0
      ignore_errors: true
    
    - name: Wait for Prometheus pod to be ready
      shell: |
        export KUBECONFIG={{ kubeconfig }}
        {{ kubectl }} wait --for=condition=ready pod -l app=prometheus-rke2 -n monitoring-rke2 --timeout=120s
      register: prometheus_wait
      retries: 3
      delay: 10
      until: prometheus_wait.rc == 0
      ignore_errors: true
    
    - name: Get all monitoring pods
      shell: |
        export KUBECONFIG={{ kubeconfig }}
        {{ kubectl }} get pods -n monitoring-rke2 -o wide
      register: monitoring_pods
      changed_when: false
    
    - name: Display monitoring pods
      debug:
        msg: "{{ monitoring_pods.stdout_lines }}"
    
    - name: Test node-exporter metrics endpoint
      uri:
        url: "http://{{ ansible_host }}:9100/metrics"
        return_content: no
        status_code: 200
      register: node_exporter_test
      ignore_errors: true
      delegate_to: localhost
    
    - name: Display node-exporter test result
      debug:
        msg: "Node exporter metrics endpoint: {{ 'ACCESSIBLE' if node_exporter_test.status == 200 else 'NOT ACCESSIBLE' }}"
    
    - name: Test Prometheus endpoint
      uri:
        url: "http://{{ ansible_host }}:30090/api/v1/status/config"
        return_content: no
        status_code: 200
      register: prometheus_test
      ignore_errors: true
      delegate_to: localhost
    
    - name: Display Prometheus test result
      debug:
        msg: "Prometheus API endpoint: {{ 'ACCESSIBLE' if prometheus_test.status == 200 else 'NOT ACCESSIBLE' }}"
    
    - name: Test Prometheus federation endpoint
      uri:
        url: "http://{{ ansible_host }}:30090/federate?match[]={job=~\".+\"}"
        return_content: yes
        status_code: 200
      register: federation_test
      ignore_errors: true
      delegate_to: localhost
    
    - name: Display federation endpoint test result
      debug:
        msg: |
          Federation endpoint: {{ 'ACCESSIBLE' if federation_test.status == 200 else 'NOT ACCESSIBLE' }}
          Sample metrics returned: {{ federation_test.content.split('\n')[:5] | default(['No metrics']) }}
      when: federation_test.status == 200

- name: Display installation summary
  hosts: localhost
  gather_facts: false
  
  tasks:
    - name: Display summary
      debug:
        msg: |
          ╔════════════════════════════════════════════════════════════════╗
          ║         RKE2 Installation Complete on Homelab Node            ║
          ╚════════════════════════════════════════════════════════════════╝
          
          ✓ RKE2 server installed and running
          ✓ Single-node Kubernetes cluster operational
          ✓ Monitoring components deployed
          
          📋 Cluster Information:
            - Node: homelab (192.168.4.62)
            - Kubernetes Version: v1.29.x (RKE2)
            - CNI: Canal (Flannel + Calico)
            - Cluster CIDR: 10.42.0.0/16
            - Service CIDR: 10.43.0.0/16
          
          📁 Artifacts:
            - Kubeconfig: /srv/monitoring_data/VMStation/ansible/artifacts/homelab-rke2-kubeconfig.yaml
            - Installation log: /srv/monitoring_data/VMStation/ansible/artifacts/install-rke2-homelab.log
          
          🔍 Verification Commands:
            export KUBECONFIG=/srv/monitoring_data/VMStation/ansible/artifacts/homelab-rke2-kubeconfig.yaml
            kubectl get nodes
            kubectl get pods -A
            kubectl get pods -n monitoring-rke2
          
          📊 Monitoring Endpoints:
            - Node Exporter: http://192.168.4.62:9100/metrics
            - Prometheus: http://192.168.4.62:30090
            - Federation: http://192.168.4.62:30090/federate
          
          🔗 Next Steps:
            1. Verify cluster health:
               kubectl --kubeconfig=ansible/artifacts/homelab-rke2-kubeconfig.yaml get nodes
            
            2. Configure central Prometheus federation:
               Add scrape config to central Prometheus (see docs/RKE2_PROMETHEUS_FEDERATION.md)
            
            3. Test federation from masternode:
               curl -s 'http://192.168.4.62:30090/federate?match[]={job="kubernetes-nodes"}' | head -20
          
          📚 Documentation:
            - Role README: ansible/roles/rke2/README.md
            - Deployment Guide: docs/RKE2_DEPLOYMENT_GUIDE.md
