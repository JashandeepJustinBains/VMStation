---
# ansible/playbooks/cleanup-homelab.yml
# Clean up prior Kubernetes artifacts from homelab node before RKE2 installation

- name: Cleanup prior Kubernetes installation on homelab
  hosts: homelab
  become: true
  gather_facts: true
  
  tasks:
    - name: Display cleanup warning
      debug:
        msg: |
          ⚠️  WARNING: This will remove all Kubernetes artifacts from homelab node
          
          This includes:
            - kubeadm/kubelet/kubectl binaries
            - containerd runtime
            - CNI plugins and configurations
            - iptables rules and nftables tables
            - Kubernetes systemd services
            - All Kubernetes data directories
          
          Press Ctrl+C to abort, or continue to proceed.
    
    - name: Pause for confirmation
      pause:
        prompt: "Press Enter to continue with cleanup, or Ctrl+C to abort"

    - name: Stop services and attempt to clear any mounts that may block directory removal
      block:
        - name: Stop kubelet service
          systemd:
            name: kubelet
            state: stopped
          ignore_errors: true

        - name: Stop containerd service
          systemd:
            name: containerd
            state: stopped
          ignore_errors: true

        - name: Kill containerd-shim and leftover container processes (best-effort)
          ansible.builtin.shell: |
            # Use -f to match full command line for long process names
            pkill -9 -f containerd-shim || true
            pkill -9 -f containerd-shim-runc-v2 || true
            pkill -9 -f containerd || true
            pkill -9 -f kubelet || true
          args:
            executable: /bin/bash
          ignore_errors: true

        - name: Set remote connection user fact
          ansible.builtin.set_fact:
            rem_user: "{{ ansible_user | default(ansible_env.USER | default('root')) }}"
          run_once: false

        - name: Kill any processes using /var/lib/kubelet and /run/containerd (best-effort, protect SSH)
          ansible.builtin.shell: |
            # Protect the remote SSH user's processes and sshd from accidental kill.
            REM_USER="${REM_USER}"

            # Build a list of PIDs to protect: sshd PIDs and any processes owned by the remote user
            PROTECT_PIDS=""
            if command -v pgrep >/dev/null 2>&1; then
              # sshd PIDs
              SSHD_PIDS=$(pgrep -x sshd || true)
              USER_PIDS=$(pgrep -u "$REM_USER" || true)
              PROTECT_PIDS="$SSHD_PIDS $USER_PIDS"
            fi

            kill_list() {
              local path="$1"
              if command -v fuser >/dev/null 2>&1; then
                PIDS=$(fuser -m "$path" 2>/dev/null || true)
                for p in $PIDS; do
                  # skip empty and protect pids
                  [ -z "$p" ] && continue
                  if echo "$PROTECT_PIDS" | tr ' ' '\n' | grep -xq "$p"; then
                    continue
                  fi
                  kill -9 "$p" 2>/dev/null || true
                done
              fi
            }

            kill_list /var/lib/kubelet || true
            kill_list /run/containerd || true
          args:
            executable: /bin/bash
            env:
              REM_USER: "{{ rem_user }}"
          ignore_errors: true

        - name: Lazy-unmount mounts under /var/lib/kubelet and /run/containerd (best-effort)
          ansible.builtin.shell: |
            # Find mount targets for the directories and unmount in reverse order
            if command -v findmnt >/dev/null 2>&1; then
              findmnt -rno TARGET -T /var/lib/kubelet | sort -r | xargs -r -n1 umount -l || true
              findmnt -rno TARGET -T /run/containerd   | sort -r | xargs -r -n1 umount -l || true
            else
              # Fallback: attempt to lazy unmount common subpaths
              umount -l /var/lib/kubelet/pods/* || true
              umount -l /run/containerd/io.containerd.grpc.v1.cri/sandboxes/* || true
            fi
          args:
            executable: /bin/bash
          ignore_errors: true

    
    - name: Stop kubelet service
      systemd:
        name: kubelet
        state: stopped
      ignore_errors: true
    
    - name: Stop containerd service
      systemd:
        name: containerd
        state: stopped
      ignore_errors: true
    
    - name: Disable kubelet service
      systemd:
        name: kubelet
        enabled: no
      ignore_errors: true
    
    - name: Disable containerd service
      systemd:
        name: containerd
        enabled: no
      ignore_errors: true
    
    - name: Remove Kubernetes binaries
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /usr/local/bin/kubeadm
        - /usr/local/bin/kubelet
        - /usr/local/bin/kubectl
        - /usr/bin/kubeadm
        - /usr/bin/kubelet
        - /usr/bin/kubectl
        - /usr/local/bin/containerd
        - /usr/local/bin/containerd-shim
        - /usr/local/bin/containerd-shim-runc-v2
        - /usr/local/bin/ctr
        - /usr/local/bin/runc
        - /usr/bin/containerd
        - /usr/bin/ctr
        - /usr/bin/runc
    
    - name: Remove CNI directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /opt/cni/bin
        - /etc/cni
    
    - name: Remove Kubernetes configuration and data directories
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/kubernetes
        - /var/lib/kubelet
        - /var/lib/etcd
        - /var/lib/containerd
        - /run/containerd
        - /run/flannel
        - /var/run/kubernetes
    
    - name: Remove systemd service files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/systemd/system/kubelet.service
        - /etc/systemd/system/kubelet.service.d
        - /etc/systemd/system/containerd.service
        - /usr/lib/systemd/system/kubelet.service
        - /usr/lib/systemd/system/containerd.service
    
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
    
    - name: Flush iptables KUBE chains
      shell: |
        for table in nat filter mangle; do
          for chain in $(iptables -t $table -L -n | grep "^Chain KUBE-" | awk '{print $2}'); do
            iptables -t $table -F $chain 2>/dev/null || true
          done
        done
      changed_when: false
      ignore_errors: true
    
    - name: Delete iptables KUBE chains
      shell: |
        for table in nat filter mangle; do
          for chain in $(iptables -t $table -L -n | grep "^Chain KUBE-" | awk '{print $2}'); do
            iptables -t $table -X $chain 2>/dev/null || true
          done
        done
      changed_when: false
      ignore_errors: true
    
    - name: Clean FLANNEL iptables chains
      shell: |
        for table in nat filter; do
          for chain in $(iptables -t $table -L -n | grep "^Chain FLANNEL" | awk '{print $2}'); do
            iptables -t $table -F $chain 2>/dev/null || true
            iptables -t $table -X $chain 2>/dev/null || true
          done
        done
      changed_when: false
      ignore_errors: true
    
    - name: Remove flannel nftables tables (RHEL 10)
      shell: |
        nft delete table inet flannel-ipv4 2>/dev/null || true
        nft delete table inet flannel-ipv6 2>/dev/null || true
      changed_when: false
      ignore_errors: true
      when: ansible_distribution_major_version | int >= 10
    
    - name: Unload kernel modules
      modprobe:
        name: "{{ item }}"
        state: absent
      loop:
        - br_netfilter
        - overlay
        - vxlan
      ignore_errors: true
    
    - name: Remove NetworkManager CNI exclusion config
      file:
        path: /etc/NetworkManager/conf.d/99-kubernetes.conf
        state: absent
    
    - name: Restart NetworkManager
      systemd:
        name: NetworkManager
        state: restarted
      when: ansible_os_family == "RedHat"
    
    - name: Check for remaining Kubernetes processes
      shell: ps aux | grep -E "kube|containerd|flannel" | grep -v grep || true
      register: remaining_processes
      changed_when: false
    
    - name: Display remaining processes
      debug:
        msg: "{{ remaining_processes.stdout_lines if remaining_processes.stdout_lines | length > 0 else 'No Kubernetes processes found' }}"
    
    - name: Display cleanup summary
      debug:
        msg: |
          ✓ Cleanup Complete!
          
          Summary:
            ✓ Kubernetes services stopped and disabled
            ✓ Kubernetes binaries removed
            ✓ CNI plugins and configurations removed
            ✓ Kubernetes data directories removed
            ✓ iptables/nftables rules cleaned
            ✓ Kernel modules unloaded
            ✓ NetworkManager configuration cleaned
          
          Next Steps:
            1. Optional: Reboot the system for a clean state
               ansible homelab -i ansible/inventory/hosts.yml -m reboot -b
            
            2. Install RKE2:
               ansible-playbook -i ansible/inventory/hosts.yml ansible/playbooks/install-rke2-homelab.yml
