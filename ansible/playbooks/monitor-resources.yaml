---
# =============================================================================
# VMStation Resource Monitoring and Auto-Sleep Management
# Monitors cluster utilization and triggers sleep mode for cost optimization
# =============================================================================

# This playbook should be run hourly via cron on the masternode
# Example crontab entry:
# 0 * * * * cd /root/VMStation && ansible-playbook -i ansible/inventory/hosts ansible/playbooks/monitor-resources.yaml

- name: Monitor cluster resource utilization
  hosts: monitoring_nodes
  become: true
  gather_facts: true
  vars:
    idle_threshold_minutes: 120  # Sleep if idle for 2+ hours
    jellyfin_check_enabled: true
    prometheus_check_enabled: true
  
  tasks:
    # -------------------------------------------------------------------------
    # Check 1: Jellyfin Active Sessions
    # -------------------------------------------------------------------------
    - name: Check Jellyfin active sessions
      ansible.builtin.shell: |
        # Query Jellyfin API for active sessions
        # Replace with actual Jellyfin API endpoint when available
        active_sessions=0
        
        # For now, check if Jellyfin pods are using significant CPU
        if kubectl --kubeconfig=/etc/kubernetes/admin.conf \
          top pods -n default -l app=jellyfin --no-headers 2>/dev/null | \
          awk '{if ($2 > 100) count++} END {print count+0}' | grep -q '^[1-9]'; then
          active_sessions=1
        fi
        
        echo "$active_sessions"
      args:
        executable: /bin/bash
      register: jellyfin_sessions
      when: jellyfin_check_enabled
      changed_when: false
      failed_when: false

    - name: Set Jellyfin activity fact
      ansible.builtin.set_fact:
        jellyfin_active: "{{ (jellyfin_sessions.stdout | default('0') | int) > 0 }}"
      when: jellyfin_check_enabled

    # -------------------------------------------------------------------------
    # Check 2: Cluster CPU/Memory Utilization
    # -------------------------------------------------------------------------
    - name: Check cluster resource utilization
      ansible.builtin.shell: |
        # Get average CPU usage across all nodes (excluding masternode)
        total_cpu=0
        count=0
        
        for node in $(kubectl --kubeconfig=/etc/kubernetes/admin.conf get nodes -o name | cut -d/ -f2); do
          if [ "$node" != "$(hostname)" ]; then
            cpu=$(kubectl --kubeconfig=/etc/kubernetes/admin.conf \
              top node $node --no-headers 2>/dev/null | awk '{print $3}' | sed 's/%//')
            if [ -n "$cpu" ]; then
              total_cpu=$((total_cpu + cpu))
              count=$((count + 1))
            fi
          fi
        done
        
        if [ $count -gt 0 ]; then
          avg_cpu=$((total_cpu / count))
        else
          avg_cpu=0
        fi
        
        echo "$avg_cpu"
      args:
        executable: /bin/bash
      register: cluster_cpu
      changed_when: false
      failed_when: false

    - name: Set cluster utilization fact
      ansible.builtin.set_fact:
        cluster_high_utilization: "{{ (cluster_cpu.stdout | default('0') | int) > 20 }}"

    # -------------------------------------------------------------------------
    # Check 3: Recent User Activity (SSH, kubectl, etc.)
    # -------------------------------------------------------------------------
    - name: Check for recent user activity
      ansible.builtin.shell: |
        # Check last command timestamp (within last 2 hours)
        if [ -f /root/.bash_history ]; then
          last_cmd=$(stat -c %Y /root/.bash_history)
          current=$(date +%s)
          diff=$((current - last_cmd))
          idle_seconds=$((diff))
        else
          idle_seconds=999999
        fi
        
        idle_minutes=$((idle_seconds / 60))
        echo "$idle_minutes"
      args:
        executable: /bin/bash
      register: user_idle_time
      changed_when: false

    - name: Set user activity fact
      ansible.builtin.set_fact:
        user_recently_active: "{{ (user_idle_time.stdout | default('999') | int) < idle_threshold_minutes }}"

    # -------------------------------------------------------------------------
    # Check 4: Running Jobs/CronJobs
    # -------------------------------------------------------------------------
    - name: Check for active Kubernetes jobs
      ansible.builtin.shell: |
        active_jobs=$(kubectl --kubeconfig=/etc/kubernetes/admin.conf \
          get jobs -A --field-selector status.active=1 --no-headers 2>/dev/null | wc -l)
        echo "$active_jobs"
      args:
        executable: /bin/bash
      register: active_jobs
      changed_when: false
      failed_when: false

    - name: Set jobs activity fact
      ansible.builtin.set_fact:
        jobs_running: "{{ (active_jobs.stdout | default('0') | int) > 0 }}"

    # -------------------------------------------------------------------------
    # Decision Logic: Should we sleep?
    # -------------------------------------------------------------------------
    - name: Determine if cluster should sleep
      ansible.builtin.set_fact:
        should_sleep: >-
          {{
            not (jellyfin_active | default(false)) and
            not (cluster_high_utilization | default(false)) and
            not (user_recently_active | default(false)) and
            not (jobs_running | default(false))
          }}

    - name: Display resource monitoring summary
      ansible.builtin.debug:
        msg: |
          === Resource Monitoring Summary ===
          Jellyfin Active: {{ jellyfin_active | default('N/A') }}
          Cluster CPU Utilization: {{ cluster_cpu.stdout | default('N/A') }}%
          User Idle Time: {{ user_idle_time.stdout | default('N/A') }} minutes
          Active Jobs: {{ active_jobs.stdout | default('N/A') }}
          
          Decision: {{ 'SLEEP MODE' if should_sleep else 'STAY ACTIVE' }}

    # -------------------------------------------------------------------------
    # Action: Trigger Sleep Mode (if appropriate)
    # -------------------------------------------------------------------------
    - name: Trigger cluster sleep mode
      ansible.builtin.shell: |
        echo "Cluster is idle - triggering sleep mode"
        /root/VMStation/ansible/playbooks/trigger-sleep.sh
      args:
        executable: /bin/bash
      when: should_sleep
      register: sleep_trigger

    - name: Log sleep action
      ansible.builtin.shell: |
        echo "$(date): Cluster entered sleep mode due to inactivity" >> /var/log/vmstation-autosleep.log
      args:
        executable: /bin/bash
      when: should_sleep

    - name: Skip sleep notification
      ansible.builtin.debug:
        msg: "Cluster is active - skipping sleep mode"
      when: not should_sleep
