---
# Emergency fix playbook for RHEL 10 node (homelab) CrashLoopBackOff issues
# This applies the network-fix role and forces pod recreation
- name: Fix RHEL 10 network configuration and restart pods
  hosts: homelab
  become: yes
  gather_facts: yes
  
  tasks:
    - name: Display node information
      ansible.builtin.debug:
        msg: "Applying network fixes to {{ inventory_hostname }} ({{ ansible_distribution }} {{ ansible_distribution_version }})"

    - name: Apply network-fix role
      ansible.builtin.import_role:
        name: network-fix

    - name: Force restart kubelet after network configuration
      ansible.builtin.service:
        name: kubelet
        state: restarted
      when: ansible_os_family == 'RedHat'

- name: Apply updated Flannel manifest and force pod recreation
  hosts: masternode
  become: yes
  gather_facts: no
  
  tasks:
    - name: Apply updated Flannel manifest
      ansible.builtin.command: kubectl apply -f /root/VMStation/manifests/cni/flannel.yaml
      register: flannel_apply
      changed_when: "'configured' in flannel_apply.stdout or 'created' in flannel_apply.stdout"

    - name: Wait for DaemonSet to be updated
      ansible.builtin.command: kubectl rollout status daemonset/kube-flannel-ds -n kube-flannel --timeout=60s
      register: flannel_rollout
      failed_when: false
      changed_when: false

    - name: Force delete Flannel pod on homelab to trigger fresh start
      ansible.builtin.command: >
        kubectl delete pod -n kube-flannel
        -l app=flannel
        --field-selector spec.nodeName=homelab
        --grace-period=0 --force
      register: flannel_delete
      changed_when: "'deleted' in flannel_delete.stdout"
      failed_when: false

    - name: Wait for new Flannel pod to be created
      ansible.builtin.command: >
        kubectl wait --for=condition=Ready pod
        -n kube-flannel
        -l app=flannel
        --field-selector spec.nodeName=homelab
        --timeout=120s
      register: flannel_wait
      retries: 3
      delay: 10
      until: flannel_wait.rc == 0
      failed_when: false

    - name: Check Flannel pod status on homelab
      ansible.builtin.command: kubectl get pods -n kube-flannel -l app=flannel --field-selector spec.nodeName=homelab -o wide
      register: flannel_status
      changed_when: false

    - name: Display Flannel pod status
      ansible.builtin.debug:
        msg: "{{ flannel_status.stdout_lines }}"

    - name: Check kube-proxy pod status on homelab
      ansible.builtin.command: kubectl get pods -n kube-system -l k8s-app=kube-proxy --field-selector spec.nodeName=homelab -o wide
      register: proxy_status
      changed_when: false

    - name: Display kube-proxy pod status
      ansible.builtin.debug:
        msg: "{{ proxy_status.stdout_lines }}"

    - name: Get Flannel pod logs if not running
      ansible.builtin.shell: |
        POD=$(kubectl get pods -n kube-flannel -l app=flannel --field-selector spec.nodeName=homelab -o name | head -1)
        if [ -n "$POD" ]; then
          echo "=== Current logs ==="
          kubectl logs -n kube-flannel $POD -c kube-flannel --tail=50 || true
          echo ""
          echo "=== Previous logs (if crashed) ==="
          kubectl logs -n kube-flannel $POD -c kube-flannel --previous --tail=50 2>/dev/null || echo "No previous logs"
        fi
      register: flannel_logs
      changed_when: false
      when: "'Running' not in flannel_status.stdout"

    - name: Display Flannel logs if pod failed
      ansible.builtin.debug:
        msg: "{{ flannel_logs.stdout_lines }}"
      when: flannel_logs.stdout_lines is defined

    - name: Check for CrashLoopBackOff pods
      ansible.builtin.command: kubectl get pods -A --field-selector spec.nodeName=homelab
      register: all_pods
      changed_when: false

    - name: Display all pods on homelab
      ansible.builtin.debug:
        msg: "{{ all_pods.stdout_lines }}"

    - name: Final validation
      ansible.builtin.command: kubectl get nodes homelab -o wide
      register: node_status
      changed_when: false

    - name: Display node status
      ansible.builtin.debug:
        msg: "{{ node_status.stdout_lines }}"
