---
# =============================================================================
# VMStation Test Environment Playbook
# Validates environment configuration before deployment
# Tests mixed OS (RHEL10 + Debian) and mixed auth (root + sudo) setup
# =============================================================================

- name: Test Environment - Connectivity and Authentication
  hosts: all
  gather_facts: true
  tasks:
    - name: Test basic connectivity
      ansible.builtin.ping:
      
    - name: Display node information
      ansible.builtin.debug:
        msg: |
          Node: {{ inventory_hostname }}
          OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
          User: {{ ansible_user }}
          Become required: {{ ansible_become | default(false) }}

- name: Test Environment - Privilege Escalation (RHEL nodes)
  hosts: compute_nodes
  gather_facts: false
  tasks:
    - name: Test sudo access on RHEL node
      ansible.builtin.command: whoami
      become: true
      register: sudo_test
      
    - name: Verify sudo works correctly
      ansible.builtin.assert:
        that:
          - sudo_test.stdout == 'root'
        fail_msg: "Sudo escalation failed on {{ inventory_hostname }}"
        success_msg: "Sudo escalation works on {{ inventory_hostname }}"

- name: Test Environment - Root Access (Debian nodes)  
  hosts: monitoring_nodes:storage_nodes
  gather_facts: false
  tasks:
    - name: Test root access on Debian nodes
      ansible.builtin.command: whoami
      register: root_test
      
    - name: Verify root access
      ansible.builtin.assert:
        that:
          - root_test.stdout == 'root'
        fail_msg: "Root access failed on {{ inventory_hostname }}"
        success_msg: "Root access works on {{ inventory_hostname }}"

- name: Test Environment - Required Packages
  hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: Check for required binaries
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - /usr/bin/kubelet
        - /usr/bin/kubeadm
        - /usr/bin/kubectl
        - /usr/bin/containerd
      register: binary_check
      
    - name: Display binary check results
      ansible.builtin.debug:
        msg: |
          {% for result in binary_check.results %}
          {{ result.item }}: {{ 'present' if result.stat.exists else 'MISSING' }}
          {% endfor %}
          
    - name: Warn if binaries missing
      ansible.builtin.debug:
        msg: "WARNING: Some required binaries are missing on {{ inventory_hostname }}. Install kubeadm, kubelet, kubectl, and containerd before deployment."
      when: binary_check.results | selectattr('stat.exists', 'equalto', false) | list | length > 0

- name: Test Environment - OS-Specific Configuration
  hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: Check firewall status (RHEL)
      ansible.builtin.systemd:
        name: firewalld
      register: firewalld_status
      when: ansible_os_family == 'RedHat'
      ignore_errors: true
      
    - name: Display firewall status (RHEL)
      ansible.builtin.debug:
        msg: "Firewalld on {{ inventory_hostname }}: {{ firewalld_status.status.ActiveState | default('not installed') }}"
      when: ansible_os_family == 'RedHat'
      
    - name: Check iptables backend (RHEL 10)
      ansible.builtin.command: update-alternatives --query iptables
      register: iptables_backend
      when:
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version is version('10', '>=')
      changed_when: false
      failed_when: false
      
    - name: Display iptables backend (RHEL 10)
      ansible.builtin.debug:
        msg: |
          iptables backend on {{ inventory_hostname }}:
          {{ iptables_backend.stdout }}
      when:
        - ansible_os_family == 'RedHat'
        - ansible_distribution_major_version is version('10', '>=')
        
    - name: Check SELinux status (RHEL)
      ansible.builtin.command: getenforce
      register: selinux_status
      when: ansible_os_family == 'RedHat'
      changed_when: false
      failed_when: false
      
    - name: Display SELinux status (RHEL)
      ansible.builtin.debug:
        msg: "SELinux on {{ inventory_hostname }}: {{ selinux_status.stdout | default('unknown') }}"
      when: ansible_os_family == 'RedHat'

- name: Test Environment - Network Configuration
  hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: Check kernel modules
      ansible.builtin.shell: |
        for module in br_netfilter overlay nf_conntrack vxlan; do
          if lsmod | grep -q "^$module "; then
            echo "$module: loaded"
          else
            echo "$module: NOT LOADED"
          fi
        done
      register: module_check
      changed_when: false
      
    - name: Display kernel module status
      ansible.builtin.debug:
        var: module_check.stdout_lines
        
    - name: Check sysctl parameters
      ansible.builtin.command: sysctl net.bridge.bridge-nf-call-iptables net.bridge.bridge-nf-call-ip6tables net.ipv4.ip_forward
      register: sysctl_check
      changed_when: false
      failed_when: false
      
    - name: Display sysctl parameters
      ansible.builtin.debug:
        var: sysctl_check.stdout_lines

- name: Test Environment - Summary
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Display test summary
      ansible.builtin.debug:
        msg: |
          
          ╔════════════════════════════════════════════════════════════╗
          ║         ENVIRONMENT TEST COMPLETED                        ║
          ╚════════════════════════════════════════════════════════════╝
          
          If all tests passed:
          ✅ Connectivity verified on all nodes
          ✅ Authentication working (root on Debian, sudo on RHEL)
          ✅ OS configurations detected correctly
          
          Next steps:
          1. Install missing packages if any were reported
          2. Run deployment: ./deploy.sh
          3. Verify deployment: ansible-playbook -i ansible/inventory/hosts.yml ansible/playbooks/verify-cluster.yaml
