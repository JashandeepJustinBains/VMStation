---
# Comprehensive cluster reset playbook
# Safely resets all Kubernetes configuration and network state
# Preserves SSH keys and physical network interfaces
# Run from bastion/masternode: ansible-playbook -i ansible/inventory/hosts ansible/playbooks/reset-cluster.yaml

- name: Pre-reset validation and spin-down
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Confirm reset operation
      ansible.builtin.pause:
        prompt: |
          ⚠️  CLUSTER RESET OPERATION ⚠️
          
          This will:
          - Stop all Kubernetes workloads
          - Run kubeadm reset on all nodes
          - Remove all Kubernetes config files
          - Delete all Kubernetes network interfaces
          - Clean container runtime state
          
          This will NOT affect:
          - SSH keys and access
          - Physical ethernet interfaces
          - Container runtime binaries
          
          Type 'yes' to proceed with reset
      register: reset_confirmation
      when: skip_ansible_confirm is not defined or not skip_ansible_confirm
      
    - name: Set confirmation for automation mode
      ansible.builtin.set_fact:
        reset_confirmation:
          user_input: 'yes'
      when: skip_ansible_confirm is defined and skip_ansible_confirm
      
    - name: Abort if not confirmed
      ansible.builtin.fail:
        msg: "Reset operation cancelled by user"
      when: 
        - reset_confirmation is defined
        - reset_confirmation.user_input | lower != 'yes'
      
    - name: Generate spin targets from cluster
      ansible.builtin.shell: |
        kubectl get nodes -o jsonpath='{.items[*].metadata.name}' 2>/dev/null || true
      register: kubectl_nodes
      changed_when: false
      ignore_errors: true
      
    - name: Set spin_targets fact
      ansible.builtin.set_fact:
        spin_targets: "{{ kubectl_nodes.stdout.split() if kubectl_nodes.stdout else [] }}"
        
    - name: Display nodes to be reset
      ansible.builtin.debug:
        msg: "Nodes to reset: {{ spin_targets | join(', ') if spin_targets else 'No running cluster detected' }}"

- name: Drain and cordon nodes gracefully
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    spin_targets: "{{ hostvars['localhost']['spin_targets'] | default([]) }}"
  tasks:
    - name: Cordon nodes to prevent new pods
      ansible.builtin.shell: |
        kubectl cordon {{ item }} || true
      loop: "{{ spin_targets }}"
      when: spin_targets | length > 0
      ignore_errors: true
      
    - name: Drain nodes safely
      ansible.builtin.shell: |
        kubectl drain {{ item }} --ignore-daemonsets --delete-emptydir-data --force --timeout=120s || true
      loop: "{{ spin_targets }}"
      when: spin_targets | length > 0
      ignore_errors: true
      
    - name: Wait for pods to terminate
      ansible.builtin.pause:
        seconds: 10
      when: spin_targets | length > 0

- name: Reset all worker nodes
  hosts: storage_nodes:compute_nodes
  become: true
  serial: 1
  roles:
    - cluster-reset
    
- name: Reset control plane node
  hosts: monitoring_nodes
  become: true
  roles:
    - cluster-reset

- name: Post-reset validation
  hosts: all
  become: true
  gather_facts: true
  tasks:
    - name: Verify kubelet is stopped
      ansible.builtin.systemd:
        name: kubelet
        state: stopped
      check_mode: true
      register: kubelet_status
      ignore_errors: true
      
    - name: Verify no Kubernetes config remains
      ansible.builtin.stat:
        path: /etc/kubernetes/admin.conf
      register: k8s_config_check
      
    - name: Assert clean state
      ansible.builtin.assert:
        that:
          - not k8s_config_check.stat.exists
        fail_msg: "Kubernetes config still exists on {{ inventory_hostname }}"
        success_msg: "Clean reset verified on {{ inventory_hostname }}"
        
    - name: Verify SSH connectivity after reset
      ansible.builtin.ping:
      
    - name: Display final reset summary
      ansible.builtin.debug:
        msg: |
          ✅ Cluster reset completed successfully on {{ inventory_hostname }}
          - Kubernetes config removed
          - Network interfaces cleaned
          - SSH access preserved
          - Ready for fresh deployment

- name: Final summary
  hosts: localhost
  connection: local
  gather_facts: false
  tasks:
    - name: Display completion message
      ansible.builtin.debug:
        msg: |
          
          ╔════════════════════════════════════════════════════════════╗
          ║         CLUSTER RESET COMPLETED SUCCESSFULLY              ║
          ╚════════════════════════════════════════════════════════════╝
          
          All nodes have been reset and are ready for deployment.
          
          Next steps:
          1. Run deployment: ./deploy.sh
          2. Or manually: ansible-playbook -i ansible/inventory/hosts ansible/playbooks/deploy-cluster.yaml
          
          All nodes are now in a clean state with:
          ✅ No Kubernetes configuration
          ✅ No CNI network interfaces
          ✅ SSH access preserved
          ✅ Physical interfaces intact
