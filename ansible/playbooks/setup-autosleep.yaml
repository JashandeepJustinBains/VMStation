---
# =============================================================================
# VMStation Auto-Sleep Setup
# Configure automatic cluster sleep after inactivity
# =============================================================================

  hosts: monitoring_nodes
  gather_facts: true
  become: true
  vars:
    skip_ansible_confirm: false
    # opt-in flag: set enable_autosleep=true when you explicitly want the
    # auto-sleep monitor to be enabled on monitoring/control-plane nodes.
    enable_autosleep: false
  tasks:
    - name: "Display auto-sleep setup banner"
      debug:
        msg: |
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          Auto-Sleep Monitoring Setup
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━

    - name: "Confirm setup"
      pause:
        prompt: |
          This will configure auto-sleep monitoring.
          Cluster will sleep after 2 hours of inactivity.
          Continue? (yes/no)
      register: confirm_setup
      when: not skip_ansible_confirm

    - name: "Check confirmation"
      fail:
        msg: "Setup cancelled by user"
      when:
        - not skip_ansible_confirm
        - confirm_setup.user_input | default('no') != 'yes'

    - name: "Create auto-sleep monitor script"
      when: enable_autosleep | bool
      copy:
        dest: /usr/local/bin/vmstation-autosleep-monitor.sh
        content: |
          #!/bin/bash
          # VMStation Auto-Sleep Monitor
          # Monitors cluster activity and triggers sleep after configurable inactivity period
          # All operations are logged for audit and troubleshooting
          
          set -euo pipefail
          
          # Configuration
          INACTIVITY_THRESHOLD="${VMSTATION_INACTIVITY_THRESHOLD:-7200}"  # Default: 2 hours
          LAST_ACTIVITY_FILE="/var/lib/vmstation/last-activity"
          LOG_FILE="/var/log/vmstation-autosleep.log"
          
          # Detect kubeconfig based on cluster type
          if [[ -f "/etc/kubernetes/admin.conf" ]]; then
            KUBECONFIG="/etc/kubernetes/admin.conf"
          elif [[ -f "/etc/rancher/rke2/rke2.yaml" ]]; then
            KUBECONFIG="/etc/rancher/rke2/rke2.yaml"
          else
            KUBECONFIG="${KUBECONFIG:-/etc/kubernetes/admin.conf}"
          fi
          
          # Logging function
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
          }
          
          # Create required directories
          mkdir -p /var/lib/vmstation /var/log
          
          # Validate kubectl is available
          KUBECTL="kubectl"
          if [[ ! -x "/usr/bin/kubectl" ]] && [[ -x "/var/lib/rancher/rke2/bin/kubectl" ]]; then
            KUBECTL="/var/lib/rancher/rke2/bin/kubectl"
          fi
          
          if ! command -v $KUBECTL >/dev/null 2>&1; then
            log "ERROR: kubectl not found"
            exit 1
          fi
          
          # Validate kubeconfig exists
          if [[ ! -f "$KUBECONFIG" ]]; then
            log "INFO: kubeconfig not found at $KUBECONFIG - skipping (not a control plane node)"
            exit 0
          fi
          
          # Export kubeconfig for kubectl
          export KUBECONFIG
          
          # Check for active pods (excluding system pods)
          log "Checking cluster activity..."
          
          # Count running pods excluding system namespaces
          ACTIVE_PODS=$($KUBECTL get pods -A \
            --field-selector=status.phase=Running \
            --no-headers 2>/dev/null | \
            grep -v "kube-system\|kube-flannel\|monitoring" | \
            wc -l || echo "0")
          
          log "Active non-system pods: $ACTIVE_PODS"
          
          if [[ "$ACTIVE_PODS" -gt 0 ]]; then
            # Activity detected, update timestamp
            date +%s > "$LAST_ACTIVITY_FILE"
            log "Activity detected - updated last activity timestamp"
          else
            # No activity, check inactivity duration
            if [[ -f "$LAST_ACTIVITY_FILE" ]]; then
              LAST_ACTIVITY=$(cat "$LAST_ACTIVITY_FILE")
              CURRENT_TIME=$(date +%s)
              INACTIVE_DURATION=$((CURRENT_TIME - LAST_ACTIVITY))
              
              log "Inactive duration: ${INACTIVE_DURATION}s (threshold: ${INACTIVITY_THRESHOLD}s)"
              
              if [[ "$INACTIVE_DURATION" -gt "$INACTIVITY_THRESHOLD" ]]; then
                log "WARNING: Inactivity threshold reached, triggering cluster sleep"
                /usr/local/bin/vmstation-sleep.sh 2>&1 | tee -a "$LOG_FILE"
              else
                REMAINING=$((INACTIVITY_THRESHOLD - INACTIVE_DURATION))
                log "No activity detected. Sleep in ${REMAINING}s if no activity"
              fi
            else
              # No activity file exists, create one
              date +%s > "$LAST_ACTIVITY_FILE"
              log "Initialized activity tracking"
            fi
          fi
          
          log "Auto-sleep check completed"
        mode: '0755'

    - name: "Create cluster sleep script"
      when: enable_autosleep | bool
      copy:
        dest: /usr/local/bin/vmstation-sleep.sh
        content: |
          #!/bin/bash
          # VMStation Cluster Sleep Script
          # Gracefully cordons, drains, scales down cluster workloads, and suspends worker nodes
          # All operations are logged and idempotent
          
          set -euo pipefail
          
          LOG_FILE="/var/log/vmstation-sleep.log"
          STATE_DIR="/var/lib/vmstation"
          
          # Node configuration (from inventory)
          STORAGE_NODE_IP="192.168.4.61"
          STORAGE_NODE_MAC="b8:ac:6f:7e:6c:9d"
          STORAGE_NODE_USER="root"
          HOMELAB_NODE_IP="192.168.4.62"
          HOMELAB_NODE_MAC="d0:94:66:30:d6:63"
          HOMELAB_NODE_USER="jashandeepjustinbains"
          
          # Detect kubeconfig based on cluster type
          if [[ -f "/etc/kubernetes/admin.conf" ]]; then
            KUBECONFIG="/etc/kubernetes/admin.conf"
          elif [[ -f "/etc/rancher/rke2/rke2.yaml" ]]; then
            KUBECONFIG="/etc/rancher/rke2/rke2.yaml"
          else
            KUBECONFIG="${KUBECONFIG:-/etc/kubernetes/admin.conf}"
          fi
          
          log() {
            echo "[$(date '+%Y-%m-%d %H:%M:%S')] $*" | tee -a "$LOG_FILE"
          }
          
          # Create required directories
          mkdir -p "$STATE_DIR"
          
          # Validate kubectl is available
          KUBECTL="kubectl"
          if [[ ! -x "/usr/bin/kubectl" ]] && [[ -x "/var/lib/rancher/rke2/bin/kubectl" ]]; then
            KUBECTL="/var/lib/rancher/rke2/bin/kubectl"
          fi
          
          if ! command -v $KUBECTL >/dev/null 2>&1; then
            log "ERROR: kubectl not found"
            exit 1
          fi
          
          export KUBECONFIG
          
          log "=========================================="
          log "Initiating cluster sleep sequence"
          log "=========================================="
          
          # Get all nodes
          NODES=$($KUBECTL get nodes -o name 2>/dev/null || true)
          
          if [[ -z "$NODES" ]]; then
            log "WARNING: No nodes found or cluster not accessible"
            exit 0
          fi
          
          # Track nodes to suspend
          NODES_TO_SUSPEND=()
          
          # Cordon and drain all worker nodes (not control-plane)
          log "Step 1: Cordoning and draining worker nodes..."
          for node in $NODES; do
            NODE_NAME=$(echo "$node" | cut -d'/' -f2)
            
            # Skip control-plane nodes
            if $KUBECTL get node "$NODE_NAME" -o jsonpath='{.metadata.labels}' | grep -q "node-role.kubernetes.io/control-plane"; then
              log "Skipping control-plane node: $NODE_NAME"
              continue
            fi
            
            log "Cordoning node: $NODE_NAME"
            $KUBECTL cordon "$NODE_NAME" 2>&1 | tee -a "$LOG_FILE" || log "WARNING: Failed to cordon $NODE_NAME"
            
            log "Draining node: $NODE_NAME"
            $KUBECTL drain "$NODE_NAME" \
              --ignore-daemonsets \
              --delete-emptydir-data \
              --force \
              --timeout=5m 2>&1 | tee -a "$LOG_FILE" || log "WARNING: Failed to drain $NODE_NAME"
            
            # Add to suspend list
            NODES_TO_SUSPEND+=("$NODE_NAME")
          done
          
          # Scale down deployments in default namespace
          log "Step 2: Scaling down deployments..."
          DEPLOYMENTS=$($KUBECTL get deployments -n default -o name 2>/dev/null || true)
          
          if [[ -n "$DEPLOYMENTS" ]]; then
            for deployment in $DEPLOYMENTS; do
              log "Scaling down: $deployment"
              $KUBECTL scale "$deployment" --replicas=0 -n default 2>&1 | tee -a "$LOG_FILE" || \
                log "WARNING: Failed to scale $deployment"
            done
          else
            log "No deployments found in default namespace"
          fi
          
          # Step 3: Suspend worker nodes
          log "Step 3: Suspending worker nodes to save power..."
          
          for node in "${NODES_TO_SUSPEND[@]}"; do
            case "$node" in
              storagenodet3500)
                log "Suspending storage node: $node ($STORAGE_NODE_IP)"
                # Record sleep state
                echo "suspended:$(date +%s)" > "$STATE_DIR/${node}.state"
                # Suspend the node via SSH (use systemctl suspend for proper sleep)
                ssh -o ConnectTimeout=10 "${STORAGE_NODE_USER}@${STORAGE_NODE_IP}" \
                  "logger 'VMStation: Entering suspend mode' && sudo systemctl suspend" \
                  2>&1 | tee -a "$LOG_FILE" || log "WARNING: Failed to suspend $node (may already be down)"
                ;;
              homelab)
                log "Suspending homelab node: $node ($HOMELAB_NODE_IP)"
                # Record sleep state
                echo "suspended:$(date +%s)" > "$STATE_DIR/${node}.state"
                # Suspend the node via SSH
                ssh -o ConnectTimeout=10 "${HOMELAB_NODE_USER}@${HOMELAB_NODE_IP}" \
                  "logger 'VMStation: Entering suspend mode' && sudo systemctl suspend" \
                  2>&1 | tee -a "$LOG_FILE" || log "WARNING: Failed to suspend $node (may already be down)"
                ;;
              *)
                log "Unknown node $node - skipping suspend"
                ;;
            esac
            
            # Small delay between suspends
            sleep 2
          done
          
          log "=========================================="
          log "Cluster sleep sequence completed"
          log "Nodes have been suspended and can be woken via Wake-on-LAN"
          log "=========================================="
        mode: '0755'

    - name: "Create systemd service for auto-sleep monitor"
      when: enable_autosleep | bool
      copy:
        dest: /etc/systemd/system/vmstation-autosleep.service
        content: |
          [Unit]
          Description=VMStation Auto-Sleep Monitor
          Documentation=https://github.com/JashandeepJustinBains/VMStation
          After=kubelet.service
          Requires=kubelet.service
          
          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/vmstation-autosleep-monitor.sh
          Environment=KUBECONFIG=/etc/kubernetes/admin.conf
          # Configurable inactivity threshold (default: 7200s = 2 hours)
          Environment=VMSTATION_INACTIVITY_THRESHOLD=7200
          # Restart policy
          Restart=on-failure
          RestartSec=60
          # Logging
          StandardOutput=journal
          StandardError=journal
          SyslogIdentifier=vmstation-autosleep
          
          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: "Create systemd timer for auto-sleep monitor"
      when: enable_autosleep | bool
      copy:
        dest: /etc/systemd/system/vmstation-autosleep.timer
        content: |
          [Unit]
          Description=VMStation Auto-Sleep Monitor Timer
          
          [Timer]
          OnBootSec=5min
          OnUnitActiveSec=15min
          
          [Install]
          WantedBy=timers.target
        mode: '0644'

    - name: "Reload systemd"
      systemd:
        daemon_reload: true
      when: enable_autosleep | bool

    - name: "Enable and start auto-sleep timer"
      systemd:
        name: vmstation-autosleep.timer
        enabled: true
        state: started
      when: enable_autosleep | bool

    - name: "Display setup complete message"
      debug:
        msg: |
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
          ✅ Auto-Sleep Monitoring Setup Complete
          
          Cluster will automatically sleep after 2 hours of inactivity
          
          Monitor status:
          systemctl status vmstation-autosleep.timer
          
          Disable auto-sleep:
          systemctl stop vmstation-autosleep.timer
          systemctl disable vmstation-autosleep.timer
          ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
