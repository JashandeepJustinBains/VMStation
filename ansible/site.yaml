---
# VMStation Site Playbook - Main orchestrator
# This imports modular subsites in recommended order, but operators should prefer
# running subsites individually for safer, more controlled deployments.
#
# Recommended individual execution order:
# 0. (DESTRUCTIVE) ansible-playbook -i ansible/inventory.txt ansible/subsites/00-spindown.yaml -e confirm_spindown=true
# 1. ansible-playbook -i ansible/inventory.txt ansible/subsites/01-checks.yaml
# 2. ansible-playbook -i ansible/inventory.txt ansible/subsites/02-certs.yaml  
# 3. ansible-playbook -i ansible/inventory.txt ansible/subsites/03-monitoring.yaml
# 4. ansible-playbook -i ansible/inventory.txt ansible/subsites/04-jellyfin.yaml
# 4. ansible-playbook -i ansible/inventory.txt ansible/subsites/05-extra_apps.yaml
# 5. ansible-playbook -i ansible/inventory.txt ansible/plays/kubernetes_stack.yaml
# 6. ansible-playbook -i ansible/inventory.txt ansible/plays/jellyfin.yml
#
# WARNING: 00-spindown.yaml is DESTRUCTIVE and is excluded from site.yaml for safety!

# === Modular Subsites (Safe, Check-Only Operations) ===
# NOTE: 00-spindown.yaml is intentionally excluded from automatic deployment
#       It should only be run manually with explicit confirmation for destructive cleanup
# - import_playbook: subsites/00-spindown.yaml  # Run manually only!
- import_playbook: subsites/01-checks.yaml
- import_playbook: subsites/02-certs.yaml  
- import_playbook: subsites/03-monitoring.yaml
- import_playbook: subsites/04-jellyfin.yaml
- import_playbook: plays/apply_drone_secrets.yml

# Add delay to prevent Kubernetes API rate limiting between drone secrets and extra apps
- name: "API Rate Limiting Prevention"
  hosts: localhost
  gather_facts: false
  become: false
  connection: local
  tasks:
    - name: Add delay between API-intensive playbooks
      ansible.builtin.pause:
        seconds: 5
        prompt: "Pausing to prevent Kubernetes API rate limiting..."

- import_playbook: subsites/05-extra_apps.yaml

# === Monitoring Prerequisites Setup ===
- import_playbook: plays/setup_monitoring_prerequisites.yaml

# === Core Infrastructure Deployment ===
- import_playbook: plays/kubernetes_stack.yaml

# === Application Services ===
- import_playbook: plays/jellyfin.yml
  when: jellyfin_enabled | default(true)

# === Final Validation ===
- name: "VMStation Deployment Validation"
  hosts: localhost
  gather_facts: false
  become: false
  connection: local
  tags: [validate]
  vars:
    # Expected node assignments for each app
    apps_to_check:
      - name: "kubernetes-dashboard"
        namespace: "kubernetes-dashboard"
        label_selector: "app=kubernetes-dashboard"
        service: "kubernetes-dashboard"
        expected_node: "masternode"
      - name: "drone"
        namespace: "drone"
        label_selector: "app=drone"
        service: "drone"
        expected_node: "homelab"
      - name: "mongodb"
        namespace: "mongodb"
        label_selector: "app=mongodb"
        service: "mongodb"
        expected_node: "homelab"

  tasks:
    - name: "Gather pod listings for extra apps"
      kubernetes.core.k8s_info:
        kind: Pod
        namespace: "{{ item.namespace }}"
        label_selectors: "{{ item.label_selector }}"
      loop: "{{ apps_to_check }}"
      register: pod_checks
      failed_when: false

    - name: "Gather Service info for extra apps"
      kubernetes.core.k8s_info:
        kind: Service
        namespace: "{{ item.namespace }}"
        name: "{{ item.service }}"
      loop: "{{ apps_to_check }}"
      register: svc_checks
      failed_when: false

    - name: "Build list of failing apps (no ready pods or wrong node)"
      set_fact:
        failing_apps: "{{ failing_apps | default([]) + [ apps_to_check[item_index].name ] }}"
      loop: "{{ pod_checks.results }}"
      loop_control:
        index_var: item_index
      when: >-
        (item.resources | default([]) | length) == 0
        or ((item.resources | default([]) | json_query("[?status.conditions[?(@.type=='Ready' && @.status=='True')]]") | length) == 0)

    - name: "Build list of apps scheduled on wrong nodes"
      set_fact:
        misscheduled_apps: "{{ misscheduled_apps | default([]) + [ {'app': apps_to_check[item_index].name, 'expected': apps_to_check[item_index].expected_node, 'actual': item.resources[0].spec.nodeName} ] }}"
      loop: "{{ pod_checks.results }}"
      loop_control:
        index_var: item_index
      when: >-
        (item.resources | default([]) | length) > 0
        and item.resources[0].spec.nodeName != apps_to_check[item_index].expected_node

    - name: "Print detailed status for each extra app"
      ansible.builtin.debug:
        msg: >-
          {{ apps_to_check[idx].name }}: 
          pods={{ (item.resources | default([]) | length) }}
          ready={{ (item.resources | default([]) | json_query("[?status.conditions[?(@.type=='Ready' && @.status=='True')]]") | length) }}
          scheduled_node={{ (item.resources[0].spec.nodeName) if (item.resources | default([]) | length) > 0 else 'N/A' }}
          expected_node={{ apps_to_check[idx].expected_node }}
          svc={{ (svc_checks.results[idx].resources | default([]) | length > 0) if (svc_checks is defined and svc_checks.results is defined and (svc_checks.results | length) > idx) else false }}
          nodePort={{ (svc_checks.results[idx].resources[0].spec.ports[0].nodePort) if (svc_checks is defined and svc_checks.results is defined and (svc_checks.results | length) > idx and (svc_checks.results[idx].resources | default([]) | length) > 0) else 'N/A' }}
      loop: "{{ pod_checks.results }}"
      loop_control:
        index_var: idx

    - name: "Fail if any extra app has no ready pods"
      ansible.builtin.fail:
        msg: "One or more required extra-app pods are not ready: {{ failing_apps | default([]) | join(', ') }}"
      when: failing_apps is defined and (failing_apps | length) > 0

    - name: "Warn about misscheduled apps"
      ansible.builtin.debug:
        msg: >-
          WARNING: {{ item.app }} is scheduled on {{ item.actual }} but expected on {{ item.expected }}.
          This may be intentional or indicate a scheduling configuration issue.
      loop: "{{ misscheduled_apps | default([]) }}"
      when: misscheduled_apps is defined and (misscheduled_apps | length) > 0

    - name: "Optional: Validate Jellyfin using existing role (if enabled)"
      include_role:
        name: jellyfin
        tasks_from: main
      when: jellyfin_enabled | default(true)
      tags: [jellyfin, validate]

    - name: "Deployment summary"
      ansible.builtin.debug:
        msg: >-
          VMStation validation completed. Extra apps failing: {{ failing_apps | default([]) | join(', ') or 'none' }}