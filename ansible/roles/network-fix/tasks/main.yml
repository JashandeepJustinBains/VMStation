# --- Robust Pre-checks for CNI/Flannel Deployment ---
- name: Pre-check required kernel modules
  become: true
  ansible.builtin.shell: |
    missing=0
    for mod in br_netfilter overlay nf_conntrack vxlan; do
      lsmod | grep -q $mod || missing=1
    done
    exit $missing
  register: kernel_mod_check
  failed_when: kernel_mod_check.rc != 0
  changed_when: false

- name: Pre-check sysctl settings for Kubernetes CNI
  become: true
  ansible.builtin.shell: |
    sysctl -n net.bridge.bridge-nf-call-iptables | grep -q '^1$' && \
    sysctl -n net.bridge.bridge-nf-call-ip6tables | grep -q '^1$' && \
    sysctl -n net.ipv4.ip_forward | grep -q '^1$'
  register: sysctl_check
  failed_when: sysctl_check.rc != 0
  changed_when: false


# --- Standardize CNI interface name to 'cni' ---
# (This should be reflected in Flannel manifest and CNI config templates)
# If any CNI config or manifest uses 'cbr', replace with 'cni' (idempotent)
- name: Standardize CNI interface name to 'cni' in CNI configs
  become: true
  ansible.builtin.shell: |
    find /etc/cni/net.d -type f -exec sed -i 's/\"cbr\"/\"cni\"/g' {} +
#  ignore_errors: true
# Ensure kernel modules, sysctl and basic forwarding rules required for Kubernetes CNI

- name: Install required network packages (RHEL/CentOS)
  become: true
  ansible.builtin.package:
    name:
      - iptables
      - iptables-services
      - conntrack-tools
      - socat
      - iproute-tc
    state: present
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Install iptables-nft for RHEL 10 (kube-proxy compatibility)
  become: true
  ansible.builtin.package:
    name:
      - iptables-nft
      - iptables-nft-services
    state: present
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  ignore_errors: true

- name: Install required network packages (Debian/Ubuntu)
  become: true
  ansible.builtin.package:
    name:
      - iptables
      - conntrack
      - socat
      - iproute2
    state: present
  when: ansible_os_family == 'Debian'
  ignore_errors: true

- name: Load all required kernel modules
  become: true
  ansible.builtin.command:
    cmd: "modprobe {{ item }}"
  loop:
    - br_netfilter
    - overlay
    - nf_conntrack
    - vxlan
  changed_when: false
  ignore_errors: true

- name: Persist all required kernel modules on boot
  become: true
  ansible.builtin.copy:
    dest: /etc/modules-load.d/kubernetes.conf
    content: |
      # Kubernetes required modules
      br_netfilter
      overlay
      nf_conntrack
      vxlan
    owner: root
    group: root
    mode: '0644'
  notify: restart kubelet

- name: Ensure sysctl settings for Kubernetes CNIs
  become: true
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
    owner: root
    group: root
    mode: '0644'
  notify: restart kubelet

- name: Apply sysctl settings
  become: true
  ansible.builtin.command:
    cmd: sysctl --system
  changed_when: false

- name: Ensure ip_forward is enabled at runtime
  become: true
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present

- name: Try to set iptables FORWARD policy to ACCEPT (best-effort)
  become: true
  ansible.builtin.command:
    cmd: iptables -P FORWARD ACCEPT
  ignore_errors: true

- name: If ufw exists, disable it to avoid blocking pod traffic (best-effort)
  become: true
  ansible.builtin.stat:
    path: /usr/sbin/ufw
  register: ufw_path

- name: Stop and disable ufw when present
  become: true
  ansible.builtin.service:
    name: ufw
    state: stopped
    enabled: false
  when: ufw_path.stat.exists
  ignore_errors: true

- name: Stop and disable firewalld on RHEL systems (Flannel VXLAN requires open communication)
  become: true
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Ensure NetworkManager conf.d directory exists
  become: true
  ansible.builtin.file:
    path: /etc/NetworkManager/conf.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: ansible_service_mgr == 'systemd'
  ignore_errors: true

- name: Configure NetworkManager to ignore CNI interfaces (RHEL/Debian)
  become: true
  ansible.builtin.copy:
    dest: /etc/NetworkManager/conf.d/99-kubernetes.conf
    content: |
      [keyfile]
      unmanaged-devices=interface-name:cni*;interface-name:flannel*;interface-name:veth*
    owner: root
    group: root
    mode: '0644'
  notify: restart NetworkManager
  when: ansible_service_mgr == 'systemd'
  ignore_errors: true


# Enable and check nftables for RHEL 10 (Flannel nft backend)
- name: Ensure nftables is installed and enabled (RHEL 10)
  become: true
  ansible.builtin.package:
    name: nftables
    state: present
  when: ansible_distribution_major_version is version('10', '==') and ansible_os_family == 'RedHat'

- name: Ensure nftables service is running (RHEL 10)
  become: true
  ansible.builtin.service:
    name: nftables
    state: started
    enabled: true
  when: ansible_distribution_major_version is version('10', '==') and ansible_os_family == 'RedHat'


- name: Configure iptables to use nftables backend (RHEL 10)
  become: true
  ansible.builtin.command:
    cmd: update-alternatives --set iptables /usr/sbin/iptables-nft
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  ignore_errors: true

- name: Configure ip6tables to use nftables backend (RHEL 10)
  become: true
  ansible.builtin.command:
    cmd: update-alternatives --set ip6tables /usr/sbin/ip6tables-nft
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - ansible_facts['os_family'] == 'RedHat'
    - ansible_facts['distribution_major_version']|int >= 10
    - lookup('ansible.builtin.file', '/usr/sbin/ip6tables-nft', errors='ignore') is not none
    - lookup('ansible.builtin.file', '/var/lib/alternatives/ip6tables', errors='ignore') is not none
  ignore_errors: true

- name: Ensure iptables lock file directory exists (RHEL 10)
  become: true
  ansible.builtin.file:
    path: /run/xtables.lock
    state: touch
    owner: root
    group: root
    mode: '0644'
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  ignore_errors: true

- name: Set SELinux to permissive mode on RHEL (temporary for CNI compatibility)
  become: true
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Ensure SELinux permissive persists on reboot (RHEL)
  become: true
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=permissive'
    state: present
  when: ansible_os_family == 'RedHat'
  ignore_errors: true


# RHEL 10 specific fixes for Flannel CrashLoopBackOff
- name: Disable systemd-oomd interference with containers (RHEL 10)
  become: true
  ansible.builtin.systemd:
    name: systemd-oomd
    state: stopped
    enabled: false
    masked: true
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  ignore_errors: true

- name: Ensure containerd cgroup driver is systemd (RHEL 10)
  become: true
  ansible.builtin.lineinfile:
    path: /etc/containerd/config.toml
    regexp: '^\s*SystemdCgroup\s*='
    line: '          SystemdCgroup = true'
    insertafter: '\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]'
    state: present
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - ansible_facts['distribution_major_version']|int >= 10
    - ansible_facts['os_family'] == 'RedHat'
    - lookup('ansible.builtin.file', '/etc/containerd/config.toml', errors='ignore') is not none
  notify: restart containerd
  ignore_errors: true

- name: Ensure containerd uses correct cgroup path (RHEL 10)
  become: true
  ansible.builtin.shell: |
    if [ -f /etc/containerd/config.toml ]; then
      if ! grep -q "SystemdCgroup = true" /etc/containerd/config.toml; then
        mkdir -p /etc/containerd
        containerd config default | sed 's/SystemdCgroup = false/SystemdCgroup = true/' > /etc/containerd/config.toml
      fi
    fi
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - lookup('ansible.builtin.file', '/etc/containerd/config.toml', errors='ignore') is not none
  notify: restart containerd
  ignore_errors: true

- name: Ensure kubelet uses systemd cgroup driver (RHEL 10)
  become: true
  ansible.builtin.lineinfile:
    path: /var/lib/kubelet/config.yaml
    regexp: '^cgroupDriver:'
    line: 'cgroupDriver: systemd'
    state: present
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - lookup('ansible.builtin.file', '/var/lib/kubelet/config.yaml', errors='ignore') is not none
  notify: restart kubelet
  ignore_errors: true

- name: Create iptables chains for kube-proxy (RHEL 10 compatibility)
  become: true
  ansible.builtin.shell: |
    # Ensure basic iptables chains exist for kube-proxy
    iptables -t nat -N KUBE-SERVICES 2>/dev/null || true
    iptables -t nat -N KUBE-POSTROUTING 2>/dev/null || true
    iptables -t nat -N KUBE-FIREWALL 2>/dev/null || true
    iptables -t nat -N KUBE-MARK-MASQ 2>/dev/null || true
    iptables -t filter -N KUBE-FORWARD 2>/dev/null || true
    iptables -t filter -N KUBE-SERVICES 2>/dev/null || true
    # Ensure NAT table has proper base chains
    iptables -t nat -C PREROUTING -j KUBE-SERVICES 2>/dev/null || iptables -t nat -A PREROUTING -j KUBE-SERVICES
    iptables -t nat -C OUTPUT -j KUBE-SERVICES 2>/dev/null || iptables -t nat -A OUTPUT -j KUBE-SERVICES
    iptables -t nat -C POSTROUTING -j KUBE-POSTROUTING 2>/dev/null || iptables -t nat -A POSTROUTING -j KUBE-POSTROUTING
    iptables -t filter -C FORWARD -j KUBE-FORWARD 2>/dev/null || iptables -t filter -A FORWARD -j KUBE-FORWARD
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  ignore_errors: true
  changed_when: false

- name: Restart kube-proxy after iptables setup (RHEL 10)
  become: true
  ansible.builtin.shell: |
    # Delete kube-proxy pod to force restart with proper iptables setup
    kubectl delete pod -n kube-system -l k8s-app=kube-proxy --kubeconfig /etc/kubernetes/kubelet.conf --ignore-not-found=true 2>/dev/null || true
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  ignore_errors: true
  changed_when: false

# kubelet will be restarted via handler 'restart kubelet' only when changes occur

# Ensure /etc/cni/net.d exists and is writable by root (required for Flannel CNI bootstrap)
# Ensure /etc/cni/net.d exists and is writable by root (required for Flannel CNI bootstrap)
- name: Ensure /etc/cni/net.d exists with correct permissions (CNI bootstrap)
  become: true
  ansible.builtin.file:
    path: /etc/cni/net.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  ignore_errors: true

# Ensure /etc/cni/net.d exists and is writable by root (required for Flannel CNI bootstrap)
- name: Ensure /etc/cni/net.d exists with correct permissions (CNI bootstrap)
  become: true
  ansible.builtin.file:
    path: /etc/cni/net.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  ignore_errors: false

# Remove any conflicting CNI configs before Flannel deploy (idempotent)
- name: Remove conflicting CNI configs before Flannel deploy
  become: true
  ansible.builtin.find:
    paths: /etc/cni/net.d
    patterns: '*'
    excludes: '10-flannel.conflist'
    file_type: file
  register: cni_conflicting_files

- name: Delete conflicting CNI configs
  become: true
  ansible.builtin.file:
    path: "{{ item.path }}"
    state: absent
  loop: "{{ cni_conflicting_files.files }}"
  when: cni_conflicting_files.matched > 0

# CNI config validation is handled after Flannel DaemonSet deployment in deploy-cluster.yaml
# No premature checks here - this role only prepares the environment
