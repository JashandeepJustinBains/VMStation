---
# ===================================================================================
# Network prerequisites for Kubernetes with Flannel CNI
# OS-aware setup for Debian (iptables) and RHEL 10 (nftables)
# ===================================================================================

- name: Disable swap
  ansible.builtin.command: swapoff -a
  changed_when: false
  ignore_errors: true

- name: Disable swap in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*\s+swap\s+.*)$'
    replace: '# \1'
  ignore_errors: true

- name: Load kernel modules
  ansible.builtin.modprobe:
    name: "{{ item }}"
    state: present
  loop:
    - br_netfilter
    - overlay
    - nf_conntrack
    - vxlan

- name: Persist kernel modules
  ansible.builtin.copy:
    dest: /etc/modules-load.d/kubernetes.conf
    content: |
      br_netfilter
      overlay
      nf_conntrack
      vxlan
    mode: '0644'

- name: Set sysctl parameters
  ansible.builtin.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
    sysctl_set: yes
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }

- name: Persist sysctl settings
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
    mode: '0644'

- name: Ensure /etc/cni/net.d exists
  ansible.builtin.file:
    path: /etc/cni/net.d
    state: directory
    mode: '0755'

- name: Ensure /run/xtables.lock exists (required for iptables concurrency)
  ansible.builtin.copy:
    content: ""
    dest: /run/xtables.lock
    owner: root
    group: root
    mode: '0644'
    force: no
  ignore_errors: true

# OS-specific package installation
- name: Install network packages (RHEL)
  ansible.builtin.package:
    name:
      - iptables
      - iptables-nft
      - nftables
      - conntrack-tools
      - socat
      - iproute-tc
      - curl
    state: present
  when: ansible_os_family == 'RedHat'

- name: Install network packages (Debian)
  ansible.builtin.package:
    name:
      - iptables
      - conntrack
      - socat
      - iproute2
      - curl
    state: present
  when: ansible_os_family == 'Debian'

# Firewall configuration
- name: Stop and disable firewalld (RHEL)
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Set iptables FORWARD policy to ACCEPT
  ansible.builtin.command: iptables -P FORWARD ACCEPT
  ignore_errors: true
  changed_when: false

# RHEL 10 nftables backend configuration
- name: Enable and start nftables service (RHEL 10+)
  ansible.builtin.service:
    name: nftables
    state: started
    enabled: yes
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  ignore_errors: true

- name: Configure iptables to use nftables backend (RHEL 10+)
  ansible.builtin.command: update-alternatives --set iptables /usr/sbin/iptables-nft
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: iptables_alt_result
  changed_when: "'update-alternatives' in iptables_alt_result.stdout or iptables_alt_result.rc == 0"
  failed_when: false

- name: Verify iptables points to nftables backend (RHEL 10+)
  ansible.builtin.stat:
    path: /usr/sbin/iptables
  register: iptables_link
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')

- name: Configure ip6tables to use nftables backend (RHEL 10+)
  ansible.builtin.command: update-alternatives --set ip6tables /usr/sbin/ip6tables-nft
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: ip6tables_alt_result
  changed_when: "'update-alternatives' in ip6tables_alt_result.stdout or ip6tables_alt_result.rc == 0"
  failed_when: false

# SELinux configuration (RHEL)
- name: Set SELinux to permissive (RHEL)
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Persist SELinux permissive (RHEL)
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=permissive'
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

# Pre-create Flannel CNI config on RHEL 10 to avoid init-container write failures
- name: Pre-create Flannel CNI config (RHEL 10+)
  ansible.builtin.copy:
    content: |
      {
        "name": "cni0",
        "cniVersion": "0.3.1",
        "plugins": [
          {
            "type": "flannel",
            "delegate": {
              "hairpinMode": true,
              "isDefaultGateway": true
            }
          },
          {
            "type": "portmap",
            "capabilities": {
              "portMappings": true
            }
          }
        ]
      }
    dest: /etc/cni/net.d/10-flannel.conflist
    owner: root
    group: root
    mode: '0644'
    force: no
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: cni_config_created

- name: Apply SELinux context to CNI config (RHEL 10+)
  ansible.builtin.command: restorecon -v /etc/cni/net.d/10-flannel.conflist
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - cni_config_created is changed
  changed_when: false
  failed_when: false
