---
# Ensure kernel modules, sysctl and basic forwarding rules required for Kubernetes CNI

- name: Install required network packages (RHEL/CentOS)
  become: true
  ansible.builtin.package:
    name:
      - iptables
      - iptables-services
      - conntrack-tools
      - socat
      - iproute-tc
    state: present
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Install required network packages (Debian/Ubuntu)
  become: true
  ansible.builtin.package:
    name:
      - iptables
      - conntrack
      - socat
      - iproute2
    state: present
  when: ansible_os_family == 'Debian'
  ignore_errors: true

- name: Load all required kernel modules
  become: true
  ansible.builtin.command:
    cmd: "modprobe {{ item }}"
  loop:
    - br_netfilter
    - overlay
    - nf_conntrack
    - vxlan
  changed_when: false
  ignore_errors: true

- name: Persist all required kernel modules on boot
  become: true
  ansible.builtin.copy:
    dest: /etc/modules-load.d/kubernetes.conf
    content: |
      # Kubernetes required modules
      br_netfilter
      overlay
      nf_conntrack
      vxlan
    owner: root
    group: root
    mode: '0644'
  notify: restart kubelet

- name: Ensure sysctl settings for Kubernetes CNIs
  become: true
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
    owner: root
    group: root
    mode: '0644'
  notify: restart kubelet

- name: Apply sysctl settings
  become: true
  ansible.builtin.command:
    cmd: sysctl --system
  changed_when: false

- name: Ensure ip_forward is enabled at runtime
  become: true
  ansible.builtin.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present

- name: Try to set iptables FORWARD policy to ACCEPT (best-effort)
  become: true
  ansible.builtin.command:
    cmd: iptables -P FORWARD ACCEPT
  ignore_errors: true

- name: If ufw exists, disable it to avoid blocking pod traffic (best-effort)
  become: true
  ansible.builtin.stat:
    path: /usr/sbin/ufw
  register: ufw_path

- name: Stop and disable ufw when present
  become: true
  ansible.builtin.service:
    name: ufw
    state: stopped
    enabled: false
  when: ufw_path.stat.exists
  ignore_errors: true

- name: Stop and disable firewalld on RHEL systems (Flannel VXLAN requires open communication)
  become: true
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Ensure NetworkManager conf.d directory exists
  become: true
  ansible.builtin.file:
    path: /etc/NetworkManager/conf.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: ansible_service_mgr == 'systemd'
  ignore_errors: true

- name: Configure NetworkManager to ignore CNI interfaces (RHEL/Debian)
  become: true
  ansible.builtin.copy:
    dest: /etc/NetworkManager/conf.d/99-kubernetes.conf
    content: |
      [keyfile]
      unmanaged-devices=interface-name:cni*;interface-name:flannel*;interface-name:veth*
    owner: root
    group: root
    mode: '0644'
  notify: restart NetworkManager
  when: ansible_service_mgr == 'systemd'
  ignore_errors: true

- name: Configure iptables-legacy as default on RHEL systems (kube-proxy compatibility)
  become: true
  ansible.builtin.command:
    cmd: "{{ item }}"
  loop:
    - alternatives --set iptables /usr/sbin/iptables-legacy
    - alternatives --set ip6tables /usr/sbin/ip6tables-legacy
  when: ansible_os_family == 'RedHat'
  ignore_errors: true
  changed_when: false

- name: Set SELinux to permissive mode on RHEL (temporary for CNI compatibility)
  become: true
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Ensure SELinux permissive persists on reboot (RHEL)
  become: true
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=permissive'
    state: present
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

# kubelet will be restarted via handler 'restart kubelet' only when changes occur
