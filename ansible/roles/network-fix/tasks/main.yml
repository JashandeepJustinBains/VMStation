---
# ===================================================================================
# Network prerequisites for Kubernetes with Flannel CNI
# OS-aware setup for Debian (iptables) and RHEL 10 (nftables)
# ===================================================================================

- name: Disable swap
  ansible.builtin.command: swapoff -a
  changed_when: false
  ignore_errors: true

- name: Disable swap in fstab
  ansible.builtin.replace:
    path: /etc/fstab
    regexp: '^([^#].*\s+swap\s+.*)$'
    replace: '# \1'
  ignore_errors: true

- name: Load kernel modules (skip br_netfilter on RHEL 10+, module removed)
  ansible.builtin.modprobe:
    name: "{{ item }}"
    state: present
  loop: "{{ ['overlay', 'nf_conntrack', 'vxlan'] + (['br_netfilter'] if not (ansible_os_family == 'RedHat' and ansible_distribution_major_version is version('10', '>=')) else []) }}"
  ignore_errors: true

- name: Persist kernel modules
  ansible.builtin.copy:
    dest: /etc/modules-load.d/kubernetes.conf
    content: |
      {% if not (ansible_os_family == 'RedHat' and ansible_distribution_major_version is version('10', '>=')) %}
      br_netfilter
      {% endif %}
      overlay
      nf_conntrack
      vxlan
    mode: '0644'

- name: Set sysctl parameters
  ansible.builtin.sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    state: present
    reload: yes
    sysctl_set: yes
  loop:
    - { name: 'net.bridge.bridge-nf-call-iptables', value: '1' }
    - { name: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
    - { name: 'net.ipv4.ip_forward', value: '1' }

- name: Persist sysctl settings
  ansible.builtin.copy:
    dest: /etc/sysctl.d/99-k8s.conf
    content: |
      net.bridge.bridge-nf-call-iptables = 1
      net.bridge.bridge-nf-call-ip6tables = 1
      net.ipv4.ip_forward = 1
    mode: '0644'

- name: Ensure /opt/cni/bin directory exists
  ansible.builtin.file:
    path: /opt/cni/bin
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Apply SELinux context to /opt/cni/bin (RHEL)
  ansible.builtin.command: chcon -Rt container_file_t /opt/cni/bin
  when: ansible_os_family == 'RedHat'
  changed_when: false
  failed_when: false

- name: Ensure /etc/cni/net.d exists
  ansible.builtin.file:
    path: /etc/cni/net.d
    state: directory
    mode: '0755'

- name: Apply SELinux context to /etc/cni/net.d (RHEL)
  ansible.builtin.command: chcon -Rt container_file_t /etc/cni/net.d
  when: ansible_os_family == 'RedHat'
  changed_when: false
  failed_when: false

- name: Ensure /run/flannel directory exists (for subnet.env)
  ansible.builtin.file:
    path: /run/flannel
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Apply SELinux context to /run/flannel (RHEL)
  ansible.builtin.command: chcon -Rt container_file_t /run/flannel
  when: ansible_os_family == 'RedHat'
  changed_when: false
  failed_when: false

- name: Ensure /run/xtables.lock exists (required for iptables concurrency)
  ansible.builtin.copy:
    content: ""
    dest: /run/xtables.lock
    owner: root
    group: root
    mode: '0644'
    force: no
  ignore_errors: true

# OS-specific package installation
- name: Install network packages (RHEL)
  ansible.builtin.package:
    name:
      - iptables
      - iptables-nft
      - nftables
      - conntrack-tools
      - socat
      - iproute-tc
      - curl
    state: present
  when: ansible_os_family == 'RedHat'

- name: Install network packages (Debian)
  ansible.builtin.package:
    name:
      - iptables
      - conntrack
      - socat
      - iproute2
      - curl
    state: present
  when: ansible_os_family == 'Debian'

# Firewall configuration
- name: Stop and disable firewalld (RHEL)
  ansible.builtin.service:
    name: firewalld
    state: stopped
    enabled: false
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Set iptables FORWARD policy to ACCEPT
  ansible.builtin.command: iptables -P FORWARD ACCEPT
  ignore_errors: true
  changed_when: false

# RHEL 10 nftables backend configuration (idempotent)
- name: Check if iptables-nft binary exists (RHEL 10+)
  ansible.builtin.stat:
    path: /usr/sbin/iptables-nft
  register: iptables_nft_binary
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')

- name: Check if iptables alternatives entry exists (RHEL 10+)
  ansible.builtin.stat:
    path: /var/lib/alternatives/iptables
  register: iptables_alt_exists
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')

- name: Install iptables alternatives if missing (RHEL 10+)
  ansible.builtin.command:
    cmd: update-alternatives --install /usr/sbin/iptables iptables /usr/sbin/iptables-nft 10
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - iptables_nft_binary.stat.exists | default(false)
    - not (iptables_alt_exists.stat.exists | default(false))
  register: iptables_install
  changed_when: iptables_install.rc == 0
  failed_when: false

- name: Configure iptables to use nftables backend (RHEL 10+)
  ansible.builtin.command: update-alternatives --set iptables /usr/sbin/iptables-nft
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: iptables_alt_result
  changed_when: "'update-alternatives' in iptables_alt_result.stdout or iptables_alt_result.rc == 0"
  failed_when: false

- name: Check if ip6tables alternatives entry exists (RHEL 10+)
  ansible.builtin.stat:
    path: /var/lib/alternatives/ip6tables
  register: ip6tables_alt_exists
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')

- name: Install ip6tables alternatives if missing (RHEL 10+)
  ansible.builtin.command:
    cmd: update-alternatives --install /usr/sbin/ip6tables ip6tables /usr/sbin/ip6tables-nft 10
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - iptables_nft_binary.stat.exists | default(false)
    - not (ip6tables_alt_exists.stat.exists | default(false))
  register: ip6tables_install
  changed_when: ip6tables_install.rc == 0
  failed_when: false

- name: Configure ip6tables to use nftables backend (RHEL 10+)
  ansible.builtin.command: update-alternatives --set ip6tables /usr/sbin/ip6tables-nft
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: ip6tables_alt_result
  changed_when: "'update-alternatives' in ip6tables_alt_result.stdout or ip6tables_alt_result.rc == 0"
  failed_when: false

- name: Pre-create iptables chains for kube-proxy (RHEL 10+)
  ansible.builtin.shell: |
    set -e
    # Pre-create kube-proxy NAT chains (idempotent)
    iptables -t nat -N KUBE-SERVICES 2>/dev/null || true
    iptables -t nat -N KUBE-POSTROUTING 2>/dev/null || true
    iptables -t nat -N KUBE-FIREWALL 2>/dev/null || true
    iptables -t nat -N KUBE-MARK-MASQ 2>/dev/null || true
    iptables -t nat -N KUBE-MARK-DROP 2>/dev/null || true
    iptables -t nat -N KUBE-LOAD-BALANCER 2>/dev/null || true
    iptables -t nat -N KUBE-NODE-PORT 2>/dev/null || true
    
    # Pre-create kube-proxy filter chains (idempotent)
    iptables -t filter -N KUBE-FORWARD 2>/dev/null || true
    iptables -t filter -N KUBE-SERVICES 2>/dev/null || true
    iptables -t filter -N KUBE-EXTERNAL-SERVICES 2>/dev/null || true
    iptables -t filter -N KUBE-NODEPORTS 2>/dev/null || true
    iptables -t filter -N KUBE-PROXY-FIREWALL 2>/dev/null || true
    
    # Hook chains into iptables (idempotent using -C check before -A append)
    iptables -t nat -C PREROUTING -m comment --comment "kubernetes service portals" -j KUBE-SERVICES 2>/dev/null || \
      iptables -t nat -A PREROUTING -m comment --comment "kubernetes service portals" -j KUBE-SERVICES
    
    iptables -t nat -C OUTPUT -m comment --comment "kubernetes service portals" -j KUBE-SERVICES 2>/dev/null || \
      iptables -t nat -A OUTPUT -m comment --comment "kubernetes service portals" -j KUBE-SERVICES
    
    iptables -t nat -C POSTROUTING -m comment --comment "kubernetes postrouting rules" -j KUBE-POSTROUTING 2>/dev/null || \
      iptables -t nat -A POSTROUTING -m comment --comment "kubernetes postrouting rules" -j KUBE-POSTROUTING
    
    iptables -t filter -C FORWARD -m comment --comment "kubernetes forwarding rules" -j KUBE-FORWARD 2>/dev/null || \
      iptables -t filter -A FORWARD -m comment --comment "kubernetes forwarding rules" -j KUBE-FORWARD
    
    iptables -t filter -C FORWARD -m conntrack --ctstate NEW -m comment --comment "kubernetes service portals" -j KUBE-SERVICES 2>/dev/null || \
      iptables -t filter -A FORWARD -m conntrack --ctstate NEW -m comment --comment "kubernetes service portals" -j KUBE-SERVICES
    
    iptables -t filter -C INPUT -m conntrack --ctstate NEW -m comment --comment "kubernetes externally-visible service portals" -j KUBE-EXTERNAL-SERVICES 2>/dev/null || \
      iptables -t filter -A INPUT -m conntrack --ctstate NEW -m comment --comment "kubernetes externally-visible service portals" -j KUBE-EXTERNAL-SERVICES
    
    echo "kube-proxy iptables chains pre-created successfully"
  args:
    executable: /bin/bash
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: kube_proxy_chains
  changed_when: false
  failed_when: false

- name: Configure nftables permissive rules (RHEL 10+)
  ansible.builtin.shell: |
    if ! nft list table inet filter &>/dev/null; then
      nft add table inet filter
      nft add chain inet filter input '{ type filter hook input priority 0; policy accept; }'
      nft add chain inet filter forward '{ type filter hook forward priority 0; policy accept; }'
      nft add chain inet filter output '{ type filter hook output priority 0; policy accept; }'
    fi
  args:
    executable: /bin/bash
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: nftables_config
  changed_when: "'add table' in nftables_config.stdout"
  failed_when: false

- name: Pre-create nftables tables for Flannel (RHEL 10+ - CRITICAL FIX)
  ansible.builtin.shell: |
    set -e
    # Pre-create Flannel nftables tables to prevent "context canceled" errors
    # This must happen BEFORE Flannel pods start
    if ! nft list table inet flannel-ipv4 &>/dev/null; then
      nft add table inet flannel-ipv4
      echo "Created flannel-ipv4 table"
    fi
    if ! nft list table inet flannel-ipv6 &>/dev/null; then
      nft add table inet flannel-ipv6
      echo "Created flannel-ipv6 table"
    fi
  args:
    executable: /bin/bash
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: flannel_nft_tables
  changed_when: "'Created' in flannel_nft_tables.stdout"
  failed_when: false

- name: Persist nftables rules (RHEL 10+)
  ansible.builtin.shell: nft list ruleset > /etc/sysconfig/nftables.conf
  args:
    executable: /bin/bash
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - (nftables_config is changed or flannel_nft_tables is changed)
  failed_when: false

- name: Enable and start nftables service (RHEL 10+)
  ansible.builtin.service:
    name: nftables
    enabled: yes
    state: started
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  ignore_errors: true

# SELinux configuration (RHEL)
- name: Set SELinux to permissive (RHEL)
  ansible.posix.selinux:
    policy: targeted
    state: permissive
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Persist SELinux permissive (RHEL)
  ansible.builtin.lineinfile:
    path: /etc/selinux/config
    regexp: '^SELINUX='
    line: 'SELINUX=permissive'
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

# NetworkManager configuration (RHEL) - prevent it from managing CNI interfaces
- name: Ensure NetworkManager conf.d directory exists (RHEL)
  ansible.builtin.file:
    path: /etc/NetworkManager/conf.d
    state: directory
    mode: '0755'
  when: ansible_os_family == 'RedHat'
  ignore_errors: true

- name: Configure NetworkManager to ignore CNI interfaces (RHEL)
  ansible.builtin.copy:
    dest: /etc/NetworkManager/conf.d/99-kubernetes.conf
    content: |
      [keyfile]
      unmanaged-devices=interface-name:cni*;interface-name:flannel*;interface-name:veth*
    mode: '0644'
  when: ansible_os_family == 'RedHat'
  register: nm_config
  ignore_errors: true

- name: Restart NetworkManager if config changed (RHEL)
  ansible.builtin.service:
    name: NetworkManager
    state: restarted
  when:
    - ansible_os_family == 'RedHat'
    - nm_config is changed
  ignore_errors: true

# Pre-create Flannel CNI config on RHEL 10 to avoid init-container write failures
- name: Pre-create Flannel CNI config (RHEL 10+)
  ansible.builtin.copy:
    content: |
      {
        "name": "cni0",
        "cniVersion": "0.3.1",
        "plugins": [
          {
            "type": "flannel",
            "delegate": {
              "hairpinMode": true,
              "isDefaultGateway": true
            }
          },
          {
            "type": "portmap",
            "capabilities": {
              "portMappings": true
            }
          }
        ]
      }
    dest: /etc/cni/net.d/10-flannel.conflist
    owner: root
    group: root
    mode: '0644'
    force: no
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
  register: cni_config_created

- name: Apply SELinux context to CNI config (RHEL 10+)
  ansible.builtin.command: restorecon -v /etc/cni/net.d/10-flannel.conflist
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - cni_config_created is changed
  changed_when: false
  failed_when: false

# Ensure kubelet is running after all network configuration
- name: Ensure kubelet is enabled and started
  ansible.builtin.service:
    name: kubelet
    state: started
    enabled: yes
  ignore_errors: true

- name: Restart kubelet after network configuration (RHEL 10+)
  ansible.builtin.service:
    name: kubelet
    state: restarted
  when:
    - ansible_os_family == 'RedHat'
    - ansible_distribution_major_version is version('10', '>=')
    - kube_proxy_chains is defined
  ignore_errors: true
  throttle: 1
