---
# Idempotent cluster spin-up helper
# Behavior:
# - Wait for Kubernetes API server to be available
# - Power on worker hosts via WOL if configured
# - Uncordon nodes
# - Restore saved replicas from artifacts

# Wait for Kubernetes API server to be available before any kubectl commands
- name: Wait for Kubernetes API server to be available
  ansible.builtin.shell: |
    for i in {1..60}; do
      if kubectl version --request-timeout=5s >/dev/null 2>&1; then
        echo "API server is up"
        exit 0
      fi
      echo "Waiting for API server... ($i/60)"
      sleep 5
    done
    echo "ERROR: API server did not become available in time" >&2
    exit 1
  args:
    executable: /bin/bash
  delegate_to: localhost
  register: api_server_wait
  until: api_server_wait.rc == 0
  retries: 1
  delay: 0

- name: Ensure artifacts directory exists
  ansible.builtin.file:
    path: "{{ playbook_dir }}/../artifacts/cluster_spin"
    state: directory
    mode: '0755'
  delegate_to: localhost

- name: Wake workers via WOL (if MACs provided)
  ansible.builtin.shell: |
    {% for mac in vmstation_wol_macs | default([]) %}
    if command -v etherwake >/dev/null 2>&1; then
      etherwake {{ mac }} || true
    elif command -v wakeonlan >/dev/null 2>&1; then
      wakeonlan {{ mac }} || true
    fi
    {% endfor %}
  delegate_to: localhost
  when: vmstation_wol_macs is defined and vmstation_wol_macs | length > 0

- name: Uncordon worker nodes
  ansible.builtin.shell: kubectl uncordon {{ item }}
  loop: "{{ spin_targets | default(groups['workers'] | default([])) }}"
  delegate_to: localhost
  ignore_errors: true

- name: Restore replicas from artifact files
  ansible.builtin.shell: |
    set -eux
    ART={{ playbook_dir }}/../artifacts/cluster_spin/replicas_{{ inventory_hostname }}.yaml
    if [ -f "$ART" ]; then
      while IFS= read -r line; do
        ns_name=$(echo "$line" | cut -d'/' -f1)
        dep_name=$(echo "$line" | cut -d'/' -f2 | cut -d: -f1)
        replicas=$(echo "$line" | awk -F': ' '{print $2}')
        if kubectl -n "$ns_name" get deploy "$dep_name" >/dev/null 2>&1; then
          kubectl -n "$ns_name" scale deploy/"$dep_name" --replicas="$replicas" || true
        fi
      done < "$ART"
    fi
  args:
    executable: /bin/bash
  delegate_to: localhost
  ignore_errors: true
