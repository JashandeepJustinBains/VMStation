---
# ansible/roles/rke2/tasks/system-prep.yml
# System preparation for RKE2

- name: Install required packages
  package:
    name: "{{ rke2_required_packages }}"
    state: present
  become: true
  ignore_errors: true  # Some packages may not be available in all repos

- name: Ensure curl is installed (critical)
  package:
    name: curl
    state: present
  become: true

- name: Ensure tar is installed (critical)
  package:
    name: tar
    state: present
  become: true

- name: Load required kernel modules
  modprobe:
    name: "{{ item }}"
    state: present
  loop: "{{ rke2_kernel_modules }}"
  become: true
  ignore_errors: true  # br_netfilter may not exist on RHEL 10

- name: Configure kernel modules to load on boot
  copy:
    dest: /etc/modules-load.d/rke2.conf
    content: |
      # Kernel modules for RKE2
      overlay
      br_netfilter
    mode: '0644'
  become: true

- name: Configure sysctl settings for RKE2
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/90-rke2.conf
    reload: yes
  loop: "{{ rke2_sysctl_config | dict2items }}"
  become: true
  ignore_errors: true  # Some settings may not apply on all systems

- name: Disable swap
  command: swapoff -a
  become: true
  when: ansible_swaptotal_mb > 0
  changed_when: false

- name: Remove swap from /etc/fstab
  lineinfile:
    path: /etc/fstab
    regexp: '^\s*[^#]\S+\s+\S+\s+swap\s+'
    state: absent
  become: true

- name: Configure NetworkManager to ignore CNI interfaces
  copy:
    dest: /etc/NetworkManager/conf.d/rke2-canal.conf
    content: |
      [keyfile]
      unmanaged-devices=interface-name:cali*;interface-name:flannel*;interface-name:vxlan.calico;interface-name:veth*
    mode: '0644'
  become: true
  notify: restart NetworkManager
  when: ansible_os_family == "RedHat"

- name: Ensure RKE2 directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: '0755'
  loop:
    - "{{ rke2_config_dir }}"
    - "{{ rke2_data_dir }}"
  become: true

- name: Check SELinux status
  command: getenforce
  register: selinux_status
  changed_when: false
  failed_when: false

- name: Display SELinux status
  debug:
    msg: "SELinux status: {{ selinux_status.stdout | default('Not available') }}"

- name: Warn if SELinux is enforcing
  debug:
    msg: "WARNING: SELinux is enforcing. RKE2 has SELinux support but may require additional policies."
  when: 
    - selinux_status.stdout is defined
    - selinux_status.stdout == "Enforcing"
