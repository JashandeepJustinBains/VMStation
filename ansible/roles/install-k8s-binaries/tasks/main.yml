---
# Install Kubernetes binaries (kubeadm, kubelet, kubectl) and containerd
# This role ensures Kubernetes components are installed before cluster initialization
# Idempotent: skips installation if binaries already exist

- name: Check if running in a container
  ansible.builtin.stat:
    path: /.dockerenv
  register: dockerenv_check

- name: Check if running in systemd-nspawn container
  ansible.builtin.stat:
    path: /run/systemd/container
  register: container_check

- name: Set container environment fact
  ansible.builtin.set_fact:
    is_container: \"{{ dockerenv_check.stat.exists or container_check.stat.exists }}\"

- name: Display environment warning if container detected
  ansible.builtin.debug:
    msg: |
      WARNING: Container environment detected!
      This may cause issues with package installation and service management.
      If binaries are missing, they must be pre-installed in the container image.
  when: is_container

- name: Check if systemd is available
  ansible.builtin.stat:
    path: /run/systemd/system
  register: systemd_check

- name: Set systemd availability fact
  ansible.builtin.set_fact:
    systemd_available: "{{ systemd_check.stat.exists and systemd_check.stat.isdir }}"

- name: Check if kubelet binary exists
  ansible.builtin.stat:
    path: /usr/bin/kubelet
  register: kubelet_check

- name: Check if kubeadm binary exists
  ansible.builtin.stat:
    path: /usr/bin/kubeadm
  register: kubeadm_check

- name: Check if kubectl binary exists
  ansible.builtin.stat:
    path: /usr/bin/kubectl
  register: kubectl_check

- name: Set installation needed fact
  ansible.builtin.set_fact:
    k8s_installation_needed: "{{ not (kubelet_check.stat.exists and kubeadm_check.stat.exists and kubectl_check.stat.exists) }}"

- name: Display installation status
  ansible.builtin.debug:
    msg: "Kubernetes binaries {{ 'already installed' if not k8s_installation_needed else 'will be installed' }}"

- name: Debug - Show environment info
  ansible.builtin.debug:
    msg:
      - "OS Family: {{ ansible_os_family }}"
      - "Distribution: {{ ansible_distribution }}"
      - "Systemd available: {{ systemd_available }}"
      - "Installation needed: {{ k8s_installation_needed }}"
  when: k8s_installation_needed

# Debian/Ubuntu installation
- name: Install Kubernetes on Debian/Ubuntu
  when:
    - ansible_os_family == "Debian"
    - k8s_installation_needed
  block:
    - name: Install prerequisites
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - software-properties-common
        state: present
        update_cache: yes

    - name: Create keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Kubernetes GPG key
      ansible.builtin.shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.29/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes apt repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.29/deb/ /"
        state: present
        filename: kubernetes
      register: repo_added

    - name: Update apt cache after adding repository
      ansible.builtin.apt:
        update_cache: yes
      when: repo_added is changed
      register: apt_update

    - name: Debug - Show apt update result
      ansible.builtin.debug:
        msg: "Apt cache updated: {{ (apt_update.changed if (apt_update is defined) else 'skipped') }}"

    - name: Install containerd
      ansible.builtin.apt:
        name: containerd
        state: present
      register: containerd_installed

    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd configuration
      ansible.builtin.shell: |
        containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Enable SystemdCgroup in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup\s*='
        line: '            SystemdCgroup = true'
        insertafter: '^\s*\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]'

    - name: Reload systemd daemon (if systemd available)
      ansible.builtin.systemd:
        daemon_reload: yes
      when: systemd_available
      ignore_errors: yes

    - name: Enable and start containerd
      ansible.builtin.service:
        name: containerd
        enabled: yes
        state: started
      when: systemd_available
      ignore_errors: yes
      register: containerd_service_result

    - name: Warn if containerd service failed to start
      ansible.builtin.debug:
        msg: "WARNING: containerd service could not be started. This may be normal on non-systemd systems. Service will be started by kubeadm."
      when: 
        - systemd_available
        - containerd_service_result is defined
        - containerd_service_result is failed

    - name: Install kubeadm, kubelet, and kubectl
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
      register: apt_install_result

    - name: Debug - Show apt install result
      ansible.builtin.debug:
        msg:
          - "Apt install changed: {{ apt_install_result.changed }}"
          - "Apt install stdout: {{ apt_install_result.stdout_lines | default([]) }}"
      when: apt_install_result is defined

    - name: Check if binaries exist after installation
      ansible.builtin.stat:
        path: "{{ item }}"
      loop:
        - /usr/bin/kubeadm
        - /usr/bin/kubelet
        - /usr/bin/kubectl
      register: post_install_check

    - name: Debug - Show binary locations after install
      ansible.builtin.debug:
        msg: "{{ item.item }}: {{ 'EXISTS' if item.stat.exists else 'MISSING' }}"
      loop: "{{ post_install_check.results }}"
      loop_control:
        label: "{{ item.item }}"

    - name: Search for binaries in alternate locations
      ansible.builtin.shell: "which {{ item }} || find /usr -name {{ item }} 2>/dev/null || echo 'NOT FOUND'"
      loop:
        - kubeadm
        - kubelet
        - kubectl
      register: binary_search
      when: post_install_check.results | selectattr('stat.exists', 'equalto', false) | list | length > 0
      changed_when: false

    - name: Debug - Show binary search results
      ansible.builtin.debug:
        msg: "{{ item.item }}: {{ item.stdout }}"
      loop: "{{ binary_search.results | default([]) }}"
      loop_control:
        label: "{{ item.item }}"
      when: binary_search is defined and binary_search.results is defined

    - name: Hold Kubernetes packages at current version
      ansible.builtin.dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl

    - name: Enable kubelet service
      ansible.builtin.service:
        name: kubelet
        enabled: yes
      when: systemd_available
      ignore_errors: yes
      register: kubelet_service_result

    - name: Info about kubelet service
      ansible.builtin.debug:
        msg: "Kubelet service {{ 'enabled successfully' if (kubelet_service_result is defined and kubelet_service_result is succeeded) else 'will be managed by kubeadm' }}"

# RHEL/CentOS installation (for future compatibility)
- name: Install Kubernetes on RHEL/CentOS
  when:
    - ansible_os_family == "RedHat"
    - k8s_installation_needed
  block:
    - name: Add Kubernetes yum repository
      ansible.builtin.yum_repository:
        name: kubernetes
        description: Kubernetes
        baseurl: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
        enabled: yes
        gpgcheck: yes
        gpgkey: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key

    - name: Install containerd
      ansible.builtin.yum:
        name: containerd
        state: present

    - name: Create containerd config directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate default containerd configuration
      ansible.builtin.shell: |
        containerd config default > /etc/containerd/config.toml
      args:
        creates: /etc/containerd/config.toml

    - name: Enable SystemdCgroup in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^\s*SystemdCgroup\s*='
        line: '            SystemdCgroup = true'
        insertafter: '^\s*\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options\]'

    - name: Reload systemd daemon (if systemd available)
      ansible.builtin.systemd:
        daemon_reload: yes
      when: systemd_available
      ignore_errors: yes

    - name: Enable and start containerd
      ansible.builtin.service:
        name: containerd
        enabled: yes
        state: started
      when: systemd_available
      ignore_errors: yes

    - name: Install kubeadm, kubelet, and kubectl
      ansible.builtin.yum:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present
        disable_excludes: kubernetes

    - name: Enable kubelet service
      ansible.builtin.service:
        name: kubelet
        enabled: yes
      when: systemd_available
      ignore_errors: yes

- name: Verify installation
  ansible.builtin.command: "{{ item }} --version"
  loop:
    - kubeadm
    - kubelet
    - kubectl
  register: version_check
  changed_when: false
  when: k8s_installation_needed
  ignore_errors: yes

- name: Check if verification failed
  ansible.builtin.set_fact:
    verification_failed: \"{{ version_check.results | selectattr('failed', 'defined') | selectattr('failed', 'equalto', true) | list | length > 0 }}\"
  when:
    - k8s_installation_needed
    - version_check is defined
    - version_check.results is defined

- name: CRITICAL - Installation verification failed
  ansible.builtin.fail:
    msg: |
      ====================================================================
      CRITICAL: Kubernetes binaries installation FAILED!
      ====================================================================
      
      The apt/yum installation appeared to succeed, but the binaries
      are not accessible. This usually means:
      
      1. Running in a container without proper apt/yum
      2. PATH issues preventing binary access
      3. Package installation failed silently
      
      Environment details:
      - OS: {{ ansible_distribution }} {{ ansible_distribution_version }}
      - Systemd available: {{ systemd_available }}
      - Connection type: {{ ansible_connection }}
      
      REQUIRED ACTION:
      Check if masternode is running in a container or restricted environment.
      Binaries must be manually installed or environment must be fixed.
      
      For container environments, binaries should be pre-installed in the
      container image, not via Ansible.
      ====================================================================
  when:
    - k8s_installation_needed
    - verification_failed is defined
    - verification_failed

- name: Display installed versions
  ansible.builtin.debug:
    msg: \"{{ item.stdout }}\"
  loop: \"{{ version_check.results }}\"
  when: 
    - k8s_installation_needed
    - version_check is defined
    - version_check.results is defined
    - not (verification_failed | default(false))

- name: Installation complete
  ansible.builtin.debug:
    msg: "Kubernetes binaries are installed and ready for cluster deployment"
