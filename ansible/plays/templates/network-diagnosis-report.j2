# VMStation Network Diagnosis Report

**Generated:** {{ timestamp }}  
**Diagnosis ID:** {{ diagnosis_timestamp }}

## Executive Summary

This report contains comprehensive diagnostic information for inter-pod communication issues in the VMStation Kubernetes cluster.

### Infrastructure Overview
- **Control Plane:** {{ groups['monitoring_nodes'][0] }}
- **Worker Nodes:** {{ groups['storage_nodes'] | join(', ') }}, {{ groups['compute_nodes'] | join(', ') }}
- **Pod Network CIDR:** 10.244.0.0/16
- **Service CIDR:** 10.96.0.0/12

## Diagnosis Results

### A. CoreDNS Status
- **Location:** `coredns-pods-info.yaml`, `coredns-logs.txt`, `coredns-describe.txt`
- **Key Issues to Check:**
  - Pod readiness status
  - Connection to Kubernetes API (10.96.0.1:443)
  - DNS resolution failures
  - Health probe timeouts

### B. kube-proxy Investigation
- **Location:** `kube-proxy-pods-info.yaml`, `kube-proxy-logs.txt`
- **Automated Actions Taken:**
  - Collected logs from all kube-proxy pods
  - Restarted kube-proxy daemonset if CrashLoopBackOff detected
  - Waited for pods to become ready after restart

### C. iptables & NAT Rules
- **Location:** `iptables-<hostname>.txt` (one per node)
- **Analysis Points:**
  - POSTROUTING MASQUERADE rules
  - KUBE-SERVICES chain configuration
  - IP forwarding and bridge netfilter settings

### D. Flannel/VXLAN Analysis
- **Location:** `flannel-interfaces-<hostname>.txt`, `vxlan-analysis-<hostname>.txt`
- **Traffic Capture Results:**
  - VXLAN UDP port 8472 traffic analysis
  - Network interface configuration
  - Overlay network connectivity tests

### E. Flannel Configuration
- **Location:** `flannel-logs-config.txt`
- **Analysis Points:**
  - Flannel pod logs and error messages
  - DaemonSet configuration and status
  - CNI plugin functionality

### F. DNS Functionality Testing
- **Location:** `dns-test-results.txt`
- **Tests Performed:**
  - External DNS resolution (google.com)
  - Internal DNS resolution (kubernetes.default)
  - Pod-to-pod connectivity tests

## Recommended Next Steps

1. **Review CoreDNS Issues:**
   ```bash
   # Check if CoreDNS can now reach the API server
   kubectl logs -n kube-system -l k8s-app=kube-dns --tail=50
   ```

2. **Verify kube-proxy Functionality:**
   ```bash
   # Confirm kube-proxy is healthy on all nodes
   kubectl get pods -n kube-system -l k8s-app=kube-proxy -o wide
   ```

3. **Test DNS Resolution:**
   ```bash
   # Run a quick DNS test
   kubectl run --rm -i --tty testdns --image=busybox --restart=Never -- nslookup kubernetes.default
   ```

4. **Check VXLAN Traffic:**
   - Review `vxlan-analysis-*.txt` files
   - If no VXLAN packets captured, investigate switch/VLAN configuration
   - Consider MTU issues (flannel.1 should have MTU 1450)

5. **Manual Remediation (if needed):**
   ```bash
   # Restart CoreDNS if still failing
   kubectl rollout restart deployment/coredns -n kube-system
   
   # Check service endpoints
   kubectl get endpoints -n kube-system kube-dns
   
   # Verify network connectivity
   kubectl exec -it <any-pod> -- ping 10.96.0.1
   ```

## Switch/VLAN Checklist (if VXLAN issues persist)

- [ ] Confirm switch ports are in correct VLANs or trunk mode
- [ ] Ensure switch allows UDP 8472 (VXLAN) traffic
- [ ] Check port-security/unknown-MAC blocking
- [ ] Verify MTU settings (should support VXLAN overhead)
- [ ] Review switch ACLs that might block overlay traffic

## Files Generated

{% for node in nodes %}
- `iptables-{{ node }}.txt` - iptables rules for {{ node }}
- `flannel-interfaces-{{ node }}.txt` - network interfaces for {{ node }}  
- `vxlan-analysis-{{ node }}.txt` - VXLAN traffic analysis for {{ node }}
{% endfor %}
- `coredns-pods-info.yaml` - CoreDNS pod status and configuration
- `coredns-logs.txt` - CoreDNS pod logs
- `coredns-describe.txt` - Detailed CoreDNS pod descriptions
- `kube-proxy-pods-info.yaml` - kube-proxy pod status
- `kube-proxy-logs.txt` - kube-proxy pod logs
- `flannel-logs-config.txt` - Flannel logs and configuration
- `dns-test-results.txt` - DNS functionality test results

---

**Generated by:** VMStation Network Diagnosis Playbook  
**Report Location:** `{{ output_dir }}/DIAGNOSIS-REPORT.md`