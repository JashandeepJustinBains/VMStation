# ============================================================================
# Minimal Jellyfin Kubernetes Deployment
# ============================================================================
# This deployment creates a minimal, copy-ready Jellyfin setup that:
# - Uses a Pod (not Deployment) for simplicity
# - Schedules explicitly on node "homelab" (IP 192.168.4.61)
# - Uses hostPath volumes by default (PVC templates available below)
# - Exposes NodePort service for direct access
# - Includes ServiceMonitor for Prometheus Operator integration
# - Does NOT mount /dev/dri by default (optional section at bottom)
#
# Usage:
#   kubectl apply -f jellyfin-minimal.yml
#   kubectl get pods -n jellyfin -o wide
#   kubectl logs -n jellyfin -l app=jellyfin --tail=200
#
# Prerequisites:
#   - Node "homelab" exists in cluster
#   - Host directories exist with correct permissions:
#     - /srv/media (readable by UID 1000) - create with: mkdir -p /srv/media && chown 1000:1000 /srv/media
#     - /var/lib/jellyfin (writable by UID 1000) - create with: mkdir -p /var/lib/jellyfin && chown 1000:1000 /var/lib/jellyfin
#   - For ServiceMonitor: Prometheus Operator must be installed
#   - If node has taints, add appropriate tolerations (see examples below)
# ============================================================================

---
apiVersion: v1
kind: Namespace
metadata:
  name: jellyfin
  labels:
    name: jellyfin
    app: jellyfin

---
apiVersion: v1
kind: Pod
metadata:
  name: jellyfin
  namespace: jellyfin
  labels:
    app: jellyfin
    component: media-server
spec:
  # Use nodeSelector instead of nodeName for more flexibility
  nodeSelector:
    kubernetes.io/hostname: homelab
  
  # OPTIONAL: Add tolerations if the target node has taints
  # tolerations:
  # - key: "node-role.kubernetes.io/storage"
  #   operator: "Equal"
  #   value: "true"
  #   effect: "NoSchedule"
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "storage"
  #   effect: "NoSchedule"
  
  # Security context: run as non-root user
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  
  containers:
  - name: jellyfin
    image: jellyfin/jellyfin:latest
    imagePullPolicy: IfNotPresent
    
    ports:
    - name: http
      containerPort: 8096
      protocol: TCP
    - name: https
      containerPort: 8920
      protocol: TCP
    
    env:
    - name: JELLYFIN_PublishedServerUrl
      value: "http://192.168.4.61:30096"
    
    # Resource limits for basic operation
    resources:
      requests:
        memory: "512Mi"
        cpu: "200m"
      limits:
        memory: "2Gi"
        cpu: "1000m"
    
    # Volume mounts: media (read-only), config (read-write)
    volumeMounts:
    - name: media
      mountPath: /media
      readOnly: true
    - name: config
      mountPath: /config
      readOnly: false
    
    # Health checks
    livenessProbe:
      httpGet:
        path: /health
        port: 8096
      initialDelaySeconds: 120
      periodSeconds: 30
      timeoutSeconds: 10
      failureThreshold: 3
    
    readinessProbe:
      httpGet:
        path: /health
        port: 8096
      initialDelaySeconds: 60
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 3
    
    # Security context for container
    securityContext:
      allowPrivilegeEscalation: false
      readOnlyRootFilesystem: false  # Jellyfin needs to write temp files
      capabilities:
        drop:
        - ALL
  
  # Volumes: using hostPath by default (see PVC templates below for alternatives)
  volumes:
  - name: media
    hostPath:
      path: /srv/media
      type: Directory
  - name: config
    hostPath:
      path: /var/lib/jellyfin
      type: DirectoryOrCreate
  
  restartPolicy: Always

---
apiVersion: v1
kind: Service
metadata:
  name: jellyfin-service
  namespace: jellyfin
  labels:
    app: jellyfin
    component: media-server
spec:
  type: NodePort
  selector:
    app: jellyfin
    component: media-server
  ports:
  - name: http
    port: 8096
    targetPort: 8096
    nodePort: 30096
    protocol: TCP
  - name: https
    port: 8920
    targetPort: 8920
    nodePort: 30920
    protocol: TCP

---
# ServiceMonitor for Prometheus Operator integration
# NOTE: Requires Prometheus Operator to be installed in the cluster
# If operator is not present, this resource will be ignored
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: jellyfin-metrics
  namespace: jellyfin
  labels:
    app: jellyfin
    component: media-server
    release: kube-prometheus-stack  # Common label for Prometheus Operator
spec:
  selector:
    matchLabels:
      app: jellyfin
      component: media-server
  endpoints:
  - port: http
    interval: 30s
    path: /System/Info/Public  # Jellyfin API endpoint for basic metrics
    scrapeTimeout: 10s
  namespaceSelector:
    matchNames:
    - jellyfin

# ============================================================================
# OPTIONAL: PVC Templates (uncomment and customize as needed)
# ============================================================================
# To use PVCs instead of hostPath volumes:
# 1. Uncomment the PVCs below
# 2. Comment out the hostPath volumes in the Pod spec above
# 3. Uncomment the PVC volume mounts in the Pod spec above
# 4. Create the corresponding PersistentVolumes manually or use dynamic provisioning

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: jellyfin-media-pvc
#   namespace: jellyfin
#   labels:
#     app: jellyfin
#     component: media
# spec:
#   accessModes:
#   - ReadWriteMany
#   resources:
#     requests:
#       storage: 100Ti  # Adjust size as needed
#   # storageClassName: your-storage-class  # Specify if using dynamic provisioning

# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: jellyfin-config-pvc
#   namespace: jellyfin
#   labels:
#     app: jellyfin
#     component: config
# spec:
#   accessModes:
#   - ReadWriteOnce
#   resources:
#     requests:
#       storage: 50Gi  # Adjust size as needed
#   # storageClassName: your-storage-class  # Specify if using dynamic provisioning

# ============================================================================
# OPTIONAL: Hardware Acceleration with /dev/dri (uncomment to enable)
# ============================================================================
# WARNING: Only enable if the target node has appropriate GPU/hardware acceleration
# and you've verified /dev/dri exists and is accessible.
#
# To enable hardware acceleration:
# 1. Uncomment the volume and volumeMount sections below
# 2. Add them to the Pod spec above
# 3. Verify the target node has /dev/dri devices
# 4. Consider security implications of device access

# Additional volumeMount for jellyfin container:
# - name: dev-dri
#   mountPath: /dev/dri
#   readOnly: false

# Additional volume for Pod spec:
# - name: dev-dri
#   hostPath:
#     path: /dev/dri
#     type: Directory

# ============================================================================
# OPTIONAL: Metrics Exporter Sidecar (for enhanced monitoring)
# ============================================================================
# Jellyfin doesn't expose Prometheus metrics by default.
# To add metrics collection, deploy a lightweight exporter sidecar:
#
# Additional container in Pod spec:
# - name: jellyfin-exporter
#   image: prometheus/jmx-exporter:latest
#   ports:
#   - name: metrics
#     containerPort: 9092
#     protocol: TCP
#   # Configure exporter to scrape Jellyfin API and expose as /metrics
#
# Then update ServiceMonitor endpoint to:
# - port: metrics
#   interval: 30s
#   path: /metrics
#   scrapeTimeout: 10s