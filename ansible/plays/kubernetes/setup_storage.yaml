---
# Storage Setup for Kubernetes Nodes
# Ensures proper storage directories exist for each node type
- name: Setup storage directories for Kubernetes nodes
  hosts: all
  become: true
  vars:
    storage_paths:
      monitoring_nodes: /srv/monitoring_data
      compute_nodes: /mnt/storage/kubernetes
      storage_nodes: /var/lib/kubernetes
      
  tasks:
    - name: Create storage directory for monitoring nodes
      file:
        path: "{{ storage_paths.monitoring_nodes }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: inventory_hostname in groups['monitoring_nodes']
      
    - name: Ensure /mnt/storage exists for compute nodes
      file:
        path: /mnt/storage
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: inventory_hostname in groups['compute_nodes']
      
    - name: Create Kubernetes storage directory for compute nodes
      file:
        path: "{{ storage_paths.compute_nodes }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: inventory_hostname in groups['compute_nodes']
      
    - name: Create Kubernetes storage directory for storage nodes
      file:
        path: "{{ storage_paths.storage_nodes }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: inventory_hostname in groups['storage_nodes']
      
    - name: Set up local-path storage provisioner directories
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ storage_paths[group_names[0]] }}/local-path-provisioner"
        - "{{ storage_paths[group_names[0]] }}/prometheus"
        - "{{ storage_paths[group_names[0]] }}/grafana"
        - "{{ storage_paths[group_names[0]] }}/loki"
        - "{{ storage_paths[group_names[0]] }}/alertmanager"
      when: group_names[0] in storage_paths.keys()

- name: Configure local-path storage class
  hosts: monitoring_nodes
  become: true
  vars:
    local_path_base: "{{ storage_paths.monitoring_nodes | default('/var/lib/kubernetes') }}/local-path-provisioner"
  tasks:
    - name: Ensure local-path provisioner base path exists and is writable
      file:
        path: "{{ local_path_base }}"
        state: directory
        owner: root
        group: root
        mode: '0777'

    - name: Ensure kubernetes Python package is available (Debian package preferred)
      apt:
        name: python3-kubernetes
        state: present
        update_cache: yes
      when: ansible_facts['pkg_mgr'] == 'apt' or ansible_pkg_mgr is defined and ansible_pkg_mgr == 'apt'

    - name: Fallback - install kubernetes Python library via pip if apt package missing
      pip:
        name: kubernetes
        state: present
        executable: pip3
      become: true
      when: ansible_facts['pkg_mgr'] is not defined or ansible_facts['pkg_mgr'] != 'apt'

    - name: Create local-path storage class configuration
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: storage.k8s.io/v1
          kind: StorageClass
          metadata:
            name: local-path
            annotations:
              storageclass.kubernetes.io/is-default-class: "true"
          provisioner: rancher.io/local-path
          volumeBindingMode: WaitForFirstConsumer
          reclaimPolicy: Delete
        kubeconfig: /root/.kube/config
      when: ansible_default_ipv4.address is defined

    - name: Deploy local-path provisioner
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: local-path-storage
        kubeconfig: /root/.kube/config

    - name: Apply local-path provisioner manifest
      shell: |
        kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml
      environment:
        KUBECONFIG: /root/.kube/config
      register: provisioner_result
      changed_when: "'created' in provisioner_result.stdout or 'configured' in provisioner_result.stdout"

    - name: Ensure provisioner base path and created volumes are writable (recursive)
      file:
        path: "{{ local_path_base }}"
        state: directory
        recurse: yes
        owner: root
        group: root
        mode: '0777'
      when: provisioner_result is defined

    - name: Configure local-path provisioner config map
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ConfigMap
          metadata:
            name: local-path-config
            namespace: local-path-storage
          data:
            config.json: "{{ {'nodePathMap':[{'node':'DEFAULT_PATH_FOR_NON_LISTED_NODES','paths':[ local_path_base ]}]} | to_nice_json }}"
            setup: |
              #!/bin/sh
              set -eu
              mkdir -m 0777 -p "$VOL_DIR"
            teardown: |
              #!/bin/sh
              set -eu
              rm -rf "$VOL_DIR"
        kubeconfig: /root/.kube/config