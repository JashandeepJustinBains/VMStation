---
# Deploy Drone CI/CD with Gitea on compute nodes
- name: Deploy Drone CI/CD with Gitea
  hosts: compute_nodes
  become: true
  vars:
    drone_namespace: "{{ drone_namespace | default('localhost.localdomain') }}"
    drone_server_nodeport: "{{ drone_server_nodeport | default(30080) }}"
    drone_gitea_nodeport: "{{ drone_gitea_nodeport | default(30300) }}"
    drone_storage_size: "{{ drone_storage_size | default('5Gi') }}"
    
  tasks:
    - name: Ensure kubernetes Python package is available
      package:
        name: python3-kubernetes
        state: present
      when: ansible_facts['pkg_mgr'] == 'apt'

    - name: Fallback - install kubernetes Python library via pip
      pip:
        name: kubernetes
        state: present
        executable: pip3
      when: ansible_facts['pkg_mgr'] != 'apt'

    - name: Create drone namespace
      kubernetes.core.k8s:
        name: "{{ drone_namespace }}"
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Generate random RPC secret for Drone
      set_fact:
        drone_rpc_secret: "{{ lookup('password', '/tmp/drone_rpc_secret length=32 chars=ascii_letters,digits') }}"

    - name: Deploy Gitea (Git server for Drone)
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: gitea
            namespace: "{{ drone_namespace }}"
            labels:
              app: gitea
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: gitea
            template:
              metadata:
                labels:
                  app: gitea
              spec:
                nodeSelector:
                  kubernetes.io/hostname: "{{ ansible_hostname }}"
                containers:
                - name: gitea
                  image: gitea/gitea:1.21
                  ports:
                  - containerPort: 3000
                    name: http
                  - containerPort: 22
                    name: ssh
                  env:
                  - name: USER_UID
                    value: "1000"
                  - name: USER_GID
                    value: "1000"
                  - name: GITEA__database__DB_TYPE
                    value: sqlite3
                  - name: GITEA__server__DOMAIN
                    value: "{{ ansible_default_ipv4.address }}"
                  - name: GITEA__server__SSH_DOMAIN
                    value: "{{ ansible_default_ipv4.address }}"
                  - name: GITEA__server__ROOT_URL
                    value: "http://{{ ansible_default_ipv4.address }}:{{ drone_gitea_nodeport }}/"
                  resources:
                    requests:
                      memory: 512Mi
                      cpu: 200m
                    limits:
                      memory: 1Gi
                      cpu: 500m
                  volumeMounts:
                  - name: gitea-data
                    mountPath: /data
                volumes:
                - name: gitea-data
                  persistentVolumeClaim:
                    claimName: gitea-pvc
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Create Gitea PVC
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: gitea-pvc
            namespace: "{{ drone_namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: "{{ storage_class | default('local-path') }}"
            resources:
              requests:
                storage: "{{ drone_storage_size }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Create Gitea service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: gitea
            namespace: "{{ drone_namespace }}"
            labels:
              app: gitea
          spec:
            type: NodePort
            ports:
            - port: 3000
              targetPort: 3000
              nodePort: "{{ drone_gitea_nodeport }}"
              name: http
            - port: 22
              targetPort: 22
              name: ssh
            selector:
              app: gitea
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Deploy Drone server
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: drone-server
            namespace: "{{ drone_namespace }}"
            labels:
              app: drone-server
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: drone-server
            template:
              metadata:
                labels:
                  app: drone-server
              spec:
                nodeSelector:
                  kubernetes.io/hostname: "{{ ansible_hostname }}"
                containers:
                - name: drone-server
                  image: drone/drone:2.20
                  ports:
                  - containerPort: 80
                    name: http
                  - containerPort: 443
                    name: https
                  env:
                  - name: DRONE_GITEA_SERVER
                    value: "http://{{ ansible_default_ipv4.address }}:{{ drone_gitea_nodeport }}"
                  - name: DRONE_GITEA_CLIENT_ID
                    value: "drone"
                  - name: DRONE_GITEA_CLIENT_SECRET
                    value: "drone-secret"
                  - name: DRONE_RPC_SECRET
                    value: "{{ drone_rpc_secret }}"
                  - name: DRONE_SERVER_HOST
                    value: "{{ ansible_default_ipv4.address }}:{{ drone_server_nodeport }}"
                  - name: DRONE_SERVER_PROTO
                    value: "http"
                  - name: DRONE_USER_CREATE
                    value: "username:admin,admin:true"
                  resources:
                    requests:
                      memory: 256Mi
                      cpu: 100m
                    limits:
                      memory: 512Mi
                      cpu: 200m
                  volumeMounts:
                  - name: drone-data
                    mountPath: /data
                volumes:
                - name: drone-data
                  persistentVolumeClaim:
                    claimName: drone-server-pvc
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Create Drone server PVC
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: PersistentVolumeClaim
          metadata:
            name: drone-server-pvc
            namespace: "{{ drone_namespace }}"
          spec:
            accessModes:
              - ReadWriteOnce
            storageClassName: "{{ storage_class | default('local-path') }}"
            resources:
              requests:
                storage: 2Gi
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Create Drone server service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: drone-server
            namespace: "{{ drone_namespace }}"
            labels:
              app: drone-server
          spec:
            type: NodePort
            ports:
            - port: 80
              targetPort: 80
              nodePort: "{{ drone_server_nodeport }}"
              name: http
            selector:
              app: drone-server
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Deploy Drone runner
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: apps/v1
          kind: Deployment
          metadata:
            name: drone-runner
            namespace: "{{ drone_namespace }}"
            labels:
              app: drone-runner
          spec:
            replicas: 1
            selector:
              matchLabels:
                app: drone-runner
            template:
              metadata:
                labels:
                  app: drone-runner
              spec:
                nodeSelector:
                  kubernetes.io/hostname: "{{ ansible_hostname }}"
                containers:
                - name: drone-runner
                  image: drone/drone-runner-kubernetes:1.0.0
                  env:
                  - name: DRONE_RPC_PROTO
                    value: "http"
                  - name: DRONE_RPC_HOST
                    value: "drone-server.{{ drone_namespace }}.svc.cluster.local"
                  - name: DRONE_RPC_SECRET
                    value: "{{ drone_rpc_secret }}"
                  - name: DRONE_NAMESPACE_DEFAULT
                    value: "{{ drone_namespace }}"
                  resources:
                    requests:
                      memory: 128Mi
                      cpu: 50m
                    limits:
                      memory: 256Mi
                      cpu: 100m
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Create ServiceAccount for Drone runner
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: ServiceAccount
          metadata:
            name: drone-runner
            namespace: "{{ drone_namespace }}"
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Create ClusterRole for Drone runner
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          metadata:
            name: drone-runner
          rules:
          - apiGroups: [""]
            resources: ["pods", "pods/log", "secrets"]
            verbs: ["get", "list", "create", "delete", "watch"]
          - apiGroups: [""]
            resources: ["pods/exec"]
            verbs: ["create"]
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Create ClusterRoleBinding for Drone runner
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRoleBinding
          metadata:
            name: drone-runner
          subjects:
          - kind: ServiceAccount
            name: drone-runner
            namespace: "{{ drone_namespace }}"
          roleRef:
            kind: ClusterRole
            name: drone-runner
            apiGroup: rbac.authorization.k8s.io
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Wait for Gitea to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ drone_namespace }}"
        label_selectors:
          - app=gitea
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Wait for Drone server to be ready
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        namespace: "{{ drone_namespace }}"
        label_selectors:
          - app=drone-server
        wait: true
        wait_condition:
          type: Ready
          status: "True"
        wait_timeout: 300
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"

    - name: Create ServiceMonitor for Drone metrics
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: monitoring.coreos.com/v1
          kind: ServiceMonitor
          metadata:
            name: drone-server
            namespace: "{{ monitoring_namespace | default('monitoring') }}"
            labels:
              app: drone-server
          spec:
            selector:
              matchLabels:
                app: drone-server
            namespaceSelector:
              matchNames:
                - "{{ drone_namespace }}"
            endpoints:
            - port: http
              interval: 30s
              path: /metrics
        kubeconfig: /etc/rancher/k3s/k3s.yaml
      delegate_to: "{{ groups['monitoring_nodes'][0] }}"
      when: monitoring_namespace is defined

    - name: Display Drone CI/CD access information
      debug:
        msg: |
          Drone CI/CD with Gitea deployed successfully!
          
          Access Information:
          - Gitea (Git Server): http://{{ ansible_default_ipv4.address }}:{{ drone_gitea_nodeport }}
          - Drone CI/CD: http://{{ ansible_default_ipv4.address }}:{{ drone_server_nodeport }}
          
          Setup Instructions:
          1. Access Gitea at http://{{ ansible_default_ipv4.address }}:{{ drone_gitea_nodeport }}
          2. Complete Gitea initial setup (create admin user)
          3. Create OAuth2 application in Gitea:
             - Name: drone
             - Redirect URI: http://{{ ansible_default_ipv4.address }}:{{ drone_server_nodeport }}/login
          4. Update Drone configuration with Gitea OAuth2 credentials
          5. Access Drone at http://{{ ansible_default_ipv4.address }}:{{ drone_server_nodeport }}
          
          Monitoring:
          - Namespace: {{ drone_namespace }}
          - Pods will be monitored by existing Prometheus/Grafana stack
          - Logs collected by Loki via Promtail
          
          RPC Secret (save this): {{ drone_rpc_secret }}