---
# Install and configure cert-manager for TLS certificate management
- name: Install cert-manager on Kubernetes cluster
  hosts: monitoring_nodes
  become: true
  vars:
    cert_manager_version: "v1.13.3"
    # Controls
    vmstation_manage_cert_manager: true        # if false, skip installing cert-manager
    vmstation_create_tls_certs: false         # if false, do not create ClusterIssuers/Certificates
    vmstation_cleanup_tls_on_deploy: true     # if true, remove existing TLS resources/secrets at start of play
    
  tasks:
  # ... cleanup block moved below after Python prereqs to ensure kubernetes.core.k8s works

    - name: Ensure kubernetes Python package is available (Debian package preferred)
      apt:
        name: python3-kubernetes
        state: present
        update_cache: yes
      when: ansible_facts['pkg_mgr'] == 'apt' or ansible_pkg_mgr is defined and ansible_pkg_mgr == 'apt'

    - name: Fallback - install kubernetes Python library via pip if apt package missing
      pip:
        name: kubernetes
        state: present
        executable: pip3
      become: true
      when: ansible_facts['pkg_mgr'] is not defined or ansible_facts['pkg_mgr'] != 'apt'

    - name: Cleanup existing VMStation TLS certificates and issuers (optional)
      when: vmstation_cleanup_tls_on_deploy | bool
      block:
        - name: Delete monitoring service Certificates (if present)
          kubernetes.core.k8s:
            state: absent
            api_version: cert-manager.io/v1
            kind: Certificate
            name: "{{ item }}-tls"
            namespace: monitoring
            kubeconfig: /root/.kube/config
          loop:
            - grafana
            - prometheus
            - loki
          ignore_errors: yes

        - name: Delete VMStation CA Certificate (if present)
          kubernetes.core.k8s:
            state: absent
            api_version: cert-manager.io/v1
            kind: Certificate
            name: vmstation-ca
            namespace: cert-manager
            kubeconfig: /root/.kube/config
          ignore_errors: yes

        - name: Delete VMStation ClusterIssuers (if present)
          kubernetes.core.k8s:
            state: absent
            api_version: cert-manager.io/v1
            kind: ClusterIssuer
            name: "{{ item }}"
            kubeconfig: /root/.kube/config
          loop:
            - selfsigned-cluster-issuer
            - vmstation-ca-issuer
          ignore_errors: yes

        - name: Delete VMStation CA secret (if present)
          kubernetes.core.k8s:
            state: absent
            api_version: v1
            kind: Secret
            name: vmstation-ca-secret
            namespace: cert-manager
            kubeconfig: /root/.kube/config
          ignore_errors: yes

    - name: Create cert-manager namespace
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.k8s:
        name: cert-manager
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /root/.kube/config

    - name: Install cert-manager CRDs
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.k8s:
        state: present
        src: https://github.com/cert-manager/cert-manager/releases/download/{{ cert_manager_version }}/cert-manager.crds.yaml
        kubeconfig: /root/.kube/config

    - name: Wait for cert-manager CRDs to be available
      when: vmstation_manage_cert_manager | bool
      command: kubectl get crd certificates.cert-manager.io --kubeconfig /root/.kube/config
      register: cert_crd_check
      retries: 3
      delay: 5
      until: cert_crd_check.rc == 0

    - name: Add cert-manager Helm repository
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io
        force_update: yes

    - name: Update Helm repositories to ensure latest charts
      when: vmstation_manage_cert_manager | bool
      command: helm repo update
      register: helm_repo_update
      retries: 3
      delay: 10
      until: helm_repo_update.rc == 0

    - name: Check cluster readiness before cert-manager installation
      when: vmstation_manage_cert_manager | bool
      block:
        - name: Check nodes are ready
          command: kubectl get nodes --kubeconfig /root/.kube/config --no-headers
          register: nodes_check
          retries: 3
          delay: 10
          until: nodes_check.rc == 0

        - name: Verify at least one node is Ready
          fail:
            msg: "No Ready nodes found in cluster. Nodes status: {{ nodes_check.stdout_lines }}"
          when: "'Ready' not in nodes_check.stdout"

        - name: Check if cert-manager namespace already has pods (potential conflict)
          command: kubectl get pods -n cert-manager --kubeconfig /root/.kube/config --no-headers
          register: existing_cert_manager_pods
          ignore_errors: yes

        - name: Show existing cert-manager pods if any
          debug:
            msg: "Found existing cert-manager pods: {{ existing_cert_manager_pods.stdout_lines }}"
          when: existing_cert_manager_pods.rc == 0 and existing_cert_manager_pods.stdout_lines | length > 0

        - name: Ensure critical monitoring directories exist before cert-manager installation
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
            owner: root
            group: root
          loop:
            - /srv/monitoring_data
            - /srv/monitoring_data/local-path-provisioner
            - /var/log
            - /var/promtail
            - /opt/promtail
          become: true

        - name: Verify directory permissions for cert-manager deployment
          stat:
            path: "{{ item }}"
          register: dir_checks
          loop:
            - /srv/monitoring_data
            - /srv/monitoring_data/local-path-provisioner
          failed_when: not dir_checks.stat.exists or not dir_checks.stat.isdir

        - name: Display directory status for debugging
          debug:
            msg: |
              Critical directories status:
              /srv/monitoring_data: {{ 'EXISTS' if dir_checks.results[0].stat.exists else 'MISSING' }}
              /srv/monitoring_data/local-path-provisioner: {{ 'EXISTS' if dir_checks.results[1].stat.exists else 'MISSING' }}
              Permissions /srv/monitoring_data: {{ dir_checks.results[0].stat.mode if dir_checks.results[0].stat.exists else 'N/A' }}

    - name: Clean up any previous failed cert-manager installation
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.helm:
        name: cert-manager
        release_namespace: cert-manager
        state: absent
        kubeconfig: /root/.kube/config
        wait: true
        timeout: 300s
      ignore_errors: yes

    - name: Install cert-manager using Helm (with retry logic)
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: yes
        values:
          installCRDs: false
          prometheus:
            enabled: true
          global:
            imagePullPolicy: IfNotPresent
          image:
            pullPolicy: IfNotPresent
          webhook:
            image:
              pullPolicy: IfNotPresent
            resources:
              requests:
                cpu: 10m
                memory: 32Mi
          cainjector:
            image:
              pullPolicy: IfNotPresent
            resources:
              requests:
                cpu: 10m
                memory: 32Mi
          resources:
            requests:
              cpu: 10m
              memory: 32Mi
        kubeconfig: /root/.kube/config
        wait: true
        timeout: 900s
        atomic: false
        force: true
      register: helm_install_result
      retries: 2
      delay: 30
      until: helm_install_result is succeeded

    - name: Wait for cert-manager deployments to be ready
      when: vmstation_manage_cert_manager | bool
      vars:
        cert_manager_deployments:
          - cert-manager
          - cert-manager-webhook
          - cert-manager-cainjector
      block:
        - name: Wait for rollout status of cert-manager deployments
          command: kubectl -n cert-manager rollout status deployment/{{ item }} --kubeconfig /root/.kube/config --timeout=900s
          loop: "{{ cert_manager_deployments }}"
          register: rollout_status
          failed_when: rollout_status is failed and rollout_status.rc != 0
          retries: 2
          delay: 60
          until: rollout_status.rc == 0

        - name: Debug cert-manager deployment status on failure
          when: rollout_status is failed
          block:
            - name: Get cert-manager deployment status
              command: kubectl -n cert-manager get deployments --kubeconfig /root/.kube/config
              register: deployment_status
              ignore_errors: yes

            - name: Get cert-manager pod status
              command: kubectl -n cert-manager get pods --kubeconfig /root/.kube/config
              register: pod_status
              ignore_errors: yes

            - name: Show deployment and pod status
              debug:
                msg: |
                  Deployment Status: {{ deployment_status.stdout_lines }}
                  Pod Status: {{ pod_status.stdout_lines }}

    - name: Create self-signed cluster issuer for internal certificates
      when: vmstation_create_tls_certs | bool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: selfsigned-cluster-issuer
          spec:
            selfSigned: {}
        kubeconfig: /root/.kube/config

    - name: Create CA certificate for VMStation cluster
      when: vmstation_create_tls_certs | bool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: vmstation-ca
            namespace: cert-manager
          spec:
            isCA: true
            commonName: VMStation Root CA
            secretName: vmstation-ca-secret
            privateKey:
              algorithm: ECDSA
              size: 256
            issuerRef:
              name: selfsigned-cluster-issuer
              kind: ClusterIssuer
              group: cert-manager.io
        kubeconfig: /root/.kube/config

    - name: Create VMStation CA cluster issuer
      when: vmstation_create_tls_certs | bool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: vmstation-ca-issuer
          spec:
            ca:
              secretName: vmstation-ca-secret
        kubeconfig: /root/.kube/config

    - name: Create certificates for monitoring services
      when: vmstation_create_tls_certs | bool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: "{{ item.name }}-tls"
            namespace: monitoring
          spec:
            secretName: "{{ item.name }}-tls"
            issuerRef:
              name: vmstation-ca-issuer
              kind: ClusterIssuer
            commonName: "{{ item.common_name }}"
            dnsNames:
              - "{{ item.common_name }}"
              - "{{ item.name }}.monitoring.svc.cluster.local"
              - "{{ item.name }}.monitoring"
        kubeconfig: /root/.kube/config
      loop:
        - name: grafana
          common_name: grafana.vmstation.local
        - name: prometheus
          common_name: prometheus.vmstation.local
        - name: loki
          common_name: loki.vmstation.local