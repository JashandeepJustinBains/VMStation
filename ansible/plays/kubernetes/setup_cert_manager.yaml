---
# Install and configure cert-manager for TLS certificate management
- name: Install cert-manager on Kubernetes cluster
  hosts: monitoring_nodes
  become: true
  vars:
    cert_manager_version: "v1.13.3"
    # Controls
    vmstation_manage_cert_manager: true        # if false, skip installing cert-manager
    vmstation_create_tls_certs: false         # if false, do not create ClusterIssuers/Certificates
    vmstation_cleanup_tls_on_deploy: true     # if true, remove existing TLS resources/secrets at start of play
    
  tasks:
  # ... cleanup block moved below after Python prereqs to ensure kubernetes.core.k8s works

    - name: Ensure kubernetes Python package is available (Debian package preferred)
      apt:
        name: python3-kubernetes
        state: present
        update_cache: yes
      when: ansible_facts['pkg_mgr'] == 'apt' or ansible_pkg_mgr is defined and ansible_pkg_mgr == 'apt'

    - name: Fallback - install kubernetes Python library via pip if apt package missing
      pip:
        name: kubernetes
        state: present
        executable: pip3
      become: true
      when: ansible_facts['pkg_mgr'] is not defined or ansible_facts['pkg_mgr'] != 'apt'

    - name: Cleanup existing VMStation TLS certificates and issuers (optional)
      when: vmstation_cleanup_tls_on_deploy | bool
      block:
        - name: Delete monitoring service Certificates (if present)
          kubernetes.core.k8s:
            state: absent
            api_version: cert-manager.io/v1
            kind: Certificate
            name: "{{ item }}-tls"
            namespace: monitoring
            kubeconfig: /root/.kube/config
          loop:
            - grafana
            - prometheus
            - loki
          ignore_errors: yes

        - name: Delete VMStation CA Certificate (if present)
          kubernetes.core.k8s:
            state: absent
            api_version: cert-manager.io/v1
            kind: Certificate
            name: vmstation-ca
            namespace: cert-manager
            kubeconfig: /root/.kube/config
          ignore_errors: yes

        - name: Delete VMStation ClusterIssuers (if present)
          kubernetes.core.k8s:
            state: absent
            api_version: cert-manager.io/v1
            kind: ClusterIssuer
            name: "{{ item }}"
            kubeconfig: /root/.kube/config
          loop:
            - selfsigned-cluster-issuer
            - vmstation-ca-issuer
          ignore_errors: yes

        - name: Delete VMStation CA secret (if present)
          kubernetes.core.k8s:
            state: absent
            api_version: v1
            kind: Secret
            name: vmstation-ca-secret
            namespace: cert-manager
            kubeconfig: /root/.kube/config
          ignore_errors: yes

    - name: Create cert-manager namespace
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.k8s:
        name: cert-manager
        api_version: v1
        kind: Namespace
        state: present
        kubeconfig: /root/.kube/config

    - name: Install cert-manager CRDs
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.k8s:
        state: present
        src: https://github.com/cert-manager/cert-manager/releases/download/{{ cert_manager_version }}/cert-manager.crds.yaml
        kubeconfig: /root/.kube/config

    - name: Wait for cert-manager CRDs to be available
      when: vmstation_manage_cert_manager | bool
      command: kubectl get crd certificates.cert-manager.io --kubeconfig /root/.kube/config
      register: cert_crd_check
      retries: 3
      delay: 5
      until: cert_crd_check.rc == 0

    - name: Add cert-manager Helm repository
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.helm_repository:
        name: jetstack
        repo_url: https://charts.jetstack.io
        force_update: yes

    - name: Update Helm repositories to ensure latest charts
      when: vmstation_manage_cert_manager | bool
      command: helm repo update
      register: helm_repo_update
      retries: 3
      delay: 10
      until: helm_repo_update.rc == 0

    - name: Enhanced cluster readiness and connectivity checks
      when: vmstation_manage_cert_manager | bool
      block:
        - name: Check nodes are ready
          command: kubectl get nodes --kubeconfig /root/.kube/config --no-headers
          register: nodes_check
          retries: 3
          delay: 10
          until: nodes_check.rc == 0

        - name: Verify at least one node is Ready
          fail:
            msg: "No Ready nodes found in cluster. Nodes status: {{ nodes_check.stdout_lines }}"
          when: "'Ready' not in nodes_check.stdout"

        - name: Check cluster resources and readiness
          block:
            - name: Get node resource usage
              command: kubectl top nodes --kubeconfig /root/.kube/config --no-headers
              register: node_resources
              ignore_errors: yes

            - name: Check cluster component health
              command: kubectl get componentstatuses --kubeconfig /root/.kube/config
              register: component_health
              ignore_errors: yes

            - name: Show cluster resource status
              debug:
                msg: |
                  Node Resources: {{ node_resources.stdout_lines | default(['Unable to get node resources']) }}
                  Component Health: {{ component_health.stdout_lines | default(['Unable to get component status']) }}

        - name: Test internet connectivity for chart downloads
          block:
            - name: Test connectivity to Helm chart repository
              uri:
                url: https://charts.jetstack.io/index.yaml
                method: GET
                timeout: 30
              register: jetstack_connectivity
              ignore_errors: yes

            - name: Test connectivity to container registry
              uri:
                url: https://registry-1.docker.io/v2/
                method: GET
                timeout: 30
              register: dockerhub_connectivity
              ignore_errors: yes
              # Note: Docker Hub returns 401 for unauthenticated requests, which indicates successful connectivity

            - name: Show connectivity test results
              debug:
                msg: |
                  Jetstack Charts: {{ 'OK' if jetstack_connectivity.status | default(0) == 200 else 'FAILED' }}
                  Docker Hub: {{ 'OK' if dockerhub_connectivity.status | default(0) in [200, 401] else 'FAILED' }}

            - name: Warn about connectivity issues
              debug:
                msg: |
                  WARNING: Network connectivity issues detected!
                  - Jetstack Charts: {{ jetstack_connectivity.status | default('N/A') }}
                  - Docker Hub: {{ dockerhub_connectivity.status | default('N/A') }}
                  This may cause cert-manager installation to hang or fail.
              when: >
                (jetstack_connectivity.status | default(0) != 200) or
                (dockerhub_connectivity.status | default(0) not in [200, 401])

        - name: Check if cert-manager namespace already has pods (potential conflict)
          command: kubectl get pods -n cert-manager --kubeconfig /root/.kube/config --no-headers
          register: existing_cert_manager_pods
          ignore_errors: yes

        - name: Show existing cert-manager pods if any
          debug:
            msg: "Found existing cert-manager pods: {{ existing_cert_manager_pods.stdout_lines }}"
          when: existing_cert_manager_pods.rc == 0 and existing_cert_manager_pods.stdout_lines | length > 0

        - name: Check container runtime status on nodes
          block:
            - name: Get container runtime info
              command: kubectl get nodes -o wide --kubeconfig /root/.kube/config
              register: runtime_info

            - name: Show runtime information
              debug:
                msg: "Node runtime info: {{ runtime_info.stdout_lines }}"

    - name: Clean up any previous failed cert-manager installation
      when: vmstation_manage_cert_manager | bool
      kubernetes.core.helm:
        name: cert-manager
        release_namespace: cert-manager
        state: absent
        kubeconfig: /root/.kube/config
        wait: true
        timeout: 300s
      ignore_errors: yes

    - name: Install cert-manager using Helm (with enhanced retry and debugging)
      when: vmstation_manage_cert_manager | bool
      block:
        - name: Pre-installation debugging info
          debug:
            msg: |
              About to install cert-manager with:
              - Timeout: 120s (2 minutes)
              - Retries: 3 attempts with 60s delays
              - Image pull policy: IfNotPresent
              - Resource requests: cpu=10m, memory=32Mi per component
              - Progress monitoring: enabled

        - name: Create monitoring indicator file for site.yaml integration
          file:
            path: /tmp/vmstation_cert_manager_installing
            state: touch
            mode: '0644'
          ignore_errors: yes

        - name: Attempt cert-manager Helm installation
          kubernetes.core.helm:
            name: cert-manager
            chart_ref: jetstack/cert-manager
            release_namespace: cert-manager
            create_namespace: yes
            values:
              installCRDs: false
              prometheus:
                enabled: true
              global:
                imagePullPolicy: IfNotPresent
              image:
                pullPolicy: IfNotPresent
              webhook:
                image:
                  pullPolicy: IfNotPresent
                resources:
                  requests:
                    cpu: 10m
                    memory: 32Mi
                  limits:
                    cpu: 100m
                    memory: 128Mi
              cainjector:
                image:
                  pullPolicy: IfNotPresent
                resources:
                  requests:
                    cpu: 10m
                    memory: 32Mi
                  limits:
                    cpu: 100m
                    memory: 128Mi
              resources:
                requests:
                  cpu: 10m
                  memory: 32Mi
                limits:
                  cpu: 100m
                  memory: 128Mi
            kubeconfig: /root/.kube/config
            wait: true
            timeout: 120s
            atomic: false
            force: true
          register: helm_install_result
          retries: 3
          delay: 60
          until: helm_install_result is succeeded

        - name: Installation success message
          debug:
            msg: "✓ cert-manager Helm installation completed successfully!"

        - name: Remove monitoring indicator file
          file:
            path: /tmp/vmstation_cert_manager_installing
            state: absent
          ignore_errors: yes

      rescue:
        - name: Remove monitoring indicator file on failure
          file:
            path: /tmp/vmstation_cert_manager_installing
            state: absent
          ignore_errors: yes

        - name: Debug failed cert-manager installation
          block:
            - name: Get Helm release status
              command: helm status cert-manager -n cert-manager --kubeconfig /root/.kube/config
              register: helm_status
              ignore_errors: yes

            - name: Get cert-manager pods status
              command: kubectl get pods -n cert-manager --kubeconfig /root/.kube/config -o wide
              register: pods_status
              ignore_errors: yes

            - name: Get cert-manager events
              command: kubectl get events -n cert-manager --kubeconfig /root/.kube/config --sort-by=.metadata.creationTimestamp
              register: cert_manager_events
              ignore_errors: yes

            - name: Check for common stall indicators
              set_fact:
                stall_indicators:
                  - "{{ 'Image pull issues' if (pods_status.stdout | default('') | regex_search('ImagePullBackOff|ErrImagePull')) else '' }}"
                  - "{{ 'Network connectivity issues' if (cert_manager_events.stdout | default('') | regex_search('dial tcp.*i/o timeout|connection refused')) else '' }}"
                  - "{{ 'Resource constraints' if (cert_manager_events.stdout | default('') | regex_search('Insufficient cpu|Insufficient memory')) else '' }}"
                  - "{{ 'DNS resolution issues' if (cert_manager_events.stdout | default('') | regex_search('dial tcp.*no such host')) else '' }}"

            - name: Show debugging information
              debug:
                msg: |
                  cert-manager installation failed. Debug information:
                  
                  Detected Stall Indicators:
                  {{ stall_indicators | select('string') | list | join(', ') or 'No specific indicators detected' }}
                  
                  Helm Status:
                  {{ helm_status.stdout_lines | default(['Unable to get Helm status']) }}
                  
                  Pod Status:
                  {{ pods_status.stdout_lines | default(['Unable to get pod status']) }}
                  
                  Recent Events:
                  {{ cert_manager_events.stdout_lines | default(['Unable to get events']) }}

            - name: Create failure summary file for monitoring scripts
              copy:
                content: |
                  cert-manager installation failed at {{ ansible_date_time.iso8601 }}
                  Stall indicators: {{ stall_indicators | select('string') | list | join(', ') or 'Unknown' }}
                  Helm status available: {{ 'yes' if helm_status.rc == 0 else 'no' }}
                  Pods status available: {{ 'yes' if pods_status.rc == 0 else 'no' }}
                  Events available: {{ 'yes' if cert_manager_events.rc == 0 else 'no' }}
                dest: /tmp/vmstation_cert_manager_failure_summary
                mode: '0644'
              ignore_errors: yes

        - name: Fail with detailed error message
          fail:
            msg: |
              cert-manager installation failed after all retries.
              Check the debugging information above for details.
              
              Quick Recovery Steps:
              1. Run diagnosis: ./scripts/diagnose_cert_manager_stall.sh
              2. Or use recovery mode: ./scripts/site_runner_with_monitoring.sh --recover-only
              
              Common causes:
              1. Network connectivity issues to container registries
              2. Insufficient cluster resources
              3. Previous failed installation remnants
              4. Kubernetes API server issues
              5. DNS resolution problems

    - name: Wait for cert-manager deployments to be ready (enhanced monitoring)
      when: vmstation_manage_cert_manager | bool
      vars:
        cert_manager_deployments:
          - cert-manager
          - cert-manager-webhook
          - cert-manager-cainjector
      block:
        - name: Show initial deployment status
          debug:
            msg: "Waiting for cert-manager deployments to become ready (timeout: 15 minutes each)..."

        - name: Monitor cert-manager deployment progress
          block:
            - name: Wait for rollout status of cert-manager deployments
              command: kubectl -n cert-manager rollout status deployment/{{ item }} --kubeconfig /root/.kube/config --timeout=120s
              loop: "{{ cert_manager_deployments }}"
              register: rollout_status
              retries: 2
              delay: 60
              until: rollout_status.rc == 0

            - name: Verify all deployments are ready
              command: kubectl get deployments -n cert-manager --kubeconfig /root/.kube/config
              register: final_deployment_status

            - name: Show successful deployment status
              debug:
                msg: |
                  ✓ All cert-manager deployments are ready!
                  {{ final_deployment_status.stdout_lines }}

      rescue:
        - name: Comprehensive cert-manager failure debugging
          block:
            - name: Get cert-manager deployment status
              command: kubectl -n cert-manager get deployments --kubeconfig /root/.kube/config -o wide
              register: deployment_status
              ignore_errors: yes

            - name: Get cert-manager pod status with details
              command: kubectl -n cert-manager get pods --kubeconfig /root/.kube/config -o wide
              register: pod_status
              ignore_errors: yes

            - name: Get cert-manager pod descriptions for failed pods
              shell: |
                kubectl get pods -n cert-manager --kubeconfig /root/.kube/config --no-headers | \
                grep -v "Running\|Completed" | awk '{print $1}' | \
                xargs -I {} kubectl describe pod {} -n cert-manager --kubeconfig /root/.kube/config
              register: pod_descriptions
              ignore_errors: yes

            - name: Get recent cert-manager events
              command: kubectl get events -n cert-manager --kubeconfig /root/.kube/config --sort-by=.metadata.creationTimestamp --field-selector type!=Normal
              register: cert_manager_events
              ignore_errors: yes

            - name: Get node resource status
              command: kubectl describe nodes --kubeconfig /root/.kube/config
              register: node_status
              ignore_errors: yes

            - name: Show comprehensive debugging information
              debug:
                msg: |
                  ==========================================
                  cert-manager DEPLOYMENT FAILURE ANALYSIS
                  ==========================================
                  
                  Deployment Status:
                  {{ deployment_status.stdout_lines | default(['Unable to get deployment status']) }}
                  
                  Pod Status:
                  {{ pod_status.stdout_lines | default(['Unable to get pod status']) }}
                  
                  Failed Pod Details:
                  {{ pod_descriptions.stdout_lines | default(['No failed pods found or unable to get descriptions']) }}
                  
                  Warning/Error Events:
                  {{ cert_manager_events.stdout_lines | default(['No warning events found']) }}
                  
                  ==========================================
                  TROUBLESHOOTING RECOMMENDATIONS:
                  ==========================================
                  1. Check network connectivity: curl -I https://registry-1.docker.io/v2/ (401 is expected)
                  2. Check cluster resources: kubectl top nodes && kubectl describe nodes
                  3. Check DNS resolution: nslookup registry-1.docker.io
                  4. Clean up and retry: helm uninstall cert-manager -n cert-manager
                  5. Check firewall/proxy settings for container image pulls

        - name: Fail with detailed troubleshooting guidance
          fail:
            msg: |
              cert-manager deployment failed to become ready after all retries.
              
              Please review the debugging information above and:
              1. Ensure cluster has sufficient resources (CPU/Memory)
              2. Verify network connectivity to container registries
              3. Check for firewall/proxy issues blocking image pulls
              4. Consider manual cleanup: helm uninstall cert-manager -n cert-manager
              5. Check cluster node status and kubelet logs
              
              For immediate troubleshooting, run:
              kubectl get pods -n cert-manager -o wide
              kubectl describe pods -n cert-manager
              kubectl get events -n cert-manager --sort-by=.metadata.creationTimestamp

    - name: Create self-signed cluster issuer for internal certificates
      when: vmstation_create_tls_certs | bool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: selfsigned-cluster-issuer
          spec:
            selfSigned: {}
        kubeconfig: /root/.kube/config

    - name: Create CA certificate for VMStation cluster
      when: vmstation_create_tls_certs | bool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: vmstation-ca
            namespace: cert-manager
          spec:
            isCA: true
            commonName: VMStation Root CA
            secretName: vmstation-ca-secret
            privateKey:
              algorithm: ECDSA
              size: 256
            issuerRef:
              name: selfsigned-cluster-issuer
              kind: ClusterIssuer
              group: cert-manager.io
        kubeconfig: /root/.kube/config

    - name: Create VMStation CA cluster issuer
      when: vmstation_create_tls_certs | bool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: vmstation-ca-issuer
          spec:
            ca:
              secretName: vmstation-ca-secret
        kubeconfig: /root/.kube/config

    - name: Create certificates for monitoring services
      when: vmstation_create_tls_certs | bool
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: cert-manager.io/v1
          kind: Certificate
          metadata:
            name: "{{ item.name }}-tls"
            namespace: monitoring
          spec:
            secretName: "{{ item.name }}-tls"
            issuerRef:
              name: vmstation-ca-issuer
              kind: ClusterIssuer
            commonName: "{{ item.common_name }}"
            dnsNames:
              - "{{ item.common_name }}"
              - "{{ item.name }}.monitoring.svc.cluster.local"
              - "{{ item.name }}.monitoring"
        kubeconfig: /root/.kube/config
      loop:
        - name: grafana
          common_name: grafana.vmstation.local
        - name: prometheus
          common_name: prometheus.vmstation.local
        - name: loki
          common_name: loki.vmstation.local