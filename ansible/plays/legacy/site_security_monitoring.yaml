- name: Basic security and functionality setup
  hosts: all
  become: true
  tasks:
    - name: Install and configure UFW (Debian)
      apt:
        name: ufw
        state: present
      when: ansible_os_family == 'Debian'
    - name: Set UFW default deny incoming
      command: ufw default deny incoming
      when: ansible_os_family == 'Debian'
    - name: Set UFW default allow outgoing
      command: ufw default allow outgoing
      when: ansible_os_family == 'Debian'
    - name: Allow all local network connections
      command: ufw allow from 192.168.0.0/16
      when: ansible_os_family == 'Debian'
    - name: Allow SSH from local network
      command: ufw allow from 192.168.0.0/16 to any port ssh
      when: ansible_os_family == 'Debian'
    # If using VPN on compute_node, allow VPN port (example: 1194 for OpenVPN)
    # - name: Allow VPN port
    #   command: ufw allow 1194/udp
    #   when: ansible_os_family == 'Debian'
    # For media server file share, allow NFS (if used)
    # - name: Allow NFS
    #   command: ufw allow from 192.168.0.0/16 to any port nfs
    #   when: ansible_os_family == 'Debian'
    - name: Install and configure firewalld (RHEL)
      yum:
        name: firewalld
        state: present
      when: ansible_os_family == 'RedHat'
    - name: Harden SSH configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
      notify: Restart SSH
    - name: Install fail2ban
      apt:
        name: fail2ban
        state: present
  handlers:
    - name: Restart SSH
      command: systemctl restart sshd


- name: Install and configure node_exporter
  hosts: all
  become: true
  vars:
    node_exporter_version: "1.7.0"
    node_exporter_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
  tasks:
    - name: Download node_exporter
      get_url:
        url: "{{ node_exporter_url }}"
        dest: /tmp/node_exporter.tar.gz
    - name: Extract node_exporter
      unarchive:
        src: /tmp/node_exporter.tar.gz
        dest: /opt/
        remote_src: yes
    - name: Link node_exporter binary
      file:
        src: /opt/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        state: link
    - name: Create systemd service for node_exporter
      copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Prometheus Node Exporter
          After=network.target
          [Service]
          User=root
          ExecStart=/usr/local/bin/node_exporter
          [Install]
          WantedBy=default.target
    - name: Enable and start node_exporter
      systemd:
        name: node_exporter
        enabled: yes
        state: started


- name: Deploy Grafana as a Podman container and provision it
  hosts: monitoring_nodes
  become: true
  vars:
    grafana_version: "10.2.3"
    grafana_image: "docker.io/grafana/grafana:{{ grafana_version }}"
    grafana_host_prometheus_url: "http://{{ ansible_default_ipv4.address }}:9090"
    grafana_host_loki_url: "http://{{ ansible_default_ipv4.address }}:3100"
    grafana_data_dir: /srv/monitoring_data/grafana
  tasks:
    - name: Ensure persistent Grafana data and provisioning directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: '0755'
      loop:
        - "{{ grafana_data_dir }}"
        - "{{ grafana_data_dir }}/provisioning/datasources"
        - "{{ grafana_data_dir }}/provisioning/dashboards"
        - "{{ grafana_data_dir }}/dashboards"

    - name: Remove legacy systemd grafana setup (stop service if present)
      systemd:
        name: grafana-server
        state: stopped
      failed_when: false
      changed_when: false

    - name: Ensure ownership for persisted Grafana data
      file:
        path: "{{ grafana_data_dir }}"
        owner: 472
        group: 472
        recurse: yes

    - name: Remove extra Grafana datasource YAML files from legacy locations
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/grafana/provisioning/datasources/prometheus.yaml
        - /etc/grafana/provisioning/datasources/sample.yaml

    - name: Provision Prometheus and Loki data sources for Grafana (file for provisioning)
      copy:
        dest: "{{ grafana_data_dir }}/provisioning/datasources/datasources.yaml"
        content: |
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: "{{ grafana_host_prometheus_url }}"
              isDefault: true
            - name: Loki
              type: loki
              access: proxy
              url: "{{ grafana_host_loki_url }}"
              isDefault: false
        owner: root
        group: root
        mode: '0644'

    - name: Copy Podman dashboard JSON for provisioning into persisted data
      copy:
        src: grafana_podman_dashboard.json
        dest: "{{ grafana_data_dir }}/provisioning/dashboards/podman_dashboard.json"
        owner: root
        group: root
        mode: '0644'

    - name: Copy Loki dashboard JSON for provisioning into persisted data
      copy:
        content: |
          {
            "id": null,
            "title": "Loki Logs Overview",
            "tags": ["loki", "logs"],
            "timezone": "browser",
            "schemaVersion": 36,
            "version": 1,
            "refresh": "30s",
            "panels": [
              {
                "type": "logs",
                "title": "Recent Loki Logs",
                "datasource": "Loki",
                "targets": [
                  {
                    "expr": "{job=\"varlogs\"}",
                    "format": "logs"
                  }
                ],
                "gridPos": {"x": 0, "y": 0, "w": 24, "h": 12}
              }
            ]
          }
        dest: "{{ grafana_data_dir }}/provisioning/dashboards/loki_dashboard.json"
        owner: root
        group: root
        mode: '0644'

    - name: Provision Podman and Loki dashboards provider file
      copy:
        dest: "{{ grafana_data_dir }}/provisioning/dashboards/dashboards.yaml"
        content: |
          apiVersion: 1
          providers:
            - name: 'Podman Dashboards'
              orgId: 1
              folder: 'Podman'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /etc/grafana/provisioning/dashboards
            - name: 'Loki Dashboards'
              orgId: 1
              folder: 'Loki'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /etc/grafana/provisioning/dashboards
        owner: root
        group: root
        mode: '0644'

    - name: Run Grafana container (Podman)
      containers.podman.podman_container:
        name: grafana
        image: "{{ grafana_image }}"
        state: started
        restart_policy: always
        ports:
          - "3000:3000"
        volumes:
          - "{{ grafana_data_dir }}/provisioning:/etc/grafana/provisioning:Z"
          - "{{ grafana_data_dir }}/dashboards:/var/lib/grafana/dashboards:Z"
          - "{{ grafana_data_dir }}:/var/lib/grafana:Z"
      register: grafana_container

    - name: Wait for Grafana HTTP to become ready
      uri:
        url: http://127.0.0.1:3000/api/health
        status_code: 200
        timeout: 30
      register: grafana_health
      retries: 6
      delay: 5
      until: grafana_health.status == 200




    - name: Copy Podman dashboard JSON for provisioning
      copy:
        src: grafana_podman_dashboard.json
        dest: /etc/grafana/provisioning/dashboards/podman_dashboard.json
        owner: grafana
        group: grafana
        mode: '0644'
      notify: Restart grafana-server

    - name: Copy Loki dashboard JSON for provisioning
      copy:
        content: |
          {
            "id": null,
            "title": "Loki Logs Overview",
            "tags": ["loki", "logs"],
            "timezone": "browser",
            "schemaVersion": 36,
            "version": 1,
            "refresh": "30s",
            "panels": [
              {
                "type": "logs",
                "title": "Recent Loki Logs",
                "datasource": "Loki",
                "targets": [
                  {
                    "expr": "{job=\"varlogs\"}",
                    "format": "logs"
                  }
                ],
                "gridPos": {"x": 0, "y": 0, "w": 24, "h": 12}
              }
            ]
          }
        dest: /etc/grafana/provisioning/dashboards/loki_dashboard.json
        owner: grafana
        group: grafana
        mode: '0644'
      notify: Restart grafana-server


    - name: Provision Podman and Loki dashboards in Grafana
      copy:
        dest: /etc/grafana/provisioning/dashboards/dashboards.yaml
        content: |
          apiVersion: 1
          providers:
            - name: 'Podman Dashboards'
              orgId: 1
              folder: 'Podman'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /etc/grafana/provisioning/dashboards
            - name: 'Loki Dashboards'
              orgId: 1
              folder: 'Loki'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /etc/grafana/provisioning/dashboards
        owner: grafana
        group: grafana
        mode: '0644'
      notify: Restart grafana-server

  handlers:
    - name: Restart grafana-server
      become: true
      systemd:
        name: grafana-server
        state: restarted
