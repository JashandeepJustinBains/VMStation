---
# Enhanced Jellyfin Deployment with Network Validation
# Addresses issues from fix_remaining_pod_issues.sh and CNI bridge conflicts

- name: "Deploy Jellyfin with Enhanced Networking"
  hosts: monitoring_nodes
  become: false
  vars:
    jellyfin_namespace: jellyfin
    jellyfin_nodeport: 30096
    storage_node: storagenodet3500
  tasks:
    - name: "Pre-Jellyfin deployment validation"
      block:
        - name: "Validate storage node is ready"
          shell: |
            echo "=== Storage Node Validation ==="
            
            # Check that storage node exists and is Ready
            node_status=$(kubectl get node {{ storage_node }} -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "NotFound")
            
            if [ "$node_status" != "True" ]; then
              echo "ERROR: Storage node {{ storage_node }} is not Ready (status: $node_status)"
              kubectl get nodes
              exit 1
            fi
            
            # Check that Flannel is running on storage node
            flannel_pod=$(kubectl get pods -n kube-flannel -o wide | grep "{{ storage_node }}" | grep "Running" || echo "")
            if [ -z "$flannel_pod" ]; then
              echo "ERROR: Flannel is not running on storage node {{ storage_node }}"
              kubectl get pods -n kube-flannel -o wide
              exit 1
            fi
            
            echo "✅ Storage node {{ storage_node }} is ready for Jellyfin deployment"
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf

        - name: "Check for existing CNI bridge conflicts"
          shell: |
            # Check recent events for CNI bridge errors
            cni_events=$(kubectl get events --all-namespaces --field-selector reason=FailedCreatePodSandBox --sort-by='.lastTimestamp' -o custom-columns=MESSAGE:.message 2>/dev/null | grep -i "failed to set bridge addr.*already has an IP address" | tail -1 || echo "")
            
            if [ -n "$cni_events" ]; then
              echo "WARNING: Recent CNI bridge conflicts detected"
              echo "$cni_events"
              echo "Applying CNI bridge remediation before Jellyfin deployment..."
              
              # Apply CNI bridge fix on storage node
              ssh root@{{ storage_node }} '
                systemctl stop containerd
                if ip link show cni0 >/dev/null 2>&1; then
                  ip link set cni0 down || true
                  ip link delete cni0 || true
                fi
                rm -rf /var/lib/cni/networks/* || true
                systemctl start containerd
              ' || true
              
              # Wait for containerd to stabilize
              sleep 30
              
              # Delete any stuck pods to trigger recreation with fixed CNI
              kubectl delete pods -n {{ jellyfin_namespace }} --all --ignore-not-found=true || true
              
              echo "CNI bridge remediation completed"
            else
              echo "✅ No CNI bridge conflicts detected"
            fi
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf
          delegate_to: localhost
          failed_when: false

    - name: "Ensure Jellyfin namespace exists"
      kubernetes.core.k8s:
        name: "{{ jellyfin_namespace }}"
        api_version: v1
        kind: Namespace
        state: present

    - name: "Prepare storage directories on storage node"
      block:
        - name: "Create and configure Jellyfin directories"
          shell: |
            echo "=== Jellyfin Directory Setup ==="
            
            # Create directories if they don't exist
            mkdir -p /var/lib/jellyfin /srv/media
            
            # Set proper ownership and permissions
            chown -R 1000:1000 /var/lib/jellyfin /srv/media 2>/dev/null || true
            chmod -R 755 /var/lib/jellyfin /srv/media 2>/dev/null || true
            
            # Verify directory setup
            echo "Jellyfin config directory:"
            ls -la /var/lib/jellyfin
            echo ""
            echo "Jellyfin media directory:"  
            ls -la /srv/media
            
            echo "✅ Jellyfin directories configured successfully"
          delegate_to: "{{ storage_node }}"
          become: true

    - name: "Deploy enhanced Jellyfin configuration"
      kubernetes.core.k8s:
        state: present
        src: "../../manifests/jellyfin/jellyfin.yaml"

    - name: "Wait for Jellyfin deployment with enhanced monitoring"
      block:
        - name: "Monitor Jellyfin pod creation and networking"
          shell: |
            echo "=== Jellyfin Deployment Monitoring ==="
            echo "Waiting for Jellyfin pod to be created..."
            
            # Wait for pod to be created (up to 2 minutes)
            for i in {1..24}; do
              if kubectl get pod -n {{ jellyfin_namespace }} -l app=jellyfin >/dev/null 2>&1; then
                echo "✅ Jellyfin pod created"
                break
              fi
              if [ $i -eq 24 ]; then
                echo "ERROR: Jellyfin pod not created within 2 minutes"
                exit 1
              fi
              echo "  Waiting for pod creation... ($i/24)"
              sleep 5
            done
            
            # Get pod name
            pod_name=$(kubectl get pod -n {{ jellyfin_namespace }} -l app=jellyfin -o jsonpath='{.items[0].metadata.name}')
            echo "Jellyfin pod name: $pod_name"
            
            # Monitor pod status with detailed feedback
            echo ""
            echo "Monitoring pod status and networking..."
            for i in {1..60}; do  # 5 minutes total
              pod_status=$(kubectl get pod -n {{ jellyfin_namespace }} "$pod_name" -o jsonpath='{.status.phase}' 2>/dev/null || echo "Unknown")
              pod_ip=$(kubectl get pod -n {{ jellyfin_namespace }} "$pod_name" -o jsonpath='{.status.podIP}' 2>/dev/null || echo "")
              
              echo "  Status: $pod_status, IP: ${pod_ip:-pending} ($i/60)"
              
              case "$pod_status" in
                "Running")
                  echo "✅ Jellyfin pod is running with IP: $pod_ip"
                  
                  # Check readiness
                  ready=$(kubectl get pod -n {{ jellyfin_namespace }} "$pod_name" -o jsonpath='{.status.conditions[?(@.type=="Ready")].status}' 2>/dev/null || echo "False")
                  if [ "$ready" = "True" ]; then
                    echo "✅ Jellyfin pod is ready"
                    exit 0
                  else
                    echo "  Pod is running but not yet ready (health checks in progress)"
                  fi
                  ;;
                "Pending")
                  if [ $((i % 6)) -eq 0 ]; then  # Every 30 seconds
                    # Check for CNI bridge errors
                    cni_errors=$(kubectl get events -n {{ jellyfin_namespace }} --field-selector involvedObject.name="$pod_name" --sort-by='.lastTimestamp' -o custom-columns=MESSAGE:.message 2>/dev/null | grep -i "failed to set bridge addr" | tail -1 || echo "")
                    if [ -n "$cni_errors" ]; then
                      echo "❌ CNI bridge error detected: $cni_errors"
                      echo "This indicates the CNI bridge fix did not fully resolve the issue"
                      exit 1
                    fi
                    
                    # Check for other pod creation issues
                    scheduling_events=$(kubectl describe pod -n {{ jellyfin_namespace }} "$pod_name" | grep -A 5 "Events:" | tail -5)
                    echo "  Recent events: $scheduling_events"
                  fi
                  ;;
                "Failed"|"Error")
                  echo "❌ Jellyfin pod failed: $pod_status"
                  kubectl describe pod -n {{ jellyfin_namespace }} "$pod_name"
                  exit 1
                  ;;
              esac
              
              sleep 5
            done
            
            echo "❌ Jellyfin pod did not become ready within 5 minutes"
            echo "Final pod status:"
            kubectl describe pod -n {{ jellyfin_namespace }} "$pod_name"
            exit 1
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf
          register: jellyfin_deployment_monitoring

    - name: "Validate Jellyfin service connectivity"
      block:
        - name: "Test Jellyfin service endpoints"
          shell: |
            echo "=== Jellyfin Service Validation ==="
            
            # Get service details
            service_ip=$(kubectl get service -n {{ jellyfin_namespace }} jellyfin-service -o jsonpath='{.spec.clusterIP}' 2>/dev/null || echo "")
            node_port=$(kubectl get service -n {{ jellyfin_namespace }} jellyfin-service -o jsonpath='{.spec.ports[0].nodePort}' 2>/dev/null || echo "30096")
            
            echo "Service ClusterIP: ${service_ip:-unknown}"
            echo "NodePort: $node_port"
            
            # Test internal connectivity
            if [ -n "$service_ip" ]; then
              echo "Testing internal service connectivity..."
              if timeout 10 curl -sf "http://$service_ip:8096/health" >/dev/null 2>&1; then
                echo "✅ Internal service connectivity successful"
              else
                echo "⚠️  Internal service connectivity failed (may be normal during startup)"
              fi
            fi
            
            # Test NodePort connectivity
            echo "Testing NodePort connectivity..."
            if timeout 10 curl -sf "http://{{ storage_node }}:$node_port/health" >/dev/null 2>&1; then
              echo "✅ NodePort connectivity successful"
              echo "Jellyfin UI accessible at: http://{{ storage_node }}:$node_port"
            else
              echo "⚠️  NodePort connectivity failed (may be normal during startup)"
              echo "Jellyfin UI should be accessible at: http://{{ storage_node }}:$node_port (once ready)"
            fi
            
            echo ""
            echo "Final Jellyfin status:"
            kubectl get pods,services -n {{ jellyfin_namespace }} -o wide
          environment:
            KUBECONFIG: /etc/kubernetes/admin.conf
          register: jellyfin_connectivity_test
          failed_when: false

    - name: "Display Jellyfin deployment summary"
      debug:
        msg: |
          🎉 Jellyfin Deployment Summary
          
          {% if jellyfin_deployment_monitoring.rc == 0 %}
          ✅ Deployment Status: SUCCESS
          ✅ Pod Status: Running and Ready
          ✅ Network Configuration: Healthy
          {% else %}
          ⚠️  Deployment Status: PARTIAL SUCCESS
          ⚠️  Pod may still be starting up or have health check issues
          {% endif %}
          
          📊 Connectivity Test Results:
          {{ jellyfin_connectivity_test.stdout_lines | join('\n          ') }}
          
          🌐 Access Information:
          - Internal URL: http://jellyfin-service.{{ jellyfin_namespace }}.svc.cluster.local:8096
          - External URL: http://{{ storage_node }}:{{ jellyfin_nodeport }}
          - Admin UI: http://{{ storage_node }}:{{ jellyfin_nodeport }}/web
          
          📁 Storage Locations:
          - Config: /var/lib/jellyfin on {{ storage_node }}
          - Media: /srv/media on {{ storage_node }}
          
          🔧 Troubleshooting:
          {% if jellyfin_deployment_monitoring.rc != 0 %}
          If Jellyfin is not accessible:
          1. Check pod logs: kubectl logs -n {{ jellyfin_namespace }} -l app=jellyfin
          2. Check events: kubectl get events -n {{ jellyfin_namespace }}
          3. Verify storage node connectivity: ping {{ storage_node }}
          4. Check directories exist: ls -la /var/lib/jellyfin /srv/media on {{ storage_node }}
          {% else %}
          Deployment completed successfully! 
          If you experience issues later, check the troubleshooting steps above.
          {% endif %}

  rescue:
    - name: "Handle Jellyfin deployment failure"
      debug:
        msg: |
          ❌ Jellyfin deployment encountered issues
          
          This may be due to:
          1. CNI bridge IP conflicts (common after cluster setup)
          2. Storage node networking issues
          3. Directory permission problems
          4. Resource constraints
          
          🔧 Recommended fixes:
          1. Run CNI bridge fix: ./scripts/fix_jellyfin_cni_bridge_conflict.sh
          2. Check homelab node: ./scripts/fix_homelab_node_issues.sh
          3. Fix remaining pods: ./scripts/fix_remaining_pod_issues.sh
          
          📊 Current cluster status:
      
    - name: "Show cluster status for troubleshooting"
      shell: |
        echo "Cluster nodes:"
        kubectl get nodes -o wide
        echo ""
        echo "All pods status:"
        kubectl get pods --all-namespaces | grep -v "Running"
        echo ""
        echo "Recent events:"
        kubectl get events --all-namespaces --sort-by='.lastTimestamp' | tail -10
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: cluster_debug_info
      failed_when: false
      
    - name: "Display debug information"
      debug:
        msg: "{{ cluster_debug_info.stdout_lines | join('\n') }}"