- name: Create and bind Drone CI ServiceAccount
  hosts: master
  become: yes
  tasks:
    - name: Copy Drone RBAC manifest to master
      copy:
        src: ../k8s/drone-rbac.yaml
        dest: /root/ansible/k8s/drone-rbac.yaml

    - name: Apply Drone RBAC manifest
      shell: kubectl apply -f /root/ansible/k8s/drone-rbac.yaml
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Generate kubeconfig for drone ServiceAccount
      shell: |
        NAMESPACE=kube-system
        SERVICE_ACCOUNT=drone
        SECRET_NAME=$(kubectl get sa ${SERVICE_ACCOUNT} -n ${NAMESPACE} -o jsonpath="{.secrets[0].name}")
        CA_CRT=$(kubectl get secret ${SECRET_NAME} -n ${NAMESPACE} -o jsonpath="{.data['ca\.crt']}" | base64 --decode)
        TOKEN=$(kubectl get secret ${SECRET_NAME} -n ${NAMESPACE} -o jsonpath="{.data['token']}" | base64 --decode)
        SERVER=$(kubectl config view --kubeconfig /etc/rancher/k3s/k3s.yaml -o jsonpath="{.clusters[0].cluster.server}")
        cat <<EOF > /root/ansible/k8s/drone-sa.kubeconfig
        apiVersion: v1
        kind: Config
        clusters:
        - cluster:
            certificate-authority-data: $(echo $CA_CRT | base64 | tr -d '\n')
            server: $SERVER
          name: k3s
        contexts:
        - context:
            cluster: k3s
            user: drone
            namespace: kube-system
          name: drone-context
        current-context: drone-context
        users:
        - name: drone
          user:
            token: $TOKEN
        EOF
      environment:
        KUBECONFIG: /etc/rancher/k3s/k3s.yaml

    - name: Fetch generated kubeconfig to control machine
      fetch:
        src: /root/ansible/k8s/drone-sa.kubeconfig
        dest: ./drone-sa.kubeconfig
        flat: yes