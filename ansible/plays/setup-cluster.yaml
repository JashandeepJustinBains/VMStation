---
# VMStation Simplified Kubernetes Cluster Setup
# Fixed root causes of join failures with proper CNI and containerd configuration

- name: "Setup Kubernetes Cluster - All Nodes"  
  hosts: all
  become: true
  vars:
    kubernetes_version: "1.29"
    pod_network_cidr: "10.244.0.0/16"
  tasks:
    - name: "Update package cache (Debian/Ubuntu)"
      apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'

    - name: "Install required packages (Debian/Ubuntu)"
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
        state: present
      when: ansible_os_family == 'Debian'

    - name: "Add Kubernetes GPG key"
      apt_key:
        url: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/Release.key"
        state: present
      when: ansible_os_family == 'Debian'

    - name: "Add Kubernetes repository"
      apt_repository:
        repo: "deb https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/deb/ /"
        state: present
        filename: kubernetes
      when: ansible_os_family == 'Debian'

    - name: "Install Kubernetes packages"
      apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
          - containerd
        state: present
      when: ansible_os_family == 'Debian'

    - name: "Install packages for RHEL/CentOS"
      block:
        - name: "Add Kubernetes repository (RHEL/CentOS)"
          yum_repository:
            name: kubernetes
            description: Kubernetes
            baseurl: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/"
            gpgcheck: yes
            repo_gpgcheck: yes
            gpgkey: "https://pkgs.k8s.io/core:/stable:/v{{ kubernetes_version }}/rpm/repodata/repomd.xml.key"
            enabled: yes

        - name: "Install Kubernetes packages (RHEL/CentOS)"
          package:
            name:
              - kubelet
              - kubeadm
              - kubectl
              - containerd
            state: present
      when: ansible_os_family == 'RedHat'

    - name: "Hold Kubernetes packages (Debian/Ubuntu)"
      dpkg_selections:
        name: "{{ item }}"
        selection: hold
      loop:
        - kubelet
        - kubeadm
        - kubectl
      when: ansible_os_family == 'Debian'

    - name: "Disable swap"
      shell: |
        swapoff -a
        sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab

    - name: "Load kernel modules"
      modprobe:
        name: "{{ item }}"
      loop:
        - overlay
        - br_netfilter

    - name: "Create kernel modules config"
      copy:
        content: |
          overlay
          br_netfilter
        dest: /etc/modules-load.d/k8s.conf

    - name: "Set sysctl parameters"
      sysctl:
        name: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
        reload: yes
      loop:
        - { key: 'net.bridge.bridge-nf-call-iptables', value: '1' }
        - { key: 'net.bridge.bridge-nf-call-ip6tables', value: '1' }
        - { key: 'net.ipv4.ip_forward', value: '1' }

    - name: "Install CNI plugins on all nodes"
      block:
        - name: "Create CNI directories"
          file:
            path: "{{ item }}"
            state: directory
            owner: root
            group: root
            mode: '0755'
          loop:
            - /opt/cni/bin
            - /etc/cni/net.d
            - /var/lib/cni/networks
            - /run/flannel

        - name: "Download standard CNI plugins"
          unarchive:
            src: "https://github.com/containernetworking/plugins/releases/download/v1.3.0/cni-plugins-linux-amd64-v1.3.0.tgz"
            dest: /opt/cni/bin
            remote_src: yes
            creates: /opt/cni/bin/bridge
          retries: 3

        - name: "Download Flannel CNI plugin"
          get_url:
            url: "https://github.com/flannel-io/cni-plugin/releases/download/v1.7.1-flannel2/flannel-amd64"
            dest: /opt/cni/bin/flannel
            mode: '0755'
            timeout: 60
          retries: 3

    - name: "Configure containerd with proper CRI settings"
      block:
        - name: "Create containerd config directory"
          file:
            path: /etc/containerd
            state: directory

        - name: "Generate containerd config"
          shell: containerd config default > /etc/containerd/config.toml
          args:
            creates: /etc/containerd/config.toml

        - name: "Configure containerd systemd cgroup driver"
          replace:
            path: /etc/containerd/config.toml
            regexp: 'SystemdCgroup = false'
            replace: 'SystemdCgroup = true'

        - name: "Configure containerd CRI endpoint"
          replace:
            path: /etc/containerd/config.toml
            regexp: 'disabled_plugins = \["cri"\]'
            replace: 'disabled_plugins = []'

        - name: "Start and enable containerd"
          systemd:
            name: containerd
            state: restarted
            enabled: yes

        - name: "Wait for containerd to fully start"
          pause:
            seconds: 15

        - name: "Initialize containerd CRI namespace"
          shell: |
            ctr namespace create k8s.io 2>/dev/null || true
            ctr --namespace k8s.io images ls >/dev/null 2>&1 || true
          failed_when: false

    - name: "Enable kubelet"
      systemd:
        name: kubelet
        enabled: yes

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

# Control plane initialization
- name: "Initialize Kubernetes Control Plane"
  hosts: monitoring_nodes
  become: true
  vars:
    pod_network_cidr: "10.244.0.0/16"
  tasks:
    - name: "Check if cluster exists"
      stat:
        path: /etc/kubernetes/admin.conf
      register: kubeconfig

    - name: "Initialize cluster"
      command: >
        kubeadm init 
        --pod-network-cidr={{ pod_network_cidr }}
        --apiserver-advertise-address={{ ansible_default_ipv4.address }}
        --control-plane-endpoint={{ ansible_default_ipv4.address }}
      when: not kubeconfig.stat.exists
      register: kubeadm_init

    - name: "Setup kubeconfig for root"
      block:
        - name: "Create .kube directory"
          file:
            path: /root/.kube
            state: directory
            mode: '0755'

        - name: "Copy admin.conf"
          copy:
            src: /etc/kubernetes/admin.conf
            dest: /root/.kube/config
            mode: '0644'
            remote_src: yes

    - name: "Open firewall ports for Kubernetes"
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - "6443/tcp"    # API server
        - "10250/tcp"   # Kubelet
        - "10251/tcp"   # kube-scheduler
        - "10252/tcp"   # kube-controller-manager
        - "8472/udp"    # Flannel VXLAN
      failed_when: false
      when: ansible_os_family == 'RedHat'

    - name: "Install Flannel CNI"
      shell: |
        kubectl apply -f https://github.com/flannel-io/flannel/releases/latest/download/kube-flannel.yml
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: flannel_install
      retries: 3
      delay: 10
      until: flannel_install.rc == 0

    - name: "Wait for API server to be ready"
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: 6443
        timeout: 180
        delay: 10
      
    - name: "Verify API server accessibility"
      shell: kubectl get nodes
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: api_health
      retries: 5
      delay: 10
      until: api_health.rc == 0

    - name: "Generate join command"
      shell: kubeadm token create --print-join-command
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      register: join_command
      retries: 3
      delay: 5
      until: join_command.rc == 0

    - name: "Save join command"
      copy:
        content: "{{ join_command.stdout }}"
        dest: /tmp/kubeadm-join-command.txt
        mode: '0600'

# Join worker nodes with simplified process
- name: "Join Worker Nodes"
  hosts: storage_nodes:compute_nodes
  become: true
  vars:
    control_plane_ip: "{{ groups['monitoring_nodes'][0] }}"
  tasks:
    - name: "Check if node is already joined"
      stat:
        path: /etc/kubernetes/kubelet.conf
      register: kubelet_conf

    - name: "Reset node if partially configured"
      shell: kubeadm reset --force
      when: 
        - not kubelet_conf.stat.exists
        - ansible_hostname not in (groups['monitoring_nodes'] | default([]))
      failed_when: false

    - name: "Clean up any existing network configurations"
      shell: |
        rm -f /etc/cni/net.d/00-placeholder.conflist
        iptables -F
        iptables -t nat -F
        iptables -t mangle -F
        iptables -X
      when: not kubelet_conf.stat.exists
      failed_when: false

    - name: "Open firewall ports for worker nodes"
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop:
        - "10250/tcp"   # Kubelet
        - "8472/udp"    # Flannel VXLAN
      failed_when: false
      when: 
        - ansible_os_family == 'RedHat'
        - not kubelet_conf.stat.exists

    - name: "Test connectivity to control plane"
      wait_for:
        host: "{{ control_plane_ip }}"
        port: 6443
        timeout: 30
      when: not kubelet_conf.stat.exists

    - name: "Fetch join command from control plane"
      slurp:
        src: /tmp/kubeadm-join-command.txt
      register: join_command_content
      delegate_to: "{{ control_plane_ip }}"
      when: not kubelet_conf.stat.exists
      
    - name: "Join worker node to cluster"
      shell: "{{ join_command_content.content | b64decode }}"
      when: not kubelet_conf.stat.exists
      register: join_result
      
    - name: "Verify worker node joined successfully"
      shell: kubectl get nodes {{ ansible_hostname }}
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      delegate_to: "{{ control_plane_ip }}"
      register: node_status
      retries: 3
      delay: 10
      until: node_status.rc == 0
      when: not kubelet_conf.stat.exists
      
    - name: "Display node status"
      debug:
        msg: "Node {{ ansible_hostname }} successfully joined cluster"
      when: not kubelet_conf.stat.exists

    - name: "Clean up join command"
      file:
        path: /tmp/kubeadm-join-command.txt
        state: absent
      delegate_to: "{{ control_plane_ip }}"
      run_once: true