- name: Install and configure NFS server on storage_node
  hosts: storage_node[0]
  become: true
  tasks:
    - name: Install NFS server (Debian)
      apt:
        name: nfs-kernel-server
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install NFS server (RHEL)
      yum:
        name: nfs-utils
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Ensure export directory exists
      file:
        path: /srv/media
        state: directory
        owner: root
        group: root
        mode: '0777'

    - name: Create Jellyfin config directory on NFS server
      file:
        path: /srv/media/jellyfin-config
        state: directory
        owner: root
        group: root
        mode: '0755'

    - name: Export /srv/media to all storage_nodes
      lineinfile:
        path: /etc/exports
        line: '/srv/media *(rw,sync,no_subtree_check,no_root_squash)'
        create: yes

    - name: Restart NFS server
      service:
        name: nfs-kernel-server
        state: restarted
      when: ansible_os_family == 'Debian'

    - name: Restart NFS server (RHEL)
      service:
        name: nfs-server
        state: restarted
      when: ansible_os_family == 'RedHat'
- hosts: all
  become: true
  become_method: sudo
  tasks:
    - name: Ensure Podman is installed (Debian)
      when: ansible_os_family == 'Debian'
      apt:
        name: podman
        state: present

    - name: Ensure Podman is installed (RHEL)
      when: ansible_os_family == 'RedHat'
      yum:
        name: podman
        state: present

- name: Deploy Jellyfin container on storage_node nodes
  hosts: storage_node
  become: true
  vars:
    jellyfin_image: "docker.io/jellyfin/jellyfin:latest"
    media_dir: "/mnt/media"
    config_dir: "/mnt/media/jellyfin-config"
  tasks:

    - name: Run Jellyfin container
      containers.podman.podman_container:
        name: jellyfin
        image: "{{ jellyfin_image }}"
        state: started
        restart_policy: always
        volumes:
          - "{{ media_dir }}:/media"
          - "{{ config_dir }}:/config"
        ports:
          - "8096:8096"

- name: Mount NFS shares for storage_node
  hosts: storage_node
  become: true
  vars:
    nfs_server: "192.168.4.61"  # Set to the storage_node IP that is running the NFS server
    nfs_export: "/srv/media"
    mount_point: "/mnt/media"
  tasks:
    - name: Ensure NFS client is installed (Debian)
      when: ansible_os_family == 'Debian'
      apt:
        name: nfs-common
        state: present

    - name: Ensure NFS client is installed (RHEL)
      when: ansible_os_family == 'RedHat'
      yum:
        name: nfs-utils
        state: present

    - name: Ensure mount point exists before mounting NFS share
      file:
        path: "{{ mount_point }}"
        state: directory
      when: not (mount_point is mount)

    - name: Mount NFS share
      mount:
        src: "{{ nfs_server }}:{{ nfs_export }}"
        path: "{{ mount_point }}"
        fstype: nfs
        state: mounted
        opts: rw

- name: Configure security (UFW, fail2ban)
  hosts: all
  become: true
  tasks:
    - name: Allow SSH from local network (Debian)
      command: ufw allow from 192.168.0.0/16 to any port ssh
      when: ansible_os_family == 'Debian'

    - name: Install fail2ban (Debian)
      apt:
        name: fail2ban
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install fail2ban (RHEL)
      yum:
        name: fail2ban
        state: present
      when: ansible_os_family == 'RedHat'