---
# Jellyfin Deployment Playbook
# Deploys Jellyfin using the minimal Kubernetes manifest
- hosts: storage_nodes
  gather_facts: false
  connection: local
  vars:
    jellyfin_manifest_path: "kubernetes/jellyfin-minimal.yml"
  tasks:
    - name: Skip Jellyfin deployment if disabled
      ansible.builtin.meta: end_play
      when: not (jellyfin_enabled | default(true) | bool)

    - name: Check if kubectl is available
      ansible.builtin.shell:
        cmd: command -v kubectl
      register: kubectl_check
      failed_when: false
      changed_when: false
      check_mode: false

    - name: Show kubectl path and client version when present
      block:
        - name: Display kubectl path
          ansible.builtin.debug:
            msg: "kubectl found at: {{ kubectl_check.stdout | default('') }}"

        - name: Show kubectl client version
          ansible.builtin.command:
            cmd: "{{ kubectl_check.stdout }} version --client"
          register: kubectl_version
          failed_when: false
          changed_when: false
        - ansible.builtin.debug:
            var: kubectl_version.stdout_lines
      when: kubectl_check.rc == 0

    - name: Fail with remediation if kubectl not available
      ansible.builtin.fail:
        msg: |
          kubectl is required for Jellyfin deployment. Install it with:
          
          For Ubuntu/Debian:
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          
          For RHEL/CentOS/Fedora:
          sudo dnf install -y kubectl
      when: kubectl_check.rc != 0

    - name: Check if target node exists in cluster
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
        name: "{{ jellyfin_node_name | default('homelab') }}"
      register: target_node_check
      failed_when: false

    - name: Display node availability status
      debug:
        msg: |
          Target node status for Jellyfin deployment:
          Node name: {{ jellyfin_node_name | default('homelab') }}
          Node exists: {{ 'Yes' if target_node_check.resources else 'No' }}
          {% if not target_node_check.resources %}
          
          WARNING: Target node not found in cluster!
          Available nodes: {% for node in (cluster_info.resources | default([])) %}{{ node.metadata.name }} {% endfor %}
          
          Jellyfin deployment may remain in Pending state until the target node joins the cluster.
          {% endif %}

    - name: Get cluster nodes for reference
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Node
      register: cluster_info
      when: not target_node_check.resources

    - name: Deploy Jellyfin namespace
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Namespace
          metadata:
            name: jellyfin
            labels:
              name: jellyfin
              app: jellyfin

    - name: Deploy Jellyfin pod
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Pod
          metadata:
            name: jellyfin
            namespace: jellyfin
            labels:
              app: jellyfin
              component: media-server
          spec:
            nodeSelector:
              kubernetes.io/hostname: "{{ jellyfin_node_name | default('homelab') }}"
            securityContext:
              runAsUser: 1000
              runAsGroup: 1000
              fsGroup: 1000
            containers:
            - name: jellyfin
              image: jellyfin/jellyfin:latest
              imagePullPolicy: IfNotPresent
              ports:
              - name: http
                containerPort: 8096
                protocol: TCP
              - name: https
                containerPort: 8920
                protocol: TCP
              env:
              - name: JELLYFIN_PublishedServerUrl
                value: "http://{{ groups['storage_nodes'][0] | default('192.168.4.61') }}:30096"
              resources:
                requests:
                  memory: "512Mi"
                  cpu: "200m"
                limits:
                  memory: "2Gi"
                  cpu: "1000m"
              volumeMounts:
              - name: media
                mountPath: /media
                readOnly: true
              - name: config
                mountPath: /config
                readOnly: false
              livenessProbe:
                httpGet:
                  path: /health
                  port: 8096
                initialDelaySeconds: 120
                periodSeconds: 30
                timeoutSeconds: 10
                failureThreshold: 3
              readinessProbe:
                httpGet:
                  path: /health
                  port: 8096
                initialDelaySeconds: 60
                periodSeconds: 10
                timeoutSeconds: 5
                failureThreshold: 3
              securityContext:
                allowPrivilegeEscalation: false
                readOnlyRootFilesystem: false
                capabilities:
                  drop:
                  - ALL
            volumes:
            - name: media
              hostPath:
                path: "{{ jellyfin_media_path | default('/srv/media') }}"
                type: Directory
            - name: config
              hostPath:
                path: "{{ jellyfin_config_path | default('/var/lib/jellyfin') }}"
                type: DirectoryOrCreate
            restartPolicy: Always

    - name: Deploy Jellyfin service
      kubernetes.core.k8s:
        state: present
        definition:
          apiVersion: v1
          kind: Service
          metadata:
            name: jellyfin-service
            namespace: jellyfin
            labels:
              app: jellyfin
              component: media-server
          spec:
            type: NodePort
            selector:
              app: jellyfin
              component: media-server
            ports:
            - name: http
              port: 8096
              targetPort: 8096
              nodePort: 30096
              protocol: TCP
            - name: https
              port: 8920
              targetPort: 8920
              nodePort: 30920
              protocol: TCP

    - name: Get Jellyfin pod status
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Pod
        name: jellyfin
        namespace: jellyfin
      register: jellyfin_pod_info

    - name: Get Jellyfin service info
      kubernetes.core.k8s_info:
        api_version: v1
        kind: Service
        name: jellyfin-service
        namespace: jellyfin
      register: jellyfin_service_info

    - name: Report Jellyfin deployment status
      ansible.builtin.debug:
        msg: |
          === Jellyfin Deployment Status ===
          Pod Status: {{ jellyfin_pod_info.resources[0].status.phase | default('Unknown') }}
          Service Port: {{ jellyfin_service_info.resources[0].spec.ports[0].nodePort | default('N/A') }}
          
          {% if jellyfin_pod_info.resources[0].status.phase == 'Running' %}
          ✅ Jellyfin is ready!
          Access at: http://{{ jellyfin_node_name | default('YOUR_NODE_IP') }}:{{ jellyfin_service_info.resources[0].spec.ports[0].nodePort | default('30096') }}
          {% else %}
          ❌ Jellyfin deployment may have issues. Check pod logs:
          kubectl logs -n jellyfin jellyfin
          {% endif %}

    - name: Set facts for site.yaml validation
      ansible.builtin.set_fact:
        jellyfin_pod_ready: "{{ jellyfin_pod_info.resources[0].status.phase == 'Running' }}"
        jellyfin_service_nodeport: "{{ jellyfin_service_info.resources[0].spec.ports[0].nodePort | default('30096') }}"