---
- name: Install and run exporters (node_exporter and podman exporters)
  hosts: all
  become: true
  vars:
    node_exporter_image: docker.io/prom/node-exporter:latest
    # Use the public podman system metrics image instead of private docker.io
    podman_exporter_image: 192.168.4.63:5000/podman-system-metrics:latest
    podman_system_metrics_image: 192.168.4.63:5000/podman-system-metrics:latest
    # Host port for podman_system_metrics is expected to be provided from group_vars
    # (do not hardcode here so group_vars/all.yml can override safely)
  tasks:
    - name: Ensure Podman is installed (Debian)
      apt:
        name: podman
        state: present
      when: ansible_os_family == 'Debian'

    - name: Ensure Podman is installed (RedHat)
      yum:
        name: podman
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Ensure node_exporter container is running
      containers.podman.podman_container:
        name: node_exporter
        image: "{{ node_exporter_image }}"
        state: started
        restart_policy: always
        ports:
          - 9100:9100
        command: --web.listen-address=0.0.0.0:9100

    - name: Ensure podman_exporter container is running (optional)
      containers.podman.podman_container:
        name: podman_exporter
        image: "{{ podman_exporter_image }}"
        state: started
        restart_policy: always
        ports:
          - 9300:9300
      when: enable_podman_exporters | default(true)

    - name: Remove any existing container named podman_system_metrics (idempotent)
      containers.podman.podman_container:
        name: podman_system_metrics
        state: absent
      when: enable_podman_exporters | default(true)

    - name: Find containers publishing the configured podman_system_metrics host port on the host
      shell: |
        podman ps -a --format '{% raw %}{{.ID}} {{.Ports}} {{.Names}}{% endraw %}' \
          | grep -E "127\\.0\\.0\\.1:{{ podman_system_metrics_host_port }}|:{{ podman_system_metrics_host_port }}->" \
          | awk '{print $1}' || true
      register: podman_port_containers
      changed_when: false
      when: enable_podman_exporters | default(true)

    - name: Remove containers that publish the configured host port (if any)
      shell: podman rm -f {{ item }}
      loop: "{{ podman_port_containers.stdout_lines }}"
      when: podman_port_containers.stdout != ""
      register: removed_port_containers
      failed_when: removed_port_containers is failed and removed_port_containers.rc != 0

    - name: Wait for configured podman_system_metrics host port to be released
      wait_for:
        port: "{{ podman_system_metrics_host_port }}"
        host: 127.0.0.1
        state: stopped
        timeout: 30
        delay: 2
      when: podman_port_containers.stdout != ""
      ignore_errors: yes

    - name: Check if configured podman_system_metrics host port is still in use by any process
      shell: |
        # Try lsof first, fallback to ss if lsof is not available
        if command -v lsof >/dev/null 2>&1; then
          lsof -ti :{{ podman_system_metrics_host_port }} 2>/dev/null || true
        elif command -v ss >/dev/null 2>&1; then
          ss -tlnp | grep ':{{ podman_system_metrics_host_port }} ' | awk '{print $7}' | sed 's/.*pid=\([0-9]*\).*/\1/' || true
        else
          # Last resort: use netstat
          netstat -tlnp 2>/dev/null | grep ':{{ podman_system_metrics_host_port }} ' | awk '{print $7}' | cut -d'/' -f1 || true
        fi
      register: port_processes
      changed_when: false
      when: enable_podman_exporters | default(true)

    - name: Kill processes using configured podman_system_metrics host port if any exist
      shell: |
        if [ -n "{{ port_processes.stdout }}" ]; then
          echo "Found processes using port {{ podman_system_metrics_host_port }}: {{ port_processes.stdout }}"
          kill -9 {{ port_processes.stdout }} || true
          sleep 2
        fi
      when:
        - enable_podman_exporters | default(true)
        - port_processes.stdout != ""
      register: killed_processes
      changed_when: port_processes.stdout != ""

    - name: Ensure podman_system_metrics container is running (optional)
      containers.podman.podman_container:
        name: podman_system_metrics
        image: "{{ podman_system_metrics_image }}"
        state: started
        restart_policy: always
        ports:
          # bind to loopback on the host to avoid collisions with other services
          # bind to loopback on the host to avoid collisions with other services; container listens on container port 9882
          - "127.0.0.1:{{ podman_system_metrics_host_port }}:9882"
          # Note: Ensure that the host port is set correctly in group_vars
      when: enable_podman_exporters | default(true)
  
