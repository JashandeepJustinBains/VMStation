- name: Mount NFS share on non-storage_nodes
  hosts: all:!storage_nodes
  become: true
  vars:
    nfs_server: "192.168.4.61"
    nfs_export: "/srv/media"
    mount_point: "/mnt/media"
  tasks:
    - name: Install NFS client utilities (Debian)
      apt:
        name: nfs-common
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install NFS client utilities (RHEL)
      yum:
        name: nfs-utils
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Ensure mount point exists
      file:
        path: "{{ mount_point }}"
        state: directory

    - name: Mount NFS share if not already mounted
      mount:
        src: "{{ nfs_server }}:{{ nfs_export }}"
        path: "{{ mount_point }}"
        fstype: nfs
        state: mounted
        opts: rw
- hosts: storage_nodes
  become: true
  vars:
    jellyfin_image: "jellyfin/jellyfin:latest"
    media_dir: "/mnt/media"
    config_dir: "/mnt/jellyfin-config"
    nfs_export: "/srv/media"
    nfs_clients: "192.168.4.0/24(rw,sync,no_subtree_check,no_root_squash,all_squash,anonuid=1001,anongid=1001)"
  tasks:
    - name: Ensure media directory exists
      file:
        path: "{{ media_dir }}"
        state: directory
        mode: '0775'
    - name: Ensure Jellyfin config directory exists
      file:
        path: "{{ config_dir }}"
        state: directory
        mode: '0775'
    - name: Ensure nfsuser exists
      ansible.builtin.user:
        name: nfsuser
        state: present
        shell: /bin/bash
        create_home: yes
    - name: Set Samba password for nfsuser
      ansible.builtin.shell: |
        echo -e '{{ samba_password }}\n{{ samba_password }}' | smbpasswd -s -a nfsuser
      args:
        creates: "/var/lib/samba/private/nfsuser_smb_set"
      register: smbpasswd_result
      changed_when: smbpasswd_result.rc == 0
    - name: Mark Samba password set
      ansible.builtin.file:
        path: "/var/lib/samba/private/nfsuser_smb_set"
        state: touch
      when: smbpasswd_result.rc == 0
    - name: Install Samba (Debian)
      apt:
        name: samba
        state: present
      when: ansible_os_family == 'Debian'

    - name: Install Samba (RHEL)
      yum:
        name: samba
        state: present
      when: ansible_os_family == 'RedHat'

    - name: Configure Samba share for media directory
      blockinfile:
        path: /etc/samba/smb.conf
        marker: "# {ansible managed media share}"
        block: |
          [media]
          path = /srv/media
          browseable = yes
          writable = yes
          valid users = nfsuser
          guest ok = no
          force user = nfsuser

    - name: Restart Samba service (Debian)
      service:
        name: smbd
        state: restarted
      when: ansible_os_family == 'Debian'

    - name: Restart Samba service (RHEL)
      service:
        name: smb
        state: restarted
      when: ansible_os_family == 'RedHat'
    - name: Install NFS server packages
      apt:
        name: nfs-kernel-server
        state: present
      when: ansible_os_family == 'Debian'
    - name: Install NFS server packages (RHEL)
      yum:
        name: nfs-utils
        state: present
      when: ansible_os_family == 'RedHat'
    - name: Export media directory via NFS
      lineinfile:
        path: /etc/exports
        line: "{{ nfs_export }} {{ nfs_clients }}"
        state: present
    - name: Reload NFS exports
      command: exportfs -ra
    - name: Install Podman
      apt:
        name: podman
        state: present
      when: ansible_os_family == 'Debian'
    - name: Install Podman (RHEL)
      yum:
        name: podman
        state: present
      when: ansible_os_family == 'RedHat'
    - name: Run Jellyfin container
      containers.podman.podman_container:
        name: jellyfin
        image: "{{ jellyfin_image }}"
        state: started
        restart_policy: always
        volumes:
          - "{{ media_dir }}:/media"
          - "{{ config_dir }}:/config"
        ports:
          - "8096:8096"
