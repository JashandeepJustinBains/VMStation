- name: Basic security and functionality setup
  hosts: all
  become: true
  tasks:
    - name: Install and configure UFW (Debian)
      apt:
        name: ufw
        state: present
      when: ansible_os_family == 'Debian'
    - name: Set UFW default deny incoming
      command: ufw default deny incoming
      when: ansible_os_family == 'Debian'
    - name: Set UFW default allow outgoing
      command: ufw default allow outgoing
      when: ansible_os_family == 'Debian'
    - name: Allow all local network connections
      command: ufw allow from 192.168.0.0/16
      when: ansible_os_family == 'Debian'
    - name: Allow SSH from local network
      command: ufw allow from 192.168.0.0/16 to any port ssh
      when: ansible_os_family == 'Debian'
    # If using VPN on compute_node, allow VPN port (example: 1194 for OpenVPN)
    # - name: Allow VPN port
    #   command: ufw allow 1194/udp
    #   when: ansible_os_family == 'Debian'
    # For media server file share, allow NFS (if used)
    # - name: Allow NFS
    #   command: ufw allow from 192.168.0.0/16 to any port nfs
    #   when: ansible_os_family == 'Debian'
    - name: Install and configure firewalld (RHEL)
      yum:
        name: firewalld
        state: present
      when: ansible_os_family == 'RedHat'
    - name: Harden SSH configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
      notify: Restart SSH
    - name: Install fail2ban
      apt:
        name: fail2ban
        state: present
  handlers:
    - name: Restart SSH
      command: systemctl restart sshd


- name: Install and configure node_exporter
  hosts: all
  become: true
  vars:
    node_exporter_version: "1.7.0"
    node_exporter_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
  tasks:
    - name: Download node_exporter
      get_url:
        url: "{{ node_exporter_url }}"
        dest: /tmp/node_exporter.tar.gz
    - name: Extract node_exporter
      unarchive:
        src: /tmp/node_exporter.tar.gz
        dest: /opt/
        remote_src: yes
    - name: Link node_exporter binary
      file:
        src: /opt/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter
        dest: /usr/local/bin/node_exporter
        state: link
    - name: Create systemd service for node_exporter
      copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Prometheus Node Exporter
          After=network.target
          [Service]
          User=root
          ExecStart=/usr/local/bin/node_exporter
          [Install]
          WantedBy=default.target
    - name: Enable and start node_exporter
      systemd:
        name: node_exporter
        enabled: yes
        state: started


- name: Install and configure Grafana
  hosts: monitoring_nodes
  become: true
  vars:
    grafana_version: "10.2.3"
    grafana_deb_url: "https://dl.grafana.com/oss/release/grafana_{{ grafana_version }}_amd64.deb"
  tasks:
    - name: Download Grafana deb package
      get_url:
        url: "{{ grafana_deb_url }}"
        dest: /tmp/grafana.deb
    - name: Install Grafana
      apt:
        deb: /tmp/grafana.deb
        state: present
    - name: Stop grafana-server if running (prepare data migration)
      become: true
      systemd:
        name: grafana-server
        state: stopped
      failed_when: false

    - name: Ensure persistent Grafana data directory exists
      file:
        path: /srv/monitoring_data/grafana
        state: directory
        owner: grafana
        group: grafana
        mode: '0755'

    - name: Move existing Grafana data into /srv/monitoring_data/grafana (if present)
      shell: |
        set -e
        if [ -d /var/lib/grafana ] && [ ! -L /var/lib/grafana ]; then
          mv /var/lib/grafana/* /srv/monitoring_data/grafana/ || true
          rm -rf /var/lib/grafana
        fi
      args:
        warn: false

    - name: Ensure /var/lib/grafana is a symlink to persistent storage
      file:
        src: /srv/monitoring_data/grafana
        path: /var/lib/grafana
        state: link

    - name: Ensure ownership for persisted Grafana data
      file:
        path: /srv/monitoring_data/grafana
        owner: grafana
        group: grafana
        recurse: yes

    - name: Ensure Grafana service is enabled and started
      systemd:
        name: grafana-server
        enabled: yes
        state: started
    - name: Allow Grafana port 3000 through UFW (Debian)
      command: ufw allow 3000/tcp
      when: ansible_os_family == 'Debian'




    - name: Ensure Grafana provisioning directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: grafana
        group: grafana
        mode: '0755'
      loop:
        - /etc/grafana/provisioning/datasources
        - /etc/grafana/provisioning/dashboards




    - name: Remove extra Grafana datasource YAML files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /etc/grafana/provisioning/datasources/prometheus.yaml
        - /etc/grafana/provisioning/datasources/sample.yaml

    - name: Provision Prometheus and Loki data sources for Grafana
      copy:
        dest: /etc/grafana/provisioning/datasources/datasources.yaml
        content: |
          apiVersion: 1
          datasources:
            - name: Prometheus
              type: prometheus
              access: proxy
              url: http://localhost:9090
              isDefault: true
            - name: Loki
              type: loki
              access: proxy
              url: http://localhost:3100
              isDefault: false
        owner: grafana
        group: grafana
        mode: '0644'
      notify: Restart grafana-server



    - name: Copy Podman dashboard JSON for provisioning
      copy:
        src: grafana_podman_dashboard.json
        dest: /etc/grafana/provisioning/dashboards/podman_dashboard.json
        owner: grafana
        group: grafana
        mode: '0644'
      notify: Restart grafana-server

    - name: Copy Loki dashboard JSON for provisioning
      copy:
        content: |
          {
            "id": null,
            "title": "Loki Logs Overview",
            "tags": ["loki", "logs"],
            "timezone": "browser",
            "schemaVersion": 36,
            "version": 1,
            "refresh": "30s",
            "panels": [
              {
                "type": "logs",
                "title": "Recent Loki Logs",
                "datasource": "Loki",
                "targets": [
                  {
                    "expr": "{job=\"varlogs\"}",
                    "format": "logs"
                  }
                ],
                "gridPos": {"x": 0, "y": 0, "w": 24, "h": 12}
              }
            ]
          }
        dest: /etc/grafana/provisioning/dashboards/loki_dashboard.json
        owner: grafana
        group: grafana
        mode: '0644'
      notify: Restart grafana-server


    - name: Provision Podman and Loki dashboards in Grafana
      copy:
        dest: /etc/grafana/provisioning/dashboards/dashboards.yaml
        content: |
          apiVersion: 1
          providers:
            - name: 'Podman Dashboards'
              orgId: 1
              folder: 'Podman'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /etc/grafana/provisioning/dashboards
            - name: 'Loki Dashboards'
              orgId: 1
              folder: 'Loki'
              type: file
              disableDeletion: false
              editable: true
              options:
                path: /etc/grafana/provisioning/dashboards
        owner: grafana
        group: grafana
        mode: '0644'
      notify: Restart grafana-server

  handlers:
    - name: Restart grafana-server
      become: true
      systemd:
        name: grafana-server
        state: restarted
