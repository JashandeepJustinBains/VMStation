
- name: Basic security and functionality setup
  hosts: all
  become: true
  tasks:
    - name: Install and configure UFW (Debian)
      apt:
        name: ufw
        state: present
      when: ansible_os_family == 'Debian'
    - name: Install and configure firewalld (RHEL)
      yum:
        name: firewalld
        state: present
      when: ansible_os_family == 'RedHat'
    - name: Harden SSH configuration
      lineinfile:
        path: /etc/ssh/sshd_config
        regexp: '^#?PasswordAuthentication'
        line: 'PasswordAuthentication no'
        state: present
      notify: Restart SSH
    - name: Install fail2ban
      apt:
        name: fail2ban
        state: present
      when: ansible_os_family == 'Debian'
    - name: Install fail2ban (RHEL)
      yum:
        name: fail2ban
        state: present
      when: ansible_os_family == 'RedHat'
    - name: Install basic tools
      package:
        name:
          - curl
          - git
          - htop
          - sysstat
        state: present

---
- name: Monitoring app directories setup (minipc only)
  hosts: monitoring_node
  become: true
  tasks:
    - name: Ensure persistent directory for Drone
      file:
        path: /srv/drone
        state: directory
        owner: root
        group: root
        mode: '0755'
    - name: Ensure persistent directory for Grafana
      file:
        path: /srv/grafana
        state: directory
        owner: root
        group: root
        mode: '0755'
    - name: Ensure persistent directory for Prometheus
      file:
        path: /srv/prometheus
        state: directory
        owner: root
        group: root
        mode: '0755'
    - name: Ensure persistent directory for Loki
      file:
        path: /srv/loki
        state: directory
        owner: root
        group: root
        mode: '0755'
    - name: Install Podman (Debian)
      apt:
        name: podman
        state: present
      when: ansible_os_family == 'Debian'
    - name: Install Podman (RHEL)
      yum:
        name: podman
        state: present
      when: ansible_os_family == 'RedHat'
    - name: Set up automatic security updates (Debian)
      apt:
        name: unattended-upgrades
        state: present
      when: ansible_os_family == 'Debian'
    - name: Set up automatic security updates (RHEL)
      yum:
        name: yum-cron
        state: present
      when: ansible_os_family == 'RedHat'
  handlers:
    - name: Restart SSH
      service:
        name: ssh
        state: restarted

- name: Monitoring setup
  hosts: monitoring
  become: true
  vars:
  node_exporter_version: "1.7.0"
  node_exporter_url: "https://github.com/prometheus/node_exporter/releases/download/v{{ node_exporter_version }}/node_exporter-{{ node_exporter_version }}.linux-amd64.tar.gz"
  tasks:
  - name: Download node_exporter
    get_url:
    url: "{{ node_exporter_url }}"
    dest: /tmp/node_exporter.tar.gz
  - name: Extract node_exporter
    unarchive:
    src: /tmp/node_exporter.tar.gz
    dest: /opt/
    remote_src: yes
  - name: Create symlink for node_exporter
    file:
    src: /opt/node_exporter-{{ node_exporter_version }}.linux-amd64/node_exporter
    dest: /usr/local/bin/node_exporter
    state: link
  - name: Create systemd service for node_exporter
    copy:
    dest: /etc/systemd/system/node_exporter.service
    content: |
      [Unit]
      Description=Prometheus Node Exporter
      After=network.target
      [Service]
      User=root
      ExecStart=/usr/local/bin/node_exporter
      [Install]
      WantedBy=default.target
  - name: Enable and start node_exporter
    systemd:
    name: node_exporter
    enabled: yes
    state: started

  - name: Import IPMI statistics from R430
    hosts: monitoring
    become: true
    vars:
    r430_ip: "{{ hostvars['r430']['ansible_host'] | default('192.168.1.20') }}"
    tasks:
  - name: Install ipmitool
    package:
    name: ipmitool
    state: present
  - name: Collect IPMI statistics from R430
    shell: |
      ipmitool -I lanplus -H {{ r430_ip }} -U admin -P '{{ vault_ipmi_password | default("changeme") }}' sensor
      register: ipmi_stats
      changed_when: false
  - name: Save IPMI stats to file
    copy:
    dest: /var/log/ipmi_r430_stats.txt
  - name: Import IPMI statistics from R430
    hosts: monitoring
    become: true
    vars:
    r430_ip: "{{ hostvars['r430']['ansible_host'] | default('192.168.1.20') }}"
    tasks:
  - name: Install ipmitool
    package:
    name: ipmitool
    state: present
  - name: Collect IPMI statistics from R430
    shell: |
      ipmitool -I lanplus -H {{ r430_ip }} -U admin -P '{{ vault_ipmi_password | default("changeme") }}' sensor
      register: ipmi_stats
      changed_when: false
  - name: Save IPMI stats to file
    copy:
    dest: /var/log/ipmi_r430_stats.txt
    content: "{{ ipmi_stats.stdout }}"

  - name: Collect local IPMI statistics on R430
    hosts: "{{ vault_become_true_host | default('r430') }}"
    become: true
    tasks:
  - name: Install ipmitool
    package:
    name: ipmitool
    state: present
  - name: Collect IPMI sensor data
    command: ipmitool sensor
    register: ipmi_local_stats
    changed_when: false
  - name: Save local IPMI stats to file
    copy:
    dest: /var/log/ipmi_local_stats.txt
    content: "{{ ipmi_local_stats.stdout }}"
    content: "{{ ipmi_stats.stdout }}"

  - name: Deploy Splunk pod (commented out)
    hosts: monitoring
    become: true
    vars:
    splunk_image: "splunk/splunk:latest"
    splunk_data: "/mnt/splunk"
    tasks:
  - name: Create Splunk data directory
    file:
    path: "{{ splunk_data }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  - name: Run Splunk container
    containers.podman.podman_container:
    name: splunk
    image: "{{ splunk_image }}"
    state: started
    restart_policy: always
    volumes:
    - "{{ splunk_data }}:/opt/splunk"
    ports:
    - "8000:8000"
