

- name: Podman Metrics Exporter Setup
  hosts: all
  become: true
  tasks:
    - name: Validate /srv/monitoring_data is mounted on monitoring nodes
      ansible.builtin.fail:
        msg: "/srv/monitoring_data is not mounted. Mount your monitoring partition (e.g. /dev/sda1) to /srv/monitoring_data and re-run the playbook."
      when: (inventory_hostname in groups['monitoring_nodes']) and ((ansible_mounts | selectattr('mount','equalto','/srv/monitoring_data') | list | length) == 0)

    - name: Validate /srv/monitoring_data is writable on monitoring nodes
      ansible.builtin.command: test -w /srv/monitoring_data
      register: monitoring_write_test
      failed_when: monitoring_write_test.rc != 0
      changed_when: false
      when: inventory_hostname in groups['monitoring_nodes']

    # ...existing code...
    - name: Add Podman repo key (Debian/Ubuntu)
      apt_key:
        url: 'https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/Release.key'
        state: present
      when: ansible_os_family == 'Debian'

    - name: Add Podman upstream repository (Debian/Ubuntu)
      apt_repository:
        repo: 'deb https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/xUbuntu_22.04/ /'
        state: present
      when: ansible_os_family == 'Debian'

    - name: Upgrade Podman to latest upstream version (Debian/Ubuntu)
      apt:
        name: podman
        state: latest
        update_cache: yes
      when: ansible_os_family == 'Debian'

    - name: Enable Podman metrics endpoint
      ansible.builtin.lineinfile:
        path: /etc/containers/containers.conf
        regexp: '^#?metrics_port ='
        line: 'metrics_port = 9882'
        state: present
        create: yes
      # No handler needed; explicit restart task follows
      tags: metrics

    - name: Ensure Podman service is restarted to apply metrics config
      ansible.builtin.systemd:
        name: podman
        state: restarted
        enabled: yes
      when: ansible_service_mgr == 'systemd'
      tags: metrics

    - name: Ensure /etc/promtail directory exists
      ansible.builtin.file:
        path: /etc/promtail
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags: logs

    - name: Create systemd unit for Podman metrics service
      ansible.builtin.copy:
        dest: /etc/systemd/system/podman-metrics.service
        content: |
          [Unit]
          Description=Podman Metrics Service
          After=network.target

          [Service]
          ExecStart=/usr/bin/podman system service --time=0 tcp:0.0.0.0:9882
          Restart=always
          User=root

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      tags: metrics

    - name: Reload systemd and enable/start podman-metrics
      ansible.builtin.systemd:
        name: podman-metrics.service
        state: started
        enabled: yes
        daemon_reload: yes
      tags: metrics

    - name: Ensure monitoring data base exists on hosts
      ansible.builtin.file:
        path: /srv/monitoring_data
        state: directory
        owner: root
        group: root
        mode: '0755'
      tags: monitoring_storage

    - name: Ensure promtail data directory exists on hosts
      ansible.builtin.file:
        path: /srv/monitoring_data/promtail
        state: directory
        owner: root
        group: root
        mode: '0755'
        recurse: yes
      tags: monitoring_storage

    - name: Ensure prometheus data directory exists on monitoring nodes
      ansible.builtin.file:
        path: /srv/monitoring_data/prometheus
        state: directory
        owner: root
        group: root
        mode: '0755'
        recurse: yes
      when: inventory_hostname in groups['monitoring_nodes']
      tags: monitoring_storage

    - name: Deploy promtail container
      containers.podman.podman_container:
        name: promtail
        image: docker.io/grafana/promtail:latest
        state: started
        volumes:
          - /var/log:/var/log:ro
          - /etc/promtail:/etc/promtail:ro
          - /srv/monitoring_data/promtail:/var/promtail:rw
        restart_policy: always
        command: -config.file=/etc/promtail/promtail.yaml -positions.file=/var/promtail/positions.yaml
      tags: logs

    - name: Download node_exporter binary on the control host
      ansible.builtin.get_url:
        url: https://github.com/prometheus/node_exporter/releases/download/v1.7.0/node_exporter-1.7.0.linux-amd64.tar.gz
        dest: /tmp/node_exporter.tar.gz
        mode: '0644'
      delegate_to: localhost
      run_once: true
      tags: node_exporter

    - name: Extract node_exporter on target hosts (archive copied from control)
      ansible.builtin.unarchive:
        src: /tmp/node_exporter.tar.gz
        dest: /opt/
        remote_src: no
      tags: node_exporter

    - name: Create systemd service for node_exporter
      ansible.builtin.copy:
        dest: /etc/systemd/system/node_exporter.service
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User=root
          ExecStart=/opt/node_exporter-1.7.0.linux-amd64/node_exporter
          Restart=always

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      tags: node_exporter

    - name: Start and enable node_exporter
      ansible.builtin.systemd:
        name: node_exporter
        state: started
        enabled: yes
      tags: node_exporter


    - name: Ensure /etc/prometheus directory exists on monitoring_node
      ansible.builtin.file:
        path: /etc/prometheus
        state: directory
        owner: root
        group: root
        mode: '0755'
      when: inventory_hostname in groups['monitoring_nodes']
      tags: prometheus

    - name: Copy prometheus.yml to monitoring_node
      ansible.builtin.copy:
        src: files/prometheus.yml
        dest: /etc/prometheus/prometheus.yml
        owner: root
        group: root
        mode: '0644'
      notify: Restart Prometheus Container
      when: inventory_hostname in groups['monitoring_nodes']
      tags: prometheus

    - name: Run Prometheus as a Podman container on monitoring nodes
      containers.podman.podman_container:
        name: prometheus
        image: docker.io/prom/prometheus:latest
        state: started
        restart_policy: always
        ports:
          - "9090:9090"
        volumes:
          - /etc/prometheus:/etc/prometheus:Z
          - /srv/monitoring_data/prometheus:/prometheus:Z
        command: --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus
      when: inventory_hostname in groups['monitoring_nodes']
      tags: prometheus

    - name: Stat for local prometheus binary
      ansible.builtin.stat:
        path: /usr/local/bin/prometheus
      register: prometheus_stat
      when: inventory_hostname in groups['monitoring_nodes']
      tags: prometheus

    - name: Create a systemd unit for local Prometheus (if binary exists)
      ansible.builtin.copy:
        dest: /etc/systemd/system/prometheus.service
        content: |
          [Unit]
          Description=Prometheus Server
          Wants=network-online.target
          After=network-online.target

          [Service]
          Type=simple
          ExecStart=/usr/local/bin/prometheus --config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/srv/monitoring_data/prometheus
          Restart=on-failure

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      when: inventory_hostname in groups['monitoring_nodes'] and prometheus_stat.stat.exists
      tags: prometheus

    - name: Copy promtail config to all nodes
      ansible.builtin.copy:
        src: files/promtail-config.yaml
        dest: /etc/promtail/promtail.yaml
        owner: root
        group: root
        mode: '0644'
      tags: promtail

    - name: Ensure firewall allows Prometheus/Loki/node_exporter scraping
      ansible.builtin.ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop:
        - 9882
        - 3100
        - 9100
      when: ansible_os_family == 'Debian'
      tags: firewall

  handlers:
    - name: Restart Prometheus Container
  ansible.builtin.command: podman restart prometheus
  become: true
  listen: Restart Prometheus Container
