- name: Podman stats forwarder and promtail integration
  hosts: all
  become: true
  vars:
    podman_stats_script: /usr/local/bin/podman-stats-forward.sh
    podman_stats_log: /srv/monitoring_data/promtail/podman_stats.log
  tasks:
    - name: Ensure jq is installed (used by podman-stats-forwarder)
      ansible.builtin.package:
        name: jq
        state: present
      tags: podman_stats

    - name: Ensure podman stats forwarder script directory exists
      ansible.builtin.file:
        path: /usr/local/bin
        state: directory
        mode: '0755'

    - name: Deploy podman-stats forwarder script
      ansible.builtin.copy:
        dest: "{{ podman_stats_script }}"
        mode: '0755'
        content: |
          #!/bin/bash
          # Write podman stats as JSON lines to persistent monitoring storage
          out={{ podman_stats_log }}
          mkdir -p "$(dirname "$out")"
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          if podman stats --no-stream --format json >/dev/null 2>&1; then
            podman stats --no-stream --format json | jq -c '.[]' | while read -r line; do
              echo "${timestamp} ${line}" >> "${out}"
            done
          else
            podman ps -a --format json | jq -c '.[]' | while read -r c; do
              id=$(echo "$c" | jq -r '.Id')
              insp=$(podman inspect "$id" --format json 2>/dev/null | jq -c '.[0]')
              echo "${timestamp} ${insp}" >> "${out}"
            done
          fi
      tags: podman_stats

    - name: Create systemd service for podman-stats forwarder
      ansible.builtin.copy:
        dest: /etc/systemd/system/podman-stats-forwarder.service
        content: |
          [Unit]
          Description=Run podman-stats forwarder (writes JSON lines to /srv/monitoring_data/promtail/podman_stats.log)
          After=network.target

          [Service]
          Type=oneshot
          ExecStart={{ podman_stats_script }}

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      tags: podman_stats

    - name: Create systemd timer for podman-stats forwarder
      ansible.builtin.copy:
        dest: /etc/systemd/system/podman-stats-forwarder.timer
        content: |
          [Unit]
          Description=Run podman-stats forwarder every 30s

          [Timer]
          OnBootSec=30s
          OnUnitActiveSec=30s

          [Install]
          WantedBy=timers.target
        mode: '0644'
      tags: podman_stats

    - name: Enable and start podman-stats forwarder timer
      ansible.builtin.systemd:
        name: podman-stats-forwarder.timer
        enabled: yes
        state: started
        daemon_reload: yes
      tags: podman_stats

    - name: Ensure Promtail config contains the podman-stats log target
      ansible.builtin.blockinfile:
        path: "{{ playbook_dir }}/../files/promtail-config.yaml"
        marker: "# {mark} ANSIBLE MANAGED PODMAN STATS"
        block: |
          - job_name: podman_stats
            static_configs:
              - targets: ['localhost']
                labels:
                  job: podman_stats
                  __path__: /var/promtail/podman_stats.log
      delegate_to: localhost
      run_once: true
      tags: promtail

    - name: Deploy monitoring cleanup script
      ansible.builtin.copy:
        dest: /usr/local/bin/monitoring_cleanup.sh
        mode: '0755'
        content: |
          #!/bin/bash
          # Simple cleanup: delete files older than X days under /srv/monitoring_data when usage >= threshold
          base=/srv/monitoring_data
          threshold=70
          min_age_days=3

          get_usage() {
            df -P "$base" | awk 'NR==2{print int($5)}'
          }

          usage=$(get_usage)
          echo "monitoring_cleanup: current usage=${usage}%"

          if [ "$usage" -lt "$threshold" ]; then
            # also perform periodic trim of files older than min_age
            find "$base" -type f -mtime +$min_age_days -print0 | xargs -0 -r rm -f
            exit 0
          fi

          # Aggressive cleanup loop: remove oldest files first until usage falls below threshold
          while [ "$usage" -ge "$threshold" ]; do
            # find the oldest file (exclude directories)
            file=$(find "$base" -type f -printf '%T+ %p\n' | sort | head -n 1 | awk '{print $2}')
            if [ -z "$file" ]; then
              echo "No files left to delete, exiting"
              break
            fi
            echo "Deleting $file to reduce usage"
            rm -f "$file"
            usage=$(get_usage)
            echo "monitoring_cleanup: new usage=${usage}%"
          done
      tags: monitoring_cleanup

    - name: Create systemd service for monitoring cleanup
      ansible.builtin.copy:
        dest: /etc/systemd/system/monitoring-cleanup.service
        content: |
          [Unit]
          Description=Monitoring data cleanup
          After=network.target

          [Service]
          Type=oneshot
          ExecStart=/usr/local/bin/monitoring_cleanup.sh

          [Install]
          WantedBy=multi-user.target
        mode: '0644'
      tags: monitoring_cleanup

    - name: Create systemd timer for monitoring cleanup
      ansible.builtin.copy:
        dest: /etc/systemd/system/monitoring-cleanup.timer
        content: |
          [Unit]
          Description=Run monitoring cleanup daily

          [Timer]
          OnCalendar=daily
          Persistent=true

          [Install]
          WantedBy=timers.target
        mode: '0644'
      tags: monitoring_cleanup

    - name: Enable and start monitoring cleanup timer
      ansible.builtin.systemd:
        name: monitoring-cleanup.timer
        enabled: yes
        state: started
        daemon_reload: yes
      tags: monitoring_cleanup

    - name: Install logrotate config for monitoring promtail logs
      ansible.builtin.copy:
        dest: /etc/logrotate.d/monitoring-promtail
        mode: '0644'
        content: |
          /srv/monitoring_data/promtail/*.log {
              daily
              rotate 7
              compress
              missingok
              notifempty
              create 0644 root root
              sharedscripts
              postrotate
                  # no-op
              endscript
          }
      tags: monitoring_cleanup

  handlers:
    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: yes
